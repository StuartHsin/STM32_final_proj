
final_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d0ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da4  0800d280  0800d280  0000e280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e024  0800e024  000101dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e024  0800e024  0000f024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e02c  0800e02c  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e02c  0800e02c  0000f02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e030  0800e030  0000f030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800e034  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101dc  2**0
                  CONTENTS
 10 .bss          000135bc  200001dc  200001dc  000101dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013798  20013798  000101dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001802b  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038a8  00000000  00000000  00028237  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001678  00000000  00000000  0002bae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001190  00000000  00000000  0002d158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000246e1  00000000  00000000  0002e2e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b832  00000000  00000000  000529c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8697  00000000  00000000  0006e1fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146892  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007534  00000000  00000000  001468d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0014de0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d264 	.word	0x0800d264

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800d264 	.word	0x0800d264

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a0 	b.w	8000f90 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	460c      	mov	r4, r1
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d14e      	bne.n	8000d7e <__udivmoddi4+0xaa>
 8000ce0:	4694      	mov	ip, r2
 8000ce2:	458c      	cmp	ip, r1
 8000ce4:	4686      	mov	lr, r0
 8000ce6:	fab2 f282 	clz	r2, r2
 8000cea:	d962      	bls.n	8000db2 <__udivmoddi4+0xde>
 8000cec:	b14a      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cee:	f1c2 0320 	rsb	r3, r2, #32
 8000cf2:	4091      	lsls	r1, r2
 8000cf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	4319      	orrs	r1, r3
 8000cfe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f f68c 	uxth.w	r6, ip
 8000d0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d12:	fb07 1114 	mls	r1, r7, r4, r1
 8000d16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1a:	fb04 f106 	mul.w	r1, r4, r6
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x64>
 8000d22:	eb1c 0303 	adds.w	r3, ip, r3
 8000d26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d2a:	f080 8112 	bcs.w	8000f52 <__udivmoddi4+0x27e>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 810f 	bls.w	8000f52 <__udivmoddi4+0x27e>
 8000d34:	3c02      	subs	r4, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a59      	subs	r1, r3, r1
 8000d3a:	fa1f f38e 	uxth.w	r3, lr
 8000d3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d42:	fb07 1110 	mls	r1, r7, r0, r1
 8000d46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4a:	fb00 f606 	mul.w	r6, r0, r6
 8000d4e:	429e      	cmp	r6, r3
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x94>
 8000d52:	eb1c 0303 	adds.w	r3, ip, r3
 8000d56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d5a:	f080 80fc 	bcs.w	8000f56 <__udivmoddi4+0x282>
 8000d5e:	429e      	cmp	r6, r3
 8000d60:	f240 80f9 	bls.w	8000f56 <__udivmoddi4+0x282>
 8000d64:	4463      	add	r3, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	1b9b      	subs	r3, r3, r6
 8000d6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa6>
 8000d72:	40d3      	lsrs	r3, r2
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xba>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb4>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x150>
 8000d96:	42a3      	cmp	r3, r4
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xcc>
 8000d9a:	4290      	cmp	r0, r2
 8000d9c:	f0c0 80f0 	bcc.w	8000f80 <__udivmoddi4+0x2ac>
 8000da0:	1a86      	subs	r6, r0, r2
 8000da2:	eb64 0303 	sbc.w	r3, r4, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	2d00      	cmp	r5, #0
 8000daa:	d0e6      	beq.n	8000d7a <__udivmoddi4+0xa6>
 8000dac:	e9c5 6300 	strd	r6, r3, [r5]
 8000db0:	e7e3      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	f040 8090 	bne.w	8000ed8 <__udivmoddi4+0x204>
 8000db8:	eba1 040c 	sub.w	r4, r1, ip
 8000dbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000dc0:	fa1f f78c 	uxth.w	r7, ip
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dce:	fb08 4416 	mls	r4, r8, r6, r4
 8000dd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dd6:	fb07 f006 	mul.w	r0, r7, r6
 8000dda:	4298      	cmp	r0, r3
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x11c>
 8000dde:	eb1c 0303 	adds.w	r3, ip, r3
 8000de2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x11a>
 8000de8:	4298      	cmp	r0, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000dee:	4626      	mov	r6, r4
 8000df0:	1a1c      	subs	r4, r3, r0
 8000df2:	fa1f f38e 	uxth.w	r3, lr
 8000df6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000dfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e02:	fb00 f707 	mul.w	r7, r0, r7
 8000e06:	429f      	cmp	r7, r3
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x148>
 8000e0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x146>
 8000e14:	429f      	cmp	r7, r3
 8000e16:	f200 80b0 	bhi.w	8000f7a <__udivmoddi4+0x2a6>
 8000e1a:	4620      	mov	r0, r4
 8000e1c:	1bdb      	subs	r3, r3, r7
 8000e1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x9c>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e34:	fa04 f301 	lsl.w	r3, r4, r1
 8000e38:	ea43 030c 	orr.w	r3, r3, ip
 8000e3c:	40f4      	lsrs	r4, r6
 8000e3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e42:	0c38      	lsrs	r0, r7, #16
 8000e44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e48:	fbb4 fef0 	udiv	lr, r4, r0
 8000e4c:	fa1f fc87 	uxth.w	ip, r7
 8000e50:	fb00 441e 	mls	r4, r0, lr, r4
 8000e54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e58:	fb0e f90c 	mul.w	r9, lr, ip
 8000e5c:	45a1      	cmp	r9, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x1a6>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e6a:	f080 8084 	bcs.w	8000f76 <__udivmoddi4+0x2a2>
 8000e6e:	45a1      	cmp	r9, r4
 8000e70:	f240 8081 	bls.w	8000f76 <__udivmoddi4+0x2a2>
 8000e74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e78:	443c      	add	r4, r7
 8000e7a:	eba4 0409 	sub.w	r4, r4, r9
 8000e7e:	fa1f f983 	uxth.w	r9, r3
 8000e82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e86:	fb00 4413 	mls	r4, r0, r3, r4
 8000e8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1d2>
 8000e96:	193c      	adds	r4, r7, r4
 8000e98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e9c:	d267      	bcs.n	8000f6e <__udivmoddi4+0x29a>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d965      	bls.n	8000f6e <__udivmoddi4+0x29a>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eaa:	fba0 9302 	umull	r9, r3, r0, r2
 8000eae:	eba4 040c 	sub.w	r4, r4, ip
 8000eb2:	429c      	cmp	r4, r3
 8000eb4:	46ce      	mov	lr, r9
 8000eb6:	469c      	mov	ip, r3
 8000eb8:	d351      	bcc.n	8000f5e <__udivmoddi4+0x28a>
 8000eba:	d04e      	beq.n	8000f5a <__udivmoddi4+0x286>
 8000ebc:	b155      	cbz	r5, 8000ed4 <__udivmoddi4+0x200>
 8000ebe:	ebb8 030e 	subs.w	r3, r8, lr
 8000ec2:	eb64 040c 	sbc.w	r4, r4, ip
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	40cb      	lsrs	r3, r1
 8000ecc:	431e      	orrs	r6, r3
 8000ece:	40cc      	lsrs	r4, r1
 8000ed0:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	e750      	b.n	8000d7a <__udivmoddi4+0xa6>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ee0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ee4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ee8:	4094      	lsls	r4, r2
 8000eea:	430c      	orrs	r4, r1
 8000eec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ef0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ef4:	fa1f f78c 	uxth.w	r7, ip
 8000ef8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000efc:	fb08 3110 	mls	r1, r8, r0, r3
 8000f00:	0c23      	lsrs	r3, r4, #16
 8000f02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f06:	fb00 f107 	mul.w	r1, r0, r7
 8000f0a:	4299      	cmp	r1, r3
 8000f0c:	d908      	bls.n	8000f20 <__udivmoddi4+0x24c>
 8000f0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f16:	d22c      	bcs.n	8000f72 <__udivmoddi4+0x29e>
 8000f18:	4299      	cmp	r1, r3
 8000f1a:	d92a      	bls.n	8000f72 <__udivmoddi4+0x29e>
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	4463      	add	r3, ip
 8000f20:	1a5b      	subs	r3, r3, r1
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f28:	fb08 3311 	mls	r3, r8, r1, r3
 8000f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f30:	fb01 f307 	mul.w	r3, r1, r7
 8000f34:	42a3      	cmp	r3, r4
 8000f36:	d908      	bls.n	8000f4a <__udivmoddi4+0x276>
 8000f38:	eb1c 0404 	adds.w	r4, ip, r4
 8000f3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f40:	d213      	bcs.n	8000f6a <__udivmoddi4+0x296>
 8000f42:	42a3      	cmp	r3, r4
 8000f44:	d911      	bls.n	8000f6a <__udivmoddi4+0x296>
 8000f46:	3902      	subs	r1, #2
 8000f48:	4464      	add	r4, ip
 8000f4a:	1ae4      	subs	r4, r4, r3
 8000f4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f50:	e739      	b.n	8000dc6 <__udivmoddi4+0xf2>
 8000f52:	4604      	mov	r4, r0
 8000f54:	e6f0      	b.n	8000d38 <__udivmoddi4+0x64>
 8000f56:	4608      	mov	r0, r1
 8000f58:	e706      	b.n	8000d68 <__udivmoddi4+0x94>
 8000f5a:	45c8      	cmp	r8, r9
 8000f5c:	d2ae      	bcs.n	8000ebc <__udivmoddi4+0x1e8>
 8000f5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7a8      	b.n	8000ebc <__udivmoddi4+0x1e8>
 8000f6a:	4631      	mov	r1, r6
 8000f6c:	e7ed      	b.n	8000f4a <__udivmoddi4+0x276>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	e799      	b.n	8000ea6 <__udivmoddi4+0x1d2>
 8000f72:	4630      	mov	r0, r6
 8000f74:	e7d4      	b.n	8000f20 <__udivmoddi4+0x24c>
 8000f76:	46d6      	mov	lr, sl
 8000f78:	e77f      	b.n	8000e7a <__udivmoddi4+0x1a6>
 8000f7a:	4463      	add	r3, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e74d      	b.n	8000e1c <__udivmoddi4+0x148>
 8000f80:	4606      	mov	r6, r0
 8000f82:	4623      	mov	r3, r4
 8000f84:	4608      	mov	r0, r1
 8000f86:	e70f      	b.n	8000da8 <__udivmoddi4+0xd4>
 8000f88:	3e02      	subs	r6, #2
 8000f8a:	4463      	add	r3, ip
 8000f8c:	e730      	b.n	8000df0 <__udivmoddi4+0x11c>
 8000f8e:	bf00      	nop

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop

08000f94 <Motor_Set>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Motor_Set(int motor_id, int16_t speed)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	460b      	mov	r3, r1
 8000f9e:	807b      	strh	r3, [r7, #2]
    uint8_t dir = (speed >= 0) ? 1 : 0;
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	0bdb      	lsrs	r3, r3, #15
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	737b      	strb	r3, [r7, #13]
    uint16_t pwm = (uint16_t)abs(speed);
 8000fac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	bfb8      	it	lt
 8000fb4:	425b      	neglt	r3, r3
 8000fb6:	81fb      	strh	r3, [r7, #14]
    if (pwm > 999) pwm = 999;
 8000fb8:	89fb      	ldrh	r3, [r7, #14]
 8000fba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000fbe:	d302      	bcc.n	8000fc6 <Motor_Set+0x32>
 8000fc0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8000fc4:	81fb      	strh	r3, [r7, #14]

    switch(motor_id)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2b03      	cmp	r3, #3
 8000fca:	d865      	bhi.n	8001098 <Motor_Set+0x104>
 8000fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8000fd4 <Motor_Set+0x40>)
 8000fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fd2:	bf00      	nop
 8000fd4:	08000fe5 	.word	0x08000fe5
 8000fd8:	08001011 	.word	0x08001011
 8000fdc:	0800103d 	.word	0x0800103d
 8000fe0:	08001069 	.word	0x08001069
        {
            case 0: // FL
                HAL_GPIO_WritePin(GPIOC, FL_IN1_Pin, dir);
 8000fe4:	7b7b      	ldrb	r3, [r7, #13]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	2101      	movs	r1, #1
 8000fea:	482d      	ldr	r0, [pc, #180]	@ (80010a0 <Motor_Set+0x10c>)
 8000fec:	f002 fbba 	bl	8003764 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOC, FL_IN2_Pin, !dir);
 8000ff0:	7b7b      	ldrb	r3, [r7, #13]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bf0c      	ite	eq
 8000ff6:	2301      	moveq	r3, #1
 8000ff8:	2300      	movne	r3, #0
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	2102      	movs	r1, #2
 8001000:	4827      	ldr	r0, [pc, #156]	@ (80010a0 <Motor_Set+0x10c>)
 8001002:	f002 fbaf 	bl	8003764 <HAL_GPIO_WritePin>
                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pwm);
 8001006:	4b27      	ldr	r3, [pc, #156]	@ (80010a4 <Motor_Set+0x110>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	89fa      	ldrh	r2, [r7, #14]
 800100c:	639a      	str	r2, [r3, #56]	@ 0x38
                break;
 800100e:	e043      	b.n	8001098 <Motor_Set+0x104>

            case 1: // FR
                HAL_GPIO_WritePin(GPIOC, FR_IN1_Pin, dir);
 8001010:	7b7b      	ldrb	r3, [r7, #13]
 8001012:	461a      	mov	r2, r3
 8001014:	2104      	movs	r1, #4
 8001016:	4822      	ldr	r0, [pc, #136]	@ (80010a0 <Motor_Set+0x10c>)
 8001018:	f002 fba4 	bl	8003764 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOC, FR_IN2_Pin, !dir);
 800101c:	7b7b      	ldrb	r3, [r7, #13]
 800101e:	2b00      	cmp	r3, #0
 8001020:	bf0c      	ite	eq
 8001022:	2301      	moveq	r3, #1
 8001024:	2300      	movne	r3, #0
 8001026:	b2db      	uxtb	r3, r3
 8001028:	461a      	mov	r2, r3
 800102a:	2108      	movs	r1, #8
 800102c:	481c      	ldr	r0, [pc, #112]	@ (80010a0 <Motor_Set+0x10c>)
 800102e:	f002 fb99 	bl	8003764 <HAL_GPIO_WritePin>
                __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm);
 8001032:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <Motor_Set+0x114>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	89fa      	ldrh	r2, [r7, #14]
 8001038:	639a      	str	r2, [r3, #56]	@ 0x38
                break;
 800103a:	e02d      	b.n	8001098 <Motor_Set+0x104>

            case 2: // RL
                HAL_GPIO_WritePin(GPIOC, RL_IN1_Pin, dir);
 800103c:	7b7b      	ldrb	r3, [r7, #13]
 800103e:	461a      	mov	r2, r3
 8001040:	2110      	movs	r1, #16
 8001042:	4817      	ldr	r0, [pc, #92]	@ (80010a0 <Motor_Set+0x10c>)
 8001044:	f002 fb8e 	bl	8003764 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOC, RL_IN2_Pin, !dir);
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	2b00      	cmp	r3, #0
 800104c:	bf0c      	ite	eq
 800104e:	2301      	moveq	r3, #1
 8001050:	2300      	movne	r3, #0
 8001052:	b2db      	uxtb	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	2120      	movs	r1, #32
 8001058:	4811      	ldr	r0, [pc, #68]	@ (80010a0 <Motor_Set+0x10c>)
 800105a:	f002 fb83 	bl	8003764 <HAL_GPIO_WritePin>
                __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pwm);
 800105e:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <Motor_Set+0x110>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	89fa      	ldrh	r2, [r7, #14]
 8001064:	635a      	str	r2, [r3, #52]	@ 0x34
                break;
 8001066:	e017      	b.n	8001098 <Motor_Set+0x104>

            case 3: // RR
                HAL_GPIO_WritePin(GPIOC, RR_IN1_Pin, dir);
 8001068:	7b7b      	ldrb	r3, [r7, #13]
 800106a:	461a      	mov	r2, r3
 800106c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001070:	480b      	ldr	r0, [pc, #44]	@ (80010a0 <Motor_Set+0x10c>)
 8001072:	f002 fb77 	bl	8003764 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(GPIOC, RR_IN2_Pin, !dir);
 8001076:	7b7b      	ldrb	r3, [r7, #13]
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf0c      	ite	eq
 800107c:	2301      	moveq	r3, #1
 800107e:	2300      	movne	r3, #0
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001088:	4805      	ldr	r0, [pc, #20]	@ (80010a0 <Motor_Set+0x10c>)
 800108a:	f002 fb6b 	bl	8003764 <HAL_GPIO_WritePin>
                __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm);
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <Motor_Set+0x114>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	89fa      	ldrh	r2, [r7, #14]
 8001094:	635a      	str	r2, [r3, #52]	@ 0x34
                break;
 8001096:	bf00      	nop
        }
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40020800 	.word	0x40020800
 80010a4:	200002dc 	.word	0x200002dc
 80010a8:	20000324 	.word	0x20000324

080010ac <MotorTask>:

void MotorTask(void *pvParameter)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        Motor_Set(0, motorSpeedCmd.speedFL);
 80010b4:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <MotorTask+0x4c>)
 80010b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ba:	4619      	mov	r1, r3
 80010bc:	2000      	movs	r0, #0
 80010be:	f7ff ff69 	bl	8000f94 <Motor_Set>
        Motor_Set(1, motorSpeedCmd.speedFR);
 80010c2:	4b0d      	ldr	r3, [pc, #52]	@ (80010f8 <MotorTask+0x4c>)
 80010c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010c8:	4619      	mov	r1, r3
 80010ca:	2001      	movs	r0, #1
 80010cc:	f7ff ff62 	bl	8000f94 <Motor_Set>
        Motor_Set(2, motorSpeedCmd.speedRL);
 80010d0:	4b09      	ldr	r3, [pc, #36]	@ (80010f8 <MotorTask+0x4c>)
 80010d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010d6:	4619      	mov	r1, r3
 80010d8:	2002      	movs	r0, #2
 80010da:	f7ff ff5b 	bl	8000f94 <Motor_Set>
        Motor_Set(3, motorSpeedCmd.speedRR);
 80010de:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <MotorTask+0x4c>)
 80010e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80010e4:	4619      	mov	r1, r3
 80010e6:	2003      	movs	r0, #3
 80010e8:	f7ff ff54 	bl	8000f94 <Motor_Set>

        vTaskDelay(pdMS_TO_TICKS(20));
 80010ec:	2014      	movs	r0, #20
 80010ee:	f006 fd41 	bl	8007b74 <vTaskDelay>
        Motor_Set(0, motorSpeedCmd.speedFL);
 80010f2:	bf00      	nop
 80010f4:	e7de      	b.n	80010b4 <MotorTask+0x8>
 80010f6:	bf00      	nop
 80010f8:	2000048c 	.word	0x2000048c

080010fc <KinematicsTask>:
    }
}

void KinematicsTask(void *pvParameter)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
    float L = 0.085f, Wd = 0.085f;
 8001104:	4b46      	ldr	r3, [pc, #280]	@ (8001220 <KinematicsTask+0x124>)
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	4b45      	ldr	r3, [pc, #276]	@ (8001220 <KinematicsTask+0x124>)
 800110a:	60bb      	str	r3, [r7, #8]

    for (;;)
    {
        motorSpeedCmd.speedFL = (int16_t)((Vx - Vy - W * (L + Wd)) * scale);
 800110c:	4b45      	ldr	r3, [pc, #276]	@ (8001224 <KinematicsTask+0x128>)
 800110e:	ed93 7a00 	vldr	s14, [r3]
 8001112:	4b45      	ldr	r3, [pc, #276]	@ (8001228 <KinematicsTask+0x12c>)
 8001114:	edd3 7a00 	vldr	s15, [r3]
 8001118:	ee37 7a67 	vsub.f32	s14, s14, s15
 800111c:	edd7 6a03 	vldr	s13, [r7, #12]
 8001120:	edd7 7a02 	vldr	s15, [r7, #8]
 8001124:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001128:	4b40      	ldr	r3, [pc, #256]	@ (800122c <KinematicsTask+0x130>)
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001132:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001136:	4b3e      	ldr	r3, [pc, #248]	@ (8001230 <KinematicsTask+0x134>)
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001140:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001144:	ee17 3a90 	vmov	r3, s15
 8001148:	b21a      	sxth	r2, r3
 800114a:	4b3a      	ldr	r3, [pc, #232]	@ (8001234 <KinematicsTask+0x138>)
 800114c:	801a      	strh	r2, [r3, #0]
        motorSpeedCmd.speedFR = (int16_t)((Vx + Vy + W * (L + Wd)) * scale);
 800114e:	4b35      	ldr	r3, [pc, #212]	@ (8001224 <KinematicsTask+0x128>)
 8001150:	ed93 7a00 	vldr	s14, [r3]
 8001154:	4b34      	ldr	r3, [pc, #208]	@ (8001228 <KinematicsTask+0x12c>)
 8001156:	edd3 7a00 	vldr	s15, [r3]
 800115a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800115e:	edd7 6a03 	vldr	s13, [r7, #12]
 8001162:	edd7 7a02 	vldr	s15, [r7, #8]
 8001166:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800116a:	4b30      	ldr	r3, [pc, #192]	@ (800122c <KinematicsTask+0x130>)
 800116c:	edd3 7a00 	vldr	s15, [r3]
 8001170:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001174:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001178:	4b2d      	ldr	r3, [pc, #180]	@ (8001230 <KinematicsTask+0x134>)
 800117a:	edd3 7a00 	vldr	s15, [r3]
 800117e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001182:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001186:	ee17 3a90 	vmov	r3, s15
 800118a:	b21a      	sxth	r2, r3
 800118c:	4b29      	ldr	r3, [pc, #164]	@ (8001234 <KinematicsTask+0x138>)
 800118e:	805a      	strh	r2, [r3, #2]
        motorSpeedCmd.speedRL = (int16_t)((Vx + Vy - W * (L + Wd)) * scale);
 8001190:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <KinematicsTask+0x128>)
 8001192:	ed93 7a00 	vldr	s14, [r3]
 8001196:	4b24      	ldr	r3, [pc, #144]	@ (8001228 <KinematicsTask+0x12c>)
 8001198:	edd3 7a00 	vldr	s15, [r3]
 800119c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011a0:	edd7 6a03 	vldr	s13, [r7, #12]
 80011a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80011a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011ac:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <KinematicsTask+0x130>)
 80011ae:	edd3 7a00 	vldr	s15, [r3]
 80011b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001230 <KinematicsTask+0x134>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011c8:	ee17 3a90 	vmov	r3, s15
 80011cc:	b21a      	sxth	r2, r3
 80011ce:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <KinematicsTask+0x138>)
 80011d0:	809a      	strh	r2, [r3, #4]
        motorSpeedCmd.speedRR = (int16_t)((Vx - Vy + W * (L + Wd)) * scale);
 80011d2:	4b14      	ldr	r3, [pc, #80]	@ (8001224 <KinematicsTask+0x128>)
 80011d4:	ed93 7a00 	vldr	s14, [r3]
 80011d8:	4b13      	ldr	r3, [pc, #76]	@ (8001228 <KinematicsTask+0x12c>)
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80011e2:	edd7 6a03 	vldr	s13, [r7, #12]
 80011e6:	edd7 7a02 	vldr	s15, [r7, #8]
 80011ea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011ee:	4b0f      	ldr	r3, [pc, #60]	@ (800122c <KinematicsTask+0x130>)
 80011f0:	edd3 7a00 	vldr	s15, [r3]
 80011f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80011fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <KinematicsTask+0x134>)
 80011fe:	edd3 7a00 	vldr	s15, [r3]
 8001202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001206:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800120a:	ee17 3a90 	vmov	r3, s15
 800120e:	b21a      	sxth	r2, r3
 8001210:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <KinematicsTask+0x138>)
 8001212:	80da      	strh	r2, [r3, #6]

        vTaskDelay(pdMS_TO_TICKS(50));
 8001214:	2032      	movs	r0, #50	@ 0x32
 8001216:	f006 fcad 	bl	8007b74 <vTaskDelay>
        motorSpeedCmd.speedFL = (int16_t)((Vx - Vy - W * (L + Wd)) * scale);
 800121a:	bf00      	nop
 800121c:	e776      	b.n	800110c <KinematicsTask+0x10>
 800121e:	bf00      	nop
 8001220:	3dae147b 	.word	0x3dae147b
 8001224:	20000548 	.word	0x20000548
 8001228:	2000054c 	.word	0x2000054c
 800122c:	20000550 	.word	0x20000550
 8001230:	20000000 	.word	0x20000000
 8001234:	2000048c 	.word	0x2000048c

08001238 <ESP8266_SendCommand>:
    }
}

void ESP8266_SendCommand(char *cmd)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
	myprintf(&huart3, "Send command: %s\r\n", cmd);
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	4906      	ldr	r1, [pc, #24]	@ (800125c <ESP8266_SendCommand+0x24>)
 8001244:	4806      	ldr	r0, [pc, #24]	@ (8001260 <ESP8266_SendCommand+0x28>)
 8001246:	f001 f825 	bl	8002294 <myprintf>
    myprintf(&huart2, "%s\r\n", cmd);
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	4905      	ldr	r1, [pc, #20]	@ (8001264 <ESP8266_SendCommand+0x2c>)
 800124e:	4806      	ldr	r0, [pc, #24]	@ (8001268 <ESP8266_SendCommand+0x30>)
 8001250:	f001 f820 	bl	8002294 <myprintf>
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	0800d280 	.word	0x0800d280
 8001260:	20000444 	.word	0x20000444
 8001264:	0800d294 	.word	0x0800d294
 8001268:	200003fc 	.word	0x200003fc

0800126c <ESP8266_ReadResponse>:

void ESP8266_ReadResponse()
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
    memset(resp, '\0', resp_len);
 8001272:	2280      	movs	r2, #128	@ 0x80
 8001274:	2100      	movs	r1, #0
 8001276:	4817      	ldr	r0, [pc, #92]	@ (80012d4 <ESP8266_ReadResponse+0x68>)
 8001278:	f008 fcd8 	bl	8009c2c <memset>
    if_resp_callback = 0;
 800127c:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <ESP8266_ReadResponse+0x6c>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
    if_resp_timeout = 0;
 8001282:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <ESP8266_ReadResponse+0x70>)
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
    resp_index = 0;
 8001288:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <ESP8266_ReadResponse+0x74>)
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]

    HAL_UART_Receive_IT(&huart2, (uint8_t *)&resp[resp_index], 1);
 800128e:	4b14      	ldr	r3, [pc, #80]	@ (80012e0 <ESP8266_ReadResponse+0x74>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a10      	ldr	r2, [pc, #64]	@ (80012d4 <ESP8266_ReadResponse+0x68>)
 8001294:	4413      	add	r3, r2
 8001296:	2201      	movs	r2, #1
 8001298:	4619      	mov	r1, r3
 800129a:	4812      	ldr	r0, [pc, #72]	@ (80012e4 <ESP8266_ReadResponse+0x78>)
 800129c:	f004 fe2d 	bl	8005efa <HAL_UART_Receive_IT>

    uint32_t start_time = HAL_GetTick();
 80012a0:	f001 ff08 	bl	80030b4 <HAL_GetTick>
 80012a4:	6078      	str	r0, [r7, #4]

    while (if_resp_callback == 0) {
 80012a6:	e00b      	b.n	80012c0 <ESP8266_ReadResponse+0x54>
        if (HAL_GetTick() - start_time > 2000) {
 80012a8:	f001 ff04 	bl	80030b4 <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80012b6:	d903      	bls.n	80012c0 <ESP8266_ReadResponse+0x54>
            if_resp_timeout = 1;
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <ESP8266_ReadResponse+0x70>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	601a      	str	r2, [r3, #0]
            break;
 80012be:	e004      	b.n	80012ca <ESP8266_ReadResponse+0x5e>
    while (if_resp_callback == 0) {
 80012c0:	4b05      	ldr	r3, [pc, #20]	@ (80012d8 <ESP8266_ReadResponse+0x6c>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0ef      	beq.n	80012a8 <ESP8266_ReadResponse+0x3c>
        }
    }
//    vTaskDelay(100);
    //myprintf(&huart3, "Received: %s\r\n", resp);
}
 80012c8:	bf00      	nop
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200004bc 	.word	0x200004bc
 80012d8:	2000053c 	.word	0x2000053c
 80012dc:	20000540 	.word	0x20000540
 80012e0:	20000544 	.word	0x20000544
 80012e4:	200003fc 	.word	0x200003fc

080012e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
	// Skip storing \r in first byte
	if (huart->Instance == USART2) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a21      	ldr	r2, [pc, #132]	@ (800137c <HAL_UART_RxCpltCallback+0x94>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d13d      	bne.n	8001376 <HAL_UART_RxCpltCallback+0x8e>
		uint8_t byte = (uint8_t)huart->Instance->DR;  // or however you read the data
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	73fb      	strb	r3, [r7, #15]

		// Skip first \r, \n
		if (resp_index == 0 && (byte == '\r' || byte == '\n')) {
 8001302:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <HAL_UART_RxCpltCallback+0x98>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10f      	bne.n	800132a <HAL_UART_RxCpltCallback+0x42>
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	2b0d      	cmp	r3, #13
 800130e:	d002      	beq.n	8001316 <HAL_UART_RxCpltCallback+0x2e>
 8001310:	7bfb      	ldrb	r3, [r7, #15]
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d109      	bne.n	800132a <HAL_UART_RxCpltCallback+0x42>
			HAL_UART_Receive_IT(&huart2, (uint8_t *)&resp[resp_index], 1);
 8001316:	4b1a      	ldr	r3, [pc, #104]	@ (8001380 <HAL_UART_RxCpltCallback+0x98>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a1a      	ldr	r2, [pc, #104]	@ (8001384 <HAL_UART_RxCpltCallback+0x9c>)
 800131c:	4413      	add	r3, r2
 800131e:	2201      	movs	r2, #1
 8001320:	4619      	mov	r1, r3
 8001322:	4819      	ldr	r0, [pc, #100]	@ (8001388 <HAL_UART_RxCpltCallback+0xa0>)
 8001324:	f004 fde9 	bl	8005efa <HAL_UART_Receive_IT>
			return;
 8001328:	e025      	b.n	8001376 <HAL_UART_RxCpltCallback+0x8e>
		}

		resp[resp_index] = byte;
 800132a:	4b15      	ldr	r3, [pc, #84]	@ (8001380 <HAL_UART_RxCpltCallback+0x98>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4915      	ldr	r1, [pc, #84]	@ (8001384 <HAL_UART_RxCpltCallback+0x9c>)
 8001330:	7bfa      	ldrb	r2, [r7, #15]
 8001332:	54ca      	strb	r2, [r1, r3]
		resp_index++;
 8001334:	4b12      	ldr	r3, [pc, #72]	@ (8001380 <HAL_UART_RxCpltCallback+0x98>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	3301      	adds	r3, #1
 800133a:	4a11      	ldr	r2, [pc, #68]	@ (8001380 <HAL_UART_RxCpltCallback+0x98>)
 800133c:	6013      	str	r3, [r2, #0]

		HAL_UART_Receive_IT(&huart2, (uint8_t *)&resp[resp_index], 1);
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <HAL_UART_RxCpltCallback+0x98>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a10      	ldr	r2, [pc, #64]	@ (8001384 <HAL_UART_RxCpltCallback+0x9c>)
 8001344:	4413      	add	r3, r2
 8001346:	2201      	movs	r2, #1
 8001348:	4619      	mov	r1, r3
 800134a:	480f      	ldr	r0, [pc, #60]	@ (8001388 <HAL_UART_RxCpltCallback+0xa0>)
 800134c:	f004 fdd5 	bl	8005efa <HAL_UART_Receive_IT>

		if (resp[resp_index - 1] == '\n' || if_resp_timeout == 1) {
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <HAL_UART_RxCpltCallback+0x98>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3b01      	subs	r3, #1
 8001356:	4a0b      	ldr	r2, [pc, #44]	@ (8001384 <HAL_UART_RxCpltCallback+0x9c>)
 8001358:	5cd3      	ldrb	r3, [r2, r3]
 800135a:	2b0a      	cmp	r3, #10
 800135c:	d003      	beq.n	8001366 <HAL_UART_RxCpltCallback+0x7e>
 800135e:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <HAL_UART_RxCpltCallback+0xa4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d107      	bne.n	8001376 <HAL_UART_RxCpltCallback+0x8e>
			resp[resp_index] = '\0';
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <HAL_UART_RxCpltCallback+0x98>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a06      	ldr	r2, [pc, #24]	@ (8001384 <HAL_UART_RxCpltCallback+0x9c>)
 800136c:	2100      	movs	r1, #0
 800136e:	54d1      	strb	r1, [r2, r3]
			if_resp_callback = 1;
 8001370:	4b07      	ldr	r3, [pc, #28]	@ (8001390 <HAL_UART_RxCpltCallback+0xa8>)
 8001372:	2201      	movs	r2, #1
 8001374:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	40004400 	.word	0x40004400
 8001380:	20000544 	.word	0x20000544
 8001384:	200004bc 	.word	0x200004bc
 8001388:	200003fc 	.word	0x200003fc
 800138c:	20000540 	.word	0x20000540
 8001390:	2000053c 	.word	0x2000053c

08001394 <showIP_task>:
void showIP_task(void *pvParameters)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08c      	sub	sp, #48	@ 0x30
 8001398:	af02      	add	r7, sp, #8
 800139a:	6078      	str	r0, [r7, #4]
    esp8266_state_t state = STATE_RESET;
 800139c:	2300      	movs	r3, #0
 800139e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    int retry = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]

    while (1) {
        switch (state) {
 80013a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	f200 8143 	bhi.w	8001636 <showIP_task+0x2a2>
 80013b0:	a201      	add	r2, pc, #4	@ (adr r2, 80013b8 <showIP_task+0x24>)
 80013b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b6:	bf00      	nop
 80013b8:	080013d5 	.word	0x080013d5
 80013bc:	0800141d 	.word	0x0800141d
 80013c0:	08001441 	.word	0x08001441
 80013c4:	080014a7 	.word	0x080014a7
 80013c8:	080014f3 	.word	0x080014f3
 80013cc:	0800150d 	.word	0x0800150d
 80013d0:	0800152f 	.word	0x0800152f
        case STATE_RESET:
            ESP8266_SendCommand("AT+RST");
 80013d4:	489c      	ldr	r0, [pc, #624]	@ (8001648 <showIP_task+0x2b4>)
 80013d6:	f7ff ff2f 	bl	8001238 <ESP8266_SendCommand>
            ESP8266_ReadResponse();
 80013da:	f7ff ff47 	bl	800126c <ESP8266_ReadResponse>
            vTaskDelay(3000);
 80013de:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80013e2:	f006 fbc7 	bl	8007b74 <vTaskDelay>
            if (strstr(resp, "OK")) {
 80013e6:	4999      	ldr	r1, [pc, #612]	@ (800164c <showIP_task+0x2b8>)
 80013e8:	4899      	ldr	r0, [pc, #612]	@ (8001650 <showIP_task+0x2bc>)
 80013ea:	f008 fc34 	bl	8009c56 <strstr>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d005      	beq.n	8001400 <showIP_task+0x6c>
                state = STATE_INIT;
 80013f4:	2301      	movs	r3, #1
 80013f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                retry = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
            } else if (++retry > 3) {
                myprintf(&huart3, "Reset failed, retrying...\r\n");
                retry = 0;
            }
            break;
 80013fe:	e11e      	b.n	800163e <showIP_task+0x2aa>
            } else if (++retry > 3) {
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	3301      	adds	r3, #1
 8001404:	623b      	str	r3, [r7, #32]
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	2b03      	cmp	r3, #3
 800140a:	f340 8118 	ble.w	800163e <showIP_task+0x2aa>
                myprintf(&huart3, "Reset failed, retrying...\r\n");
 800140e:	4991      	ldr	r1, [pc, #580]	@ (8001654 <showIP_task+0x2c0>)
 8001410:	4891      	ldr	r0, [pc, #580]	@ (8001658 <showIP_task+0x2c4>)
 8001412:	f000 ff3f 	bl	8002294 <myprintf>
                retry = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
            break;
 800141a:	e110      	b.n	800163e <showIP_task+0x2aa>

        case STATE_INIT:
            ESP8266_SendCommand("AT");  // Test AT startup
 800141c:	488f      	ldr	r0, [pc, #572]	@ (800165c <showIP_task+0x2c8>)
 800141e:	f7ff ff0b 	bl	8001238 <ESP8266_SendCommand>
            ESP8266_ReadResponse();
 8001422:	f7ff ff23 	bl	800126c <ESP8266_ReadResponse>
            vTaskDelay(3000);
 8001426:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800142a:	f006 fba3 	bl	8007b74 <vTaskDelay>
            ESP8266_SendCommand("AT+CWMODE=1");  // Set station mode
 800142e:	488c      	ldr	r0, [pc, #560]	@ (8001660 <showIP_task+0x2cc>)
 8001430:	f7ff ff02 	bl	8001238 <ESP8266_SendCommand>
            ESP8266_ReadResponse();
 8001434:	f7ff ff1a 	bl	800126c <ESP8266_ReadResponse>
            state = STATE_JOIN_WIFI;
 8001438:	2302      	movs	r3, #2
 800143a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800143e:	e101      	b.n	8001644 <showIP_task+0x2b0>

        case STATE_JOIN_WIFI:
            ESP8266_SendCommand("AT+CWJAP=\"aiRobots_92829\",\"ic2sic2sic2s\"");
 8001440:	4888      	ldr	r0, [pc, #544]	@ (8001664 <showIP_task+0x2d0>)
 8001442:	f7ff fef9 	bl	8001238 <ESP8266_SendCommand>
            ESP8266_ReadResponse();
 8001446:	f7ff ff11 	bl	800126c <ESP8266_ReadResponse>
            vTaskDelay(3000);
 800144a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800144e:	f006 fb91 	bl	8007b74 <vTaskDelay>
            if (strstr(resp + 1, "WIFI CONNECTED") || strstr(resp + 1, "OK")) {
 8001452:	4b85      	ldr	r3, [pc, #532]	@ (8001668 <showIP_task+0x2d4>)
 8001454:	4985      	ldr	r1, [pc, #532]	@ (800166c <showIP_task+0x2d8>)
 8001456:	4618      	mov	r0, r3
 8001458:	f008 fbfd 	bl	8009c56 <strstr>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d107      	bne.n	8001472 <showIP_task+0xde>
 8001462:	4b81      	ldr	r3, [pc, #516]	@ (8001668 <showIP_task+0x2d4>)
 8001464:	4979      	ldr	r1, [pc, #484]	@ (800164c <showIP_task+0x2b8>)
 8001466:	4618      	mov	r0, r3
 8001468:	f008 fbf5 	bl	8009c56 <strstr>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d005      	beq.n	800147e <showIP_task+0xea>
                state = STATE_CHECK_STATUS;
 8001472:	2303      	movs	r3, #3
 8001474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                retry = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
 800147c:	e00e      	b.n	800149c <showIP_task+0x108>
            } else if (++retry > 5) {
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	3301      	adds	r3, #1
 8001482:	623b      	str	r3, [r7, #32]
 8001484:	6a3b      	ldr	r3, [r7, #32]
 8001486:	2b05      	cmp	r3, #5
 8001488:	dd08      	ble.n	800149c <showIP_task+0x108>
                myprintf(&huart3, "WiFi join failed, retrying...\r\n");
 800148a:	4979      	ldr	r1, [pc, #484]	@ (8001670 <showIP_task+0x2dc>)
 800148c:	4872      	ldr	r0, [pc, #456]	@ (8001658 <showIP_task+0x2c4>)
 800148e:	f000 ff01 	bl	8002294 <myprintf>
                state = STATE_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                retry = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
            }
            vTaskDelay(3000);
 800149c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014a0:	f006 fb68 	bl	8007b74 <vTaskDelay>
            break;
 80014a4:	e0ce      	b.n	8001644 <showIP_task+0x2b0>

        case STATE_CHECK_STATUS:
            ESP8266_SendCommand("AT+CIPSTATUS");
 80014a6:	4873      	ldr	r0, [pc, #460]	@ (8001674 <showIP_task+0x2e0>)
 80014a8:	f7ff fec6 	bl	8001238 <ESP8266_SendCommand>
            ESP8266_ReadResponse();
 80014ac:	f7ff fede 	bl	800126c <ESP8266_ReadResponse>
            vTaskDelay(3000);
 80014b0:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80014b4:	f006 fb5e 	bl	8007b74 <vTaskDelay>
            if (strstr(resp + 1, "STATUS:2") || strstr(resp + 1, "STATUS:3") || strstr(resp + 1, "OK")) {
 80014b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001668 <showIP_task+0x2d4>)
 80014ba:	496f      	ldr	r1, [pc, #444]	@ (8001678 <showIP_task+0x2e4>)
 80014bc:	4618      	mov	r0, r3
 80014be:	f008 fbca 	bl	8009c56 <strstr>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d110      	bne.n	80014ea <showIP_task+0x156>
 80014c8:	4b67      	ldr	r3, [pc, #412]	@ (8001668 <showIP_task+0x2d4>)
 80014ca:	496c      	ldr	r1, [pc, #432]	@ (800167c <showIP_task+0x2e8>)
 80014cc:	4618      	mov	r0, r3
 80014ce:	f008 fbc2 	bl	8009c56 <strstr>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d108      	bne.n	80014ea <showIP_task+0x156>
 80014d8:	4b63      	ldr	r3, [pc, #396]	@ (8001668 <showIP_task+0x2d4>)
 80014da:	495c      	ldr	r1, [pc, #368]	@ (800164c <showIP_task+0x2b8>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f008 fbba 	bl	8009c56 <strstr>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80ac 	beq.w	8001642 <showIP_task+0x2ae>
                state = STATE_GET_IP;
 80014ea:	2304      	movs	r3, #4
 80014ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80014f0:	e0a7      	b.n	8001642 <showIP_task+0x2ae>

        case STATE_GET_IP:
            ESP8266_SendCommand("AT+CIFSR");
 80014f2:	4863      	ldr	r0, [pc, #396]	@ (8001680 <showIP_task+0x2ec>)
 80014f4:	f7ff fea0 	bl	8001238 <ESP8266_SendCommand>
            ESP8266_ReadResponse();
 80014f8:	f7ff feb8 	bl	800126c <ESP8266_ReadResponse>
            vTaskDelay(3000);
 80014fc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001500:	f006 fb38 	bl	8007b74 <vTaskDelay>
            state = STATE_CONNECT_TCP;
 8001504:	2305      	movs	r3, #5
 8001506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800150a:	e09b      	b.n	8001644 <showIP_task+0x2b0>
        case STATE_CONNECT_TCP:
        	ESP8266_SendCommand("AT+CIPMUX=0");
 800150c:	485d      	ldr	r0, [pc, #372]	@ (8001684 <showIP_task+0x2f0>)
 800150e:	f7ff fe93 	bl	8001238 <ESP8266_SendCommand>
        	ESP8266_ReadResponse();
 8001512:	f7ff feab 	bl	800126c <ESP8266_ReadResponse>
        	vTaskDelay(3000);
 8001516:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800151a:	f006 fb2b 	bl	8007b74 <vTaskDelay>
        	ESP8266_SendCommand("AT+CIPSTART=\"TCP\",\"192.168.1.117\",5000");
 800151e:	485a      	ldr	r0, [pc, #360]	@ (8001688 <showIP_task+0x2f4>)
 8001520:	f7ff fe8a 	bl	8001238 <ESP8266_SendCommand>
        	ESP8266_ReadResponse();
 8001524:	f7ff fea2 	bl	800126c <ESP8266_ReadResponse>
        	state = STATE_DONE;
 8001528:	2306      	movs	r3, #6
 800152a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        case STATE_DONE:
            ESP8266_ReadResponse();  // Check for any +IPD data
 800152e:	f7ff fe9d 	bl	800126c <ESP8266_ReadResponse>
            char *data_start = strstr(resp, "+IPD,");
 8001532:	4956      	ldr	r1, [pc, #344]	@ (800168c <showIP_task+0x2f8>)
 8001534:	4846      	ldr	r0, [pc, #280]	@ (8001650 <showIP_task+0x2bc>)
 8001536:	f008 fb8e 	bl	8009c56 <strstr>
 800153a:	61f8      	str	r0, [r7, #28]
            if (data_start) {
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d05b      	beq.n	80015fa <showIP_task+0x266>
                data_start = strchr(data_start, ':');
 8001542:	213a      	movs	r1, #58	@ 0x3a
 8001544:	69f8      	ldr	r0, [r7, #28]
 8001546:	f008 fb79 	bl	8009c3c <strchr>
 800154a:	61f8      	str	r0, [r7, #28]
                if (data_start) {
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d04c      	beq.n	80015ec <showIP_task+0x258>
                    data_start++;  // Skip the ':'
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3301      	adds	r3, #1
 8001556:	61fb      	str	r3, [r7, #28]
                    myprintf(&huart3, "Received from PC: %s\r\n", data_start);
 8001558:	69fa      	ldr	r2, [r7, #28]
 800155a:	494d      	ldr	r1, [pc, #308]	@ (8001690 <showIP_task+0x2fc>)
 800155c:	483e      	ldr	r0, [pc, #248]	@ (8001658 <showIP_task+0x2c4>)
 800155e:	f000 fe99 	bl	8002294 <myprintf>
//                    else if (strstr(data_start, "e"))
//                        Vx = 0, Vy = 0, W = -0.2;
//                    else
//                    	Vx = 0, Vy = 0, W = 0;

                    float vx_tmp = 0.0f, vy_tmp = 0.0f, w_tmp = 0.0f;
 8001562:	f04f 0300 	mov.w	r3, #0
 8001566:	613b      	str	r3, [r7, #16]
 8001568:	f04f 0300 	mov.w	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	f04f 0300 	mov.w	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
					int parsed = sscanf(data_start, "%f,%f,%f", &vx_tmp, &vy_tmp, &w_tmp);
 8001574:	f107 010c 	add.w	r1, r7, #12
 8001578:	f107 0210 	add.w	r2, r7, #16
 800157c:	f107 0308 	add.w	r3, r7, #8
 8001580:	9300      	str	r3, [sp, #0]
 8001582:	460b      	mov	r3, r1
 8001584:	4943      	ldr	r1, [pc, #268]	@ (8001694 <showIP_task+0x300>)
 8001586:	69f8      	ldr	r0, [r7, #28]
 8001588:	f008 fa8e 	bl	8009aa8 <siscanf>
 800158c:	61b8      	str	r0, [r7, #24]
					GPIO_PinState pinState = HAL_GPIO_ReadPin(IR_OUT_GPIO_Port, IR_OUT_Pin);
 800158e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001592:	4841      	ldr	r0, [pc, #260]	@ (8001698 <showIP_task+0x304>)
 8001594:	f002 f8ce 	bl	8003734 <HAL_GPIO_ReadPin>
 8001598:	4603      	mov	r3, r0
 800159a:	75fb      	strb	r3, [r7, #23]
					if (parsed != 3){
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d00c      	beq.n	80015bc <showIP_task+0x228>
						Vx = 0;
 80015a2:	4b3e      	ldr	r3, [pc, #248]	@ (800169c <showIP_task+0x308>)
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
						Vy = 0;
 80015aa:	4b3d      	ldr	r3, [pc, #244]	@ (80016a0 <showIP_task+0x30c>)
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
						W  = 0;
 80015b2:	4b3c      	ldr	r3, [pc, #240]	@ (80016a4 <showIP_task+0x310>)
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	e017      	b.n	80015ec <showIP_task+0x258>
					}else if(pinState == GPIO_PIN_RESET){
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d10b      	bne.n	80015da <showIP_task+0x246>
						Vx = -0.2;
 80015c2:	4b36      	ldr	r3, [pc, #216]	@ (800169c <showIP_task+0x308>)
 80015c4:	4a38      	ldr	r2, [pc, #224]	@ (80016a8 <showIP_task+0x314>)
 80015c6:	601a      	str	r2, [r3, #0]
						Vy = 0;
 80015c8:	4b35      	ldr	r3, [pc, #212]	@ (80016a0 <showIP_task+0x30c>)
 80015ca:	f04f 0200 	mov.w	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
						W  = 0;
 80015d0:	4b34      	ldr	r3, [pc, #208]	@ (80016a4 <showIP_task+0x310>)
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	e008      	b.n	80015ec <showIP_task+0x258>
					}else {
						Vx = vx_tmp;
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4a2f      	ldr	r2, [pc, #188]	@ (800169c <showIP_task+0x308>)
 80015de:	6013      	str	r3, [r2, #0]
						Vy = vy_tmp;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4a2f      	ldr	r2, [pc, #188]	@ (80016a0 <showIP_task+0x30c>)
 80015e4:	6013      	str	r3, [r2, #0]
						W  = w_tmp;
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	4a2e      	ldr	r2, [pc, #184]	@ (80016a4 <showIP_task+0x310>)
 80015ea:	6013      	str	r3, [r2, #0]
					}
                }
                state = STATE_DONE;
 80015ec:	2306      	movs	r3, #6
 80015ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                vTaskDelay(1);
 80015f2:	2001      	movs	r0, #1
 80015f4:	f006 fabe 	bl	8007b74 <vTaskDelay>
                break;
 80015f8:	e024      	b.n	8001644 <showIP_task+0x2b0>
            }else if(strstr(resp, "LOSED")) { // Handle lost the connect to server
 80015fa:	492c      	ldr	r1, [pc, #176]	@ (80016ac <showIP_task+0x318>)
 80015fc:	4814      	ldr	r0, [pc, #80]	@ (8001650 <showIP_task+0x2bc>)
 80015fe:	f008 fb2a 	bl	8009c56 <strstr>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <showIP_task+0x27c>
            	state = STATE_RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            	break;
 800160e:	e019      	b.n	8001644 <showIP_task+0x2b0>
            }else{
            	//myprintf(&huart3, "Unexpected response: %s\r\n", data_start);
				state = STATE_DONE;
 8001610:	2306      	movs	r3, #6
 8001612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				Vx = 0, Vy = 0, W = 0;
 8001616:	4b21      	ldr	r3, [pc, #132]	@ (800169c <showIP_task+0x308>)
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <showIP_task+0x30c>)
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	4b1f      	ldr	r3, [pc, #124]	@ (80016a4 <showIP_task+0x310>)
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
				vTaskDelay(1);
 800162e:	2001      	movs	r0, #1
 8001630:	f006 faa0 	bl	8007b74 <vTaskDelay>
				break;
 8001634:	e006      	b.n	8001644 <showIP_task+0x2b0>
            }
        default:
            state = STATE_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800163c:	e002      	b.n	8001644 <showIP_task+0x2b0>
            break;
 800163e:	bf00      	nop
 8001640:	e6b1      	b.n	80013a6 <showIP_task+0x12>
            break;
 8001642:	bf00      	nop
        switch (state) {
 8001644:	e6af      	b.n	80013a6 <showIP_task+0x12>
 8001646:	bf00      	nop
 8001648:	0800d29c 	.word	0x0800d29c
 800164c:	0800d2a4 	.word	0x0800d2a4
 8001650:	200004bc 	.word	0x200004bc
 8001654:	0800d2a8 	.word	0x0800d2a8
 8001658:	20000444 	.word	0x20000444
 800165c:	0800d2c4 	.word	0x0800d2c4
 8001660:	0800d2c8 	.word	0x0800d2c8
 8001664:	0800d2d4 	.word	0x0800d2d4
 8001668:	200004bd 	.word	0x200004bd
 800166c:	0800d300 	.word	0x0800d300
 8001670:	0800d310 	.word	0x0800d310
 8001674:	0800d330 	.word	0x0800d330
 8001678:	0800d340 	.word	0x0800d340
 800167c:	0800d34c 	.word	0x0800d34c
 8001680:	0800d358 	.word	0x0800d358
 8001684:	0800d364 	.word	0x0800d364
 8001688:	0800d370 	.word	0x0800d370
 800168c:	0800d398 	.word	0x0800d398
 8001690:	0800d3a0 	.word	0x0800d3a0
 8001694:	0800d3b8 	.word	0x0800d3b8
 8001698:	40020c00 	.word	0x40020c00
 800169c:	20000548 	.word	0x20000548
 80016a0:	2000054c 	.word	0x2000054c
 80016a4:	20000550 	.word	0x20000550
 80016a8:	be4ccccd 	.word	0xbe4ccccd
 80016ac:	0800d3c4 	.word	0x0800d3c4

080016b0 <EncoderTask>:
}



void EncoderTask(void *pvParameter)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
    int16_t curr_count[4];
    int16_t delta;

    for (;;)
    {
        curr_count[0] = __HAL_TIM_GET_COUNTER(&htim1);
 80016b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001778 <EncoderTask+0xc8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016be:	b21b      	sxth	r3, r3
 80016c0:	813b      	strh	r3, [r7, #8]
        curr_count[1] = __HAL_TIM_GET_COUNTER(&htim2);
 80016c2:	4b2e      	ldr	r3, [pc, #184]	@ (800177c <EncoderTask+0xcc>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	817b      	strh	r3, [r7, #10]
        curr_count[2] = __HAL_TIM_GET_COUNTER(&htim5);
 80016cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001780 <EncoderTask+0xd0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	81bb      	strh	r3, [r7, #12]
        curr_count[3] = __HAL_TIM_GET_COUNTER(&htim8);
 80016d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001784 <EncoderTask+0xd4>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016dc:	b21b      	sxth	r3, r3
 80016de:	81fb      	strh	r3, [r7, #14]

        for (int i = 0; i < 4; i++)
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
 80016e4:	e041      	b.n	800176a <EncoderTask+0xba>
        {
            delta = curr_count[i] - prev_encoder_count[i];
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	3318      	adds	r3, #24
 80016ec:	443b      	add	r3, r7
 80016ee:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	4924      	ldr	r1, [pc, #144]	@ (8001788 <EncoderTask+0xd8>)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	b29b      	uxth	r3, r3
 8001702:	827b      	strh	r3, [r7, #18]
            if (delta > 32767) delta -= 65536;
            else if (delta < -32768) delta += 65536;
            prev_encoder_count[i] = curr_count[i];
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	3318      	adds	r3, #24
 800170a:	443b      	add	r3, r7
 800170c:	f933 1c10 	ldrsh.w	r1, [r3, #-16]
 8001710:	4a1d      	ldr	r2, [pc, #116]	@ (8001788 <EncoderTask+0xd8>)
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

            // 計算 RPM
            motor_rpm[i] = (float)delta / CPR * (60.0f / DT);
 8001718:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800171c:	ee07 3a90 	vmov	s15, r3
 8001720:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001724:	eddf 6a19 	vldr	s13, [pc, #100]	@ 800178c <EncoderTask+0xdc>
 8001728:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800172c:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8001790 <EncoderTask+0xe0>
 8001730:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001734:	4a17      	ldr	r2, [pc, #92]	@ (8001794 <EncoderTask+0xe4>)
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	edc3 7a00 	vstr	s15, [r3]
            wheel_rpm[i] = motor_rpm[i] / GEAR_RATIO;
 8001740:	4a14      	ldr	r2, [pc, #80]	@ (8001794 <EncoderTask+0xe4>)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	ed93 7a00 	vldr	s14, [r3]
 800174c:	eef3 6a0e 	vmov.f32	s13, #62	@ 0x41f00000  30.0
 8001750:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001754:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001758:	ee17 1a90 	vmov	r1, s15
 800175c:	4a0e      	ldr	r2, [pc, #56]	@ (8001798 <EncoderTask+0xe8>)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int i = 0; i < 4; i++)
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	3301      	adds	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	2b03      	cmp	r3, #3
 800176e:	ddba      	ble.n	80016e6 <EncoderTask+0x36>
        }

        vTaskDelay(pdMS_TO_TICKS(10));
 8001770:	200a      	movs	r0, #10
 8001772:	f006 f9ff 	bl	8007b74 <vTaskDelay>
        curr_count[0] = __HAL_TIM_GET_COUNTER(&htim1);
 8001776:	e79f      	b.n	80016b8 <EncoderTask+0x8>
 8001778:	2000024c 	.word	0x2000024c
 800177c:	20000294 	.word	0x20000294
 8001780:	2000036c 	.word	0x2000036c
 8001784:	200003b4 	.word	0x200003b4
 8001788:	20000494 	.word	0x20000494
 800178c:	42300000 	.word	0x42300000
 8001790:	45bb8000 	.word	0x45bb8000
 8001794:	2000049c 	.word	0x2000049c
 8001798:	200004ac 	.word	0x200004ac

0800179c <OLED_Task>:
	        }

	    }
}

void OLED_Task(void *pvParameter) {
 800179c:	b580      	push	{r7, lr}
 800179e:	b08c      	sub	sp, #48	@ 0x30
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	6078      	str	r0, [r7, #4]
    char line[30];  // 每行最長約 21 字元

    ssd1306_Init();
 80017a4:	f000 fdd6 	bl	8002354 <ssd1306_Init>
    ssd1306_Fill(Black);
 80017a8:	2000      	movs	r0, #0
 80017aa:	f000 fe3d 	bl	8002428 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 80017ae:	f000 fe53 	bl	8002458 <ssd1306_UpdateScreen>

    for (;;) {
        ssd1306_Fill(Black);  // 清空畫面
 80017b2:	2000      	movs	r0, #0
 80017b4:	f000 fe38 	bl	8002428 <ssd1306_Fill>

        // 第一行：FL & FR
        sprintf(line, "FL:%3d  FR:%3d", wheel_rpm[0], wheel_rpm[1]);
 80017b8:	4b18      	ldr	r3, [pc, #96]	@ (800181c <OLED_Task+0x80>)
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	4b17      	ldr	r3, [pc, #92]	@ (800181c <OLED_Task+0x80>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f107 0008 	add.w	r0, r7, #8
 80017c4:	4916      	ldr	r1, [pc, #88]	@ (8001820 <OLED_Task+0x84>)
 80017c6:	f008 f94f 	bl	8009a68 <siprintf>
        ssd1306_SetCursor(0, 0);
 80017ca:	2100      	movs	r1, #0
 80017cc:	2000      	movs	r0, #0
 80017ce:	f000 ff77 	bl	80026c0 <ssd1306_SetCursor>
        ssd1306_WriteString(line, Font_7x10, White);
 80017d2:	4b14      	ldr	r3, [pc, #80]	@ (8001824 <OLED_Task+0x88>)
 80017d4:	f107 0008 	add.w	r0, r7, #8
 80017d8:	2201      	movs	r2, #1
 80017da:	9200      	str	r2, [sp, #0]
 80017dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017de:	f000 ff49 	bl	8002674 <ssd1306_WriteString>

        // 第二行：RL & RR
        sprintf(line, "RL:%3d  RR:%3d", wheel_rpm[2], wheel_rpm[3]);
 80017e2:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <OLED_Task+0x80>)
 80017e4:	689a      	ldr	r2, [r3, #8]
 80017e6:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <OLED_Task+0x80>)
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	f107 0008 	add.w	r0, r7, #8
 80017ee:	490e      	ldr	r1, [pc, #56]	@ (8001828 <OLED_Task+0x8c>)
 80017f0:	f008 f93a 	bl	8009a68 <siprintf>
        ssd1306_SetCursor(0, 16);
 80017f4:	2110      	movs	r1, #16
 80017f6:	2000      	movs	r0, #0
 80017f8:	f000 ff62 	bl	80026c0 <ssd1306_SetCursor>
        ssd1306_WriteString(line, Font_7x10, White);
 80017fc:	4b09      	ldr	r3, [pc, #36]	@ (8001824 <OLED_Task+0x88>)
 80017fe:	f107 0008 	add.w	r0, r7, #8
 8001802:	2201      	movs	r2, #1
 8001804:	9200      	str	r2, [sp, #0]
 8001806:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001808:	f000 ff34 	bl	8002674 <ssd1306_WriteString>

        ssd1306_UpdateScreen();
 800180c:	f000 fe24 	bl	8002458 <ssd1306_UpdateScreen>
        vTaskDelay(100); // 每 500ms 更新一次
 8001810:	2064      	movs	r0, #100	@ 0x64
 8001812:	f006 f9af 	bl	8007b74 <vTaskDelay>
        ssd1306_Fill(Black);  // 清空畫面
 8001816:	bf00      	nop
 8001818:	e7cb      	b.n	80017b2 <OLED_Task+0x16>
 800181a:	bf00      	nop
 800181c:	200004ac 	.word	0x200004ac
 8001820:	0800d444 	.word	0x0800d444
 8001824:	0800dc24 	.word	0x0800dc24
 8001828:	0800d454 	.word	0x0800d454

0800182c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001832:	f001 fc09 	bl	8003048 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001836:	f000 f88d 	bl	8001954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800183a:	f000 fbd3 	bl	8001fe4 <MX_GPIO_Init>
  MX_TIM3_Init();
 800183e:	f000 f9cd 	bl	8001bdc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001842:	f000 fa4d 	bl	8001ce0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001846:	f000 f91d 	bl	8001a84 <MX_TIM1_Init>
  MX_TIM2_Init();
 800184a:	f000 f973 	bl	8001b34 <MX_TIM2_Init>
  MX_TIM8_Init();
 800184e:	f000 fb1d 	bl	8001e8c <MX_TIM8_Init>
  MX_TIM5_Init();
 8001852:	f000 fac7 	bl	8001de4 <MX_TIM5_Init>
  MX_USART3_UART_Init();
 8001856:	f000 fb9b 	bl	8001f90 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 800185a:	f000 fb6f 	bl	8001f3c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800185e:	f000 f8e3 	bl	8001a28 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001862:	2100      	movs	r1, #0
 8001864:	482b      	ldr	r0, [pc, #172]	@ (8001914 <main+0xe8>)
 8001866:	f003 fa29 	bl	8004cbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800186a:	2104      	movs	r1, #4
 800186c:	4829      	ldr	r0, [pc, #164]	@ (8001914 <main+0xe8>)
 800186e:	f003 fa25 	bl	8004cbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001872:	2100      	movs	r1, #0
 8001874:	4828      	ldr	r0, [pc, #160]	@ (8001918 <main+0xec>)
 8001876:	f003 fa21 	bl	8004cbc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800187a:	2104      	movs	r1, #4
 800187c:	4826      	ldr	r0, [pc, #152]	@ (8001918 <main+0xec>)
 800187e:	f003 fa1d 	bl	8004cbc <HAL_TIM_PWM_Start>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001882:	213c      	movs	r1, #60	@ 0x3c
 8001884:	4825      	ldr	r0, [pc, #148]	@ (800191c <main+0xf0>)
 8001886:	f003 fb87 	bl	8004f98 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800188a:	213c      	movs	r1, #60	@ 0x3c
 800188c:	4824      	ldr	r0, [pc, #144]	@ (8001920 <main+0xf4>)
 800188e:	f003 fb83 	bl	8004f98 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8001892:	213c      	movs	r1, #60	@ 0x3c
 8001894:	4823      	ldr	r0, [pc, #140]	@ (8001924 <main+0xf8>)
 8001896:	f003 fb7f 	bl	8004f98 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 800189a:	213c      	movs	r1, #60	@ 0x3c
 800189c:	4822      	ldr	r0, [pc, #136]	@ (8001928 <main+0xfc>)
 800189e:	f003 fb7b 	bl	8004f98 <HAL_TIM_Encoder_Start>

  xTaskCreate(KinematicsTask, "Kinematics", 128, NULL, 2, NULL);
 80018a2:	2300      	movs	r3, #0
 80018a4:	9301      	str	r3, [sp, #4]
 80018a6:	2302      	movs	r3, #2
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2300      	movs	r3, #0
 80018ac:	2280      	movs	r2, #128	@ 0x80
 80018ae:	491f      	ldr	r1, [pc, #124]	@ (800192c <main+0x100>)
 80018b0:	481f      	ldr	r0, [pc, #124]	@ (8001930 <main+0x104>)
 80018b2:	f006 f81f 	bl	80078f4 <xTaskCreate>
  xTaskCreate(MotorTask, "Motor", 128, NULL, 3, NULL);
 80018b6:	2300      	movs	r3, #0
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	2303      	movs	r3, #3
 80018bc:	9300      	str	r3, [sp, #0]
 80018be:	2300      	movs	r3, #0
 80018c0:	2280      	movs	r2, #128	@ 0x80
 80018c2:	491c      	ldr	r1, [pc, #112]	@ (8001934 <main+0x108>)
 80018c4:	481c      	ldr	r0, [pc, #112]	@ (8001938 <main+0x10c>)
 80018c6:	f006 f815 	bl	80078f4 <xTaskCreate>
  xTaskCreate(showIP_task, "Comm", 512, NULL, 2, NULL);
 80018ca:	2300      	movs	r3, #0
 80018cc:	9301      	str	r3, [sp, #4]
 80018ce:	2302      	movs	r3, #2
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2300      	movs	r3, #0
 80018d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018d8:	4918      	ldr	r1, [pc, #96]	@ (800193c <main+0x110>)
 80018da:	4819      	ldr	r0, [pc, #100]	@ (8001940 <main+0x114>)
 80018dc:	f006 f80a 	bl	80078f4 <xTaskCreate>
  xTaskCreate(EncoderTask, "Encoder", 128, NULL, 3, NULL);
 80018e0:	2300      	movs	r3, #0
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	2303      	movs	r3, #3
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2300      	movs	r3, #0
 80018ea:	2280      	movs	r2, #128	@ 0x80
 80018ec:	4915      	ldr	r1, [pc, #84]	@ (8001944 <main+0x118>)
 80018ee:	4816      	ldr	r0, [pc, #88]	@ (8001948 <main+0x11c>)
 80018f0:	f006 f800 	bl	80078f4 <xTaskCreate>
  xTaskCreate(OLED_Task, "OLED_Task", 256, NULL, 3, NULL);
 80018f4:	2300      	movs	r3, #0
 80018f6:	9301      	str	r3, [sp, #4]
 80018f8:	2303      	movs	r3, #3
 80018fa:	9300      	str	r3, [sp, #0]
 80018fc:	2300      	movs	r3, #0
 80018fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001902:	4912      	ldr	r1, [pc, #72]	@ (800194c <main+0x120>)
 8001904:	4812      	ldr	r0, [pc, #72]	@ (8001950 <main+0x124>)
 8001906:	f005 fff5 	bl	80078f4 <xTaskCreate>
  //xTaskCreate(MonitorTask, "Monitor", 256, NULL, 1, NULL);

  vTaskStartScheduler();
 800190a:	f006 f969 	bl	8007be0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800190e:	bf00      	nop
 8001910:	e7fd      	b.n	800190e <main+0xe2>
 8001912:	bf00      	nop
 8001914:	200002dc 	.word	0x200002dc
 8001918:	20000324 	.word	0x20000324
 800191c:	2000024c 	.word	0x2000024c
 8001920:	20000294 	.word	0x20000294
 8001924:	2000036c 	.word	0x2000036c
 8001928:	200003b4 	.word	0x200003b4
 800192c:	0800d464 	.word	0x0800d464
 8001930:	080010fd 	.word	0x080010fd
 8001934:	0800d470 	.word	0x0800d470
 8001938:	080010ad 	.word	0x080010ad
 800193c:	0800d478 	.word	0x0800d478
 8001940:	08001395 	.word	0x08001395
 8001944:	0800d480 	.word	0x0800d480
 8001948:	080016b1 	.word	0x080016b1
 800194c:	0800d488 	.word	0x0800d488
 8001950:	0800179d 	.word	0x0800179d

08001954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b094      	sub	sp, #80	@ 0x50
 8001958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800195a:	f107 0320 	add.w	r3, r7, #32
 800195e:	2230      	movs	r2, #48	@ 0x30
 8001960:	2100      	movs	r1, #0
 8001962:	4618      	mov	r0, r3
 8001964:	f008 f962 	bl	8009c2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	4b28      	ldr	r3, [pc, #160]	@ (8001a20 <SystemClock_Config+0xcc>)
 800197e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001980:	4a27      	ldr	r2, [pc, #156]	@ (8001a20 <SystemClock_Config+0xcc>)
 8001982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001986:	6413      	str	r3, [r2, #64]	@ 0x40
 8001988:	4b25      	ldr	r3, [pc, #148]	@ (8001a20 <SystemClock_Config+0xcc>)
 800198a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001994:	2300      	movs	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	4b22      	ldr	r3, [pc, #136]	@ (8001a24 <SystemClock_Config+0xd0>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a21      	ldr	r2, [pc, #132]	@ (8001a24 <SystemClock_Config+0xd0>)
 800199e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a24 <SystemClock_Config+0xd0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ac:	607b      	str	r3, [r7, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019b0:	2302      	movs	r3, #2
 80019b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019b4:	2301      	movs	r3, #1
 80019b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80019b8:	2310      	movs	r3, #16
 80019ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019bc:	2302      	movs	r3, #2
 80019be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80019c0:	2300      	movs	r3, #0
 80019c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80019c4:	2308      	movs	r3, #8
 80019c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80019c8:	2332      	movs	r3, #50	@ 0x32
 80019ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80019cc:	2304      	movs	r3, #4
 80019ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80019d0:	2307      	movs	r3, #7
 80019d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019d4:	f107 0320 	add.w	r3, r7, #32
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 fb8b 	bl	80040f4 <HAL_RCC_OscConfig>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80019e4:	f000 fc50 	bl	8002288 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019e8:	230f      	movs	r3, #15
 80019ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019ec:	2302      	movs	r3, #2
 80019ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019f4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019fa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a00:	f107 030c 	add.w	r3, r7, #12
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fdec 	bl	80045e4 <HAL_RCC_ClockConfig>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a12:	f000 fc39 	bl	8002288 <Error_Handler>
  }
}
 8001a16:	bf00      	nop
 8001a18:	3750      	adds	r7, #80	@ 0x50
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000

08001a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a2e:	4a13      	ldr	r2, [pc, #76]	@ (8001a7c <MX_I2C1_Init+0x54>)
 8001a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a32:	4b11      	ldr	r3, [pc, #68]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a34:	4a12      	ldr	r2, [pc, #72]	@ (8001a80 <MX_I2C1_Init+0x58>)
 8001a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a52:	4b09      	ldr	r3, [pc, #36]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a58:	4b07      	ldr	r3, [pc, #28]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a64:	4804      	ldr	r0, [pc, #16]	@ (8001a78 <MX_I2C1_Init+0x50>)
 8001a66:	f001 fe97 	bl	8003798 <HAL_I2C_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a70:	f000 fc0a 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200001f8 	.word	0x200001f8
 8001a7c:	40005400 	.word	0x40005400
 8001a80:	000186a0 	.word	0x000186a0

08001a84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08c      	sub	sp, #48	@ 0x30
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a8a:	f107 030c 	add.w	r3, r7, #12
 8001a8e:	2224      	movs	r2, #36	@ 0x24
 8001a90:	2100      	movs	r1, #0
 8001a92:	4618      	mov	r0, r3
 8001a94:	f008 f8ca 	bl	8009c2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a98:	1d3b      	adds	r3, r7, #4
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001aa0:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <MX_TIM1_Init+0xa8>)
 8001aa2:	4a23      	ldr	r2, [pc, #140]	@ (8001b30 <MX_TIM1_Init+0xac>)
 8001aa4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001aa6:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <MX_TIM1_Init+0xa8>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <MX_TIM1_Init+0xa8>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b2c <MX_TIM1_Init+0xa8>)
 8001ab4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ab8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aba:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <MX_TIM1_Init+0xa8>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8001b2c <MX_TIM1_Init+0xa8>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac6:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <MX_TIM1_Init+0xa8>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001acc:	2303      	movs	r3, #3
 8001ace:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	4619      	mov	r1, r3
 8001af6:	480d      	ldr	r0, [pc, #52]	@ (8001b2c <MX_TIM1_Init+0xa8>)
 8001af8:	f003 f9a8 	bl	8004e4c <HAL_TIM_Encoder_Init>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001b02:	f000 fbc1 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b06:	2300      	movs	r3, #0
 8001b08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b0e:	1d3b      	adds	r3, r7, #4
 8001b10:	4619      	mov	r1, r3
 8001b12:	4806      	ldr	r0, [pc, #24]	@ (8001b2c <MX_TIM1_Init+0xa8>)
 8001b14:	f004 f886 	bl	8005c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001b1e:	f000 fbb3 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	3730      	adds	r7, #48	@ 0x30
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	2000024c 	.word	0x2000024c
 8001b30:	40010000 	.word	0x40010000

08001b34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	@ 0x30
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b3a:	f107 030c 	add.w	r3, r7, #12
 8001b3e:	2224      	movs	r2, #36	@ 0x24
 8001b40:	2100      	movs	r1, #0
 8001b42:	4618      	mov	r0, r3
 8001b44:	f008 f872 	bl	8009c2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b50:	4b21      	ldr	r3, [pc, #132]	@ (8001bd8 <MX_TIM2_Init+0xa4>)
 8001b52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b58:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd8 <MX_TIM2_Init+0xa4>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd8 <MX_TIM2_Init+0xa4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b64:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd8 <MX_TIM2_Init+0xa4>)
 8001b66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <MX_TIM2_Init+0xa4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b72:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <MX_TIM2_Init+0xa4>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b80:	2301      	movs	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b90:	2301      	movs	r3, #1
 8001b92:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b94:	2300      	movs	r3, #0
 8001b96:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b9c:	f107 030c 	add.w	r3, r7, #12
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	480d      	ldr	r0, [pc, #52]	@ (8001bd8 <MX_TIM2_Init+0xa4>)
 8001ba4:	f003 f952 	bl	8004e4c <HAL_TIM_Encoder_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001bae:	f000 fb6b 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4806      	ldr	r0, [pc, #24]	@ (8001bd8 <MX_TIM2_Init+0xa4>)
 8001bc0:	f004 f830 	bl	8005c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001bca:	f000 fb5d 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bce:	bf00      	nop
 8001bd0:	3730      	adds	r7, #48	@ 0x30
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	20000294 	.word	0x20000294

08001bdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08e      	sub	sp, #56	@ 0x38
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf0:	f107 0320 	add.w	r3, r7, #32
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
 8001c08:	615a      	str	r2, [r3, #20]
 8001c0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c0c:	4b32      	ldr	r3, [pc, #200]	@ (8001cd8 <MX_TIM3_Init+0xfc>)
 8001c0e:	4a33      	ldr	r2, [pc, #204]	@ (8001cdc <MX_TIM3_Init+0x100>)
 8001c10:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001c12:	4b31      	ldr	r3, [pc, #196]	@ (8001cd8 <MX_TIM3_Init+0xfc>)
 8001c14:	2253      	movs	r2, #83	@ 0x53
 8001c16:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c18:	4b2f      	ldr	r3, [pc, #188]	@ (8001cd8 <MX_TIM3_Init+0xfc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001cd8 <MX_TIM3_Init+0xfc>)
 8001c20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c24:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c26:	4b2c      	ldr	r3, [pc, #176]	@ (8001cd8 <MX_TIM3_Init+0xfc>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001cd8 <MX_TIM3_Init+0xfc>)
 8001c2e:	2280      	movs	r2, #128	@ 0x80
 8001c30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c32:	4829      	ldr	r0, [pc, #164]	@ (8001cd8 <MX_TIM3_Init+0xfc>)
 8001c34:	f002 ff28 	bl	8004a88 <HAL_TIM_Base_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001c3e:	f000 fb23 	bl	8002288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c48:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4822      	ldr	r0, [pc, #136]	@ (8001cd8 <MX_TIM3_Init+0xfc>)
 8001c50:	f003 fbe2 	bl	8005418 <HAL_TIM_ConfigClockSource>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001c5a:	f000 fb15 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c5e:	481e      	ldr	r0, [pc, #120]	@ (8001cd8 <MX_TIM3_Init+0xfc>)
 8001c60:	f002 ffd2 	bl	8004c08 <HAL_TIM_PWM_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c6a:	f000 fb0d 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c76:	f107 0320 	add.w	r3, r7, #32
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4816      	ldr	r0, [pc, #88]	@ (8001cd8 <MX_TIM3_Init+0xfc>)
 8001c7e:	f003 ffd1 	bl	8005c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001c88:	f000 fafe 	bl	8002288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c8c:	2360      	movs	r3, #96	@ 0x60
 8001c8e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	480d      	ldr	r0, [pc, #52]	@ (8001cd8 <MX_TIM3_Init+0xfc>)
 8001ca4:	f003 faf6 	bl	8005294 <HAL_TIM_PWM_ConfigChannel>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001cae:	f000 faeb 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4807      	ldr	r0, [pc, #28]	@ (8001cd8 <MX_TIM3_Init+0xfc>)
 8001cba:	f003 faeb 	bl	8005294 <HAL_TIM_PWM_ConfigChannel>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001cc4:	f000 fae0 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cc8:	4803      	ldr	r0, [pc, #12]	@ (8001cd8 <MX_TIM3_Init+0xfc>)
 8001cca:	f000 ff05 	bl	8002ad8 <HAL_TIM_MspPostInit>

}
 8001cce:	bf00      	nop
 8001cd0:	3738      	adds	r7, #56	@ 0x38
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	200002dc 	.word	0x200002dc
 8001cdc:	40000400 	.word	0x40000400

08001ce0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08e      	sub	sp, #56	@ 0x38
 8001ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ce6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	605a      	str	r2, [r3, #4]
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cf4:	f107 0320 	add.w	r3, r7, #32
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cfe:	1d3b      	adds	r3, r7, #4
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
 8001d0a:	611a      	str	r2, [r3, #16]
 8001d0c:	615a      	str	r2, [r3, #20]
 8001d0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d10:	4b32      	ldr	r3, [pc, #200]	@ (8001ddc <MX_TIM4_Init+0xfc>)
 8001d12:	4a33      	ldr	r2, [pc, #204]	@ (8001de0 <MX_TIM4_Init+0x100>)
 8001d14:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001d16:	4b31      	ldr	r3, [pc, #196]	@ (8001ddc <MX_TIM4_Init+0xfc>)
 8001d18:	2253      	movs	r2, #83	@ 0x53
 8001d1a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001ddc <MX_TIM4_Init+0xfc>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001d22:	4b2e      	ldr	r3, [pc, #184]	@ (8001ddc <MX_TIM4_Init+0xfc>)
 8001d24:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d28:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ddc <MX_TIM4_Init+0xfc>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d30:	4b2a      	ldr	r3, [pc, #168]	@ (8001ddc <MX_TIM4_Init+0xfc>)
 8001d32:	2280      	movs	r2, #128	@ 0x80
 8001d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d36:	4829      	ldr	r0, [pc, #164]	@ (8001ddc <MX_TIM4_Init+0xfc>)
 8001d38:	f002 fea6 	bl	8004a88 <HAL_TIM_Base_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001d42:	f000 faa1 	bl	8002288 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d4c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d50:	4619      	mov	r1, r3
 8001d52:	4822      	ldr	r0, [pc, #136]	@ (8001ddc <MX_TIM4_Init+0xfc>)
 8001d54:	f003 fb60 	bl	8005418 <HAL_TIM_ConfigClockSource>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001d5e:	f000 fa93 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001d62:	481e      	ldr	r0, [pc, #120]	@ (8001ddc <MX_TIM4_Init+0xfc>)
 8001d64:	f002 ff50 	bl	8004c08 <HAL_TIM_PWM_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001d6e:	f000 fa8b 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d7a:	f107 0320 	add.w	r3, r7, #32
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4816      	ldr	r0, [pc, #88]	@ (8001ddc <MX_TIM4_Init+0xfc>)
 8001d82:	f003 ff4f 	bl	8005c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001d8c:	f000 fa7c 	bl	8002288 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d90:	2360      	movs	r3, #96	@ 0x60
 8001d92:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	2200      	movs	r2, #0
 8001da4:	4619      	mov	r1, r3
 8001da6:	480d      	ldr	r0, [pc, #52]	@ (8001ddc <MX_TIM4_Init+0xfc>)
 8001da8:	f003 fa74 	bl	8005294 <HAL_TIM_PWM_ConfigChannel>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001db2:	f000 fa69 	bl	8002288 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	2204      	movs	r2, #4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4807      	ldr	r0, [pc, #28]	@ (8001ddc <MX_TIM4_Init+0xfc>)
 8001dbe:	f003 fa69 	bl	8005294 <HAL_TIM_PWM_ConfigChannel>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001dc8:	f000 fa5e 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001dcc:	4803      	ldr	r0, [pc, #12]	@ (8001ddc <MX_TIM4_Init+0xfc>)
 8001dce:	f000 fe83 	bl	8002ad8 <HAL_TIM_MspPostInit>

}
 8001dd2:	bf00      	nop
 8001dd4:	3738      	adds	r7, #56	@ 0x38
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000324 	.word	0x20000324
 8001de0:	40000800 	.word	0x40000800

08001de4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08c      	sub	sp, #48	@ 0x30
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001dea:	f107 030c 	add.w	r3, r7, #12
 8001dee:	2224      	movs	r2, #36	@ 0x24
 8001df0:	2100      	movs	r1, #0
 8001df2:	4618      	mov	r0, r3
 8001df4:	f007 ff1a 	bl	8009c2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e00:	4b20      	ldr	r3, [pc, #128]	@ (8001e84 <MX_TIM5_Init+0xa0>)
 8001e02:	4a21      	ldr	r2, [pc, #132]	@ (8001e88 <MX_TIM5_Init+0xa4>)
 8001e04:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001e06:	4b1f      	ldr	r3, [pc, #124]	@ (8001e84 <MX_TIM5_Init+0xa0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001e84 <MX_TIM5_Init+0xa0>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8001e12:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <MX_TIM5_Init+0xa0>)
 8001e14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e18:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1a:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <MX_TIM5_Init+0xa0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e20:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <MX_TIM5_Init+0xa0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e26:	2303      	movs	r3, #3
 8001e28:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e32:	2300      	movs	r3, #0
 8001e34:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8001e4a:	f107 030c 	add.w	r3, r7, #12
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480c      	ldr	r0, [pc, #48]	@ (8001e84 <MX_TIM5_Init+0xa0>)
 8001e52:	f002 fffb 	bl	8004e4c <HAL_TIM_Encoder_Init>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8001e5c:	f000 fa14 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e60:	2300      	movs	r3, #0
 8001e62:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4805      	ldr	r0, [pc, #20]	@ (8001e84 <MX_TIM5_Init+0xa0>)
 8001e6e:	f003 fed9 	bl	8005c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001e78:	f000 fa06 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e7c:	bf00      	nop
 8001e7e:	3730      	adds	r7, #48	@ 0x30
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	2000036c 	.word	0x2000036c
 8001e88:	40000c00 	.word	0x40000c00

08001e8c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08c      	sub	sp, #48	@ 0x30
 8001e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e92:	f107 030c 	add.w	r3, r7, #12
 8001e96:	2224      	movs	r2, #36	@ 0x24
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f007 fec6 	bl	8009c2c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea0:	1d3b      	adds	r3, r7, #4
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001ea8:	4b22      	ldr	r3, [pc, #136]	@ (8001f34 <MX_TIM8_Init+0xa8>)
 8001eaa:	4a23      	ldr	r2, [pc, #140]	@ (8001f38 <MX_TIM8_Init+0xac>)
 8001eac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001eae:	4b21      	ldr	r3, [pc, #132]	@ (8001f34 <MX_TIM8_Init+0xa8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f34 <MX_TIM8_Init+0xa8>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001eba:	4b1e      	ldr	r3, [pc, #120]	@ (8001f34 <MX_TIM8_Init+0xa8>)
 8001ebc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ec0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f34 <MX_TIM8_Init+0xa8>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f34 <MX_TIM8_Init+0xa8>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ece:	4b19      	ldr	r3, [pc, #100]	@ (8001f34 <MX_TIM8_Init+0xa8>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001edc:	2301      	movs	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001eec:	2301      	movs	r3, #1
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001ef8:	f107 030c 	add.w	r3, r7, #12
 8001efc:	4619      	mov	r1, r3
 8001efe:	480d      	ldr	r0, [pc, #52]	@ (8001f34 <MX_TIM8_Init+0xa8>)
 8001f00:	f002 ffa4 	bl	8004e4c <HAL_TIM_Encoder_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001f0a:	f000 f9bd 	bl	8002288 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4806      	ldr	r0, [pc, #24]	@ (8001f34 <MX_TIM8_Init+0xa8>)
 8001f1c:	f003 fe82 	bl	8005c24 <HAL_TIMEx_MasterConfigSynchronization>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001f26:	f000 f9af 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001f2a:	bf00      	nop
 8001f2c:	3730      	adds	r7, #48	@ 0x30
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	200003b4 	.word	0x200003b4
 8001f38:	40010400 	.word	0x40010400

08001f3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f40:	4b11      	ldr	r3, [pc, #68]	@ (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <MX_USART2_UART_Init+0x50>)
 8001f44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f46:	4b10      	ldr	r3, [pc, #64]	@ (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f54:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f60:	4b09      	ldr	r3, [pc, #36]	@ (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f62:	220c      	movs	r2, #12
 8001f64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f66:	4b08      	ldr	r3, [pc, #32]	@ (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	@ (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f72:	4805      	ldr	r0, [pc, #20]	@ (8001f88 <MX_USART2_UART_Init+0x4c>)
 8001f74:	f003 fee6 	bl	8005d44 <HAL_UART_Init>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f7e:	f000 f983 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	200003fc 	.word	0x200003fc
 8001f8c:	40004400 	.word	0x40004400

08001f90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f94:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001f96:	4a12      	ldr	r2, [pc, #72]	@ (8001fe0 <MX_USART3_UART_Init+0x50>)
 8001f98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f9a:	4b10      	ldr	r3, [pc, #64]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001f9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fa0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fae:	4b0b      	ldr	r3, [pc, #44]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fb4:	4b09      	ldr	r3, [pc, #36]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001fb6:	220c      	movs	r2, #12
 8001fb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fba:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fc6:	4805      	ldr	r0, [pc, #20]	@ (8001fdc <MX_USART3_UART_Init+0x4c>)
 8001fc8:	f003 febc 	bl	8005d44 <HAL_UART_Init>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fd2:	f000 f959 	bl	8002288 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000444 	.word	0x20000444
 8001fe0:	40004800 	.word	0x40004800

08001fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08c      	sub	sp, #48	@ 0x30
 8001fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fea:	f107 031c 	add.w	r3, r7, #28
 8001fee:	2200      	movs	r2, #0
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	605a      	str	r2, [r3, #4]
 8001ff4:	609a      	str	r2, [r3, #8]
 8001ff6:	60da      	str	r2, [r3, #12]
 8001ff8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
 8001ffe:	4b93      	ldr	r3, [pc, #588]	@ (800224c <MX_GPIO_Init+0x268>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	4a92      	ldr	r2, [pc, #584]	@ (800224c <MX_GPIO_Init+0x268>)
 8002004:	f043 0310 	orr.w	r3, r3, #16
 8002008:	6313      	str	r3, [r2, #48]	@ 0x30
 800200a:	4b90      	ldr	r3, [pc, #576]	@ (800224c <MX_GPIO_Init+0x268>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	f003 0310 	and.w	r3, r3, #16
 8002012:	61bb      	str	r3, [r7, #24]
 8002014:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	4b8c      	ldr	r3, [pc, #560]	@ (800224c <MX_GPIO_Init+0x268>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	4a8b      	ldr	r2, [pc, #556]	@ (800224c <MX_GPIO_Init+0x268>)
 8002020:	f043 0304 	orr.w	r3, r3, #4
 8002024:	6313      	str	r3, [r2, #48]	@ 0x30
 8002026:	4b89      	ldr	r3, [pc, #548]	@ (800224c <MX_GPIO_Init+0x268>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	f003 0304 	and.w	r3, r3, #4
 800202e:	617b      	str	r3, [r7, #20]
 8002030:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	4b85      	ldr	r3, [pc, #532]	@ (800224c <MX_GPIO_Init+0x268>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203a:	4a84      	ldr	r2, [pc, #528]	@ (800224c <MX_GPIO_Init+0x268>)
 800203c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002040:	6313      	str	r3, [r2, #48]	@ 0x30
 8002042:	4b82      	ldr	r3, [pc, #520]	@ (800224c <MX_GPIO_Init+0x268>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	4b7e      	ldr	r3, [pc, #504]	@ (800224c <MX_GPIO_Init+0x268>)
 8002054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002056:	4a7d      	ldr	r2, [pc, #500]	@ (800224c <MX_GPIO_Init+0x268>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6313      	str	r3, [r2, #48]	@ 0x30
 800205e:	4b7b      	ldr	r3, [pc, #492]	@ (800224c <MX_GPIO_Init+0x268>)
 8002060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	60fb      	str	r3, [r7, #12]
 8002068:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	4b77      	ldr	r3, [pc, #476]	@ (800224c <MX_GPIO_Init+0x268>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002072:	4a76      	ldr	r2, [pc, #472]	@ (800224c <MX_GPIO_Init+0x268>)
 8002074:	f043 0302 	orr.w	r3, r3, #2
 8002078:	6313      	str	r3, [r2, #48]	@ 0x30
 800207a:	4b74      	ldr	r3, [pc, #464]	@ (800224c <MX_GPIO_Init+0x268>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207e:	f003 0302 	and.w	r3, r3, #2
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
 800208a:	4b70      	ldr	r3, [pc, #448]	@ (800224c <MX_GPIO_Init+0x268>)
 800208c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800208e:	4a6f      	ldr	r2, [pc, #444]	@ (800224c <MX_GPIO_Init+0x268>)
 8002090:	f043 0308 	orr.w	r3, r3, #8
 8002094:	6313      	str	r3, [r2, #48]	@ 0x30
 8002096:	4b6d      	ldr	r3, [pc, #436]	@ (800224c <MX_GPIO_Init+0x268>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	607b      	str	r3, [r7, #4]
 80020a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	2108      	movs	r1, #8
 80020a6:	486a      	ldr	r0, [pc, #424]	@ (8002250 <MX_GPIO_Init+0x26c>)
 80020a8:	f001 fb5c 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FL_IN1_Pin|FL_IN2_Pin|FR_IN1_Pin|FR_IN2_Pin
 80020ac:	2200      	movs	r2, #0
 80020ae:	f240 313f 	movw	r1, #831	@ 0x33f
 80020b2:	4868      	ldr	r0, [pc, #416]	@ (8002254 <MX_GPIO_Init+0x270>)
 80020b4:	f001 fb56 	bl	8003764 <HAL_GPIO_WritePin>
                          |RL_IN1_Pin|RL_IN2_Pin|RR_IN1_Pin|RR_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80020b8:	2200      	movs	r2, #0
 80020ba:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80020be:	4866      	ldr	r0, [pc, #408]	@ (8002258 <MX_GPIO_Init+0x274>)
 80020c0:	f001 fb50 	bl	8003764 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80020c4:	2308      	movs	r3, #8
 80020c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020c8:	2301      	movs	r3, #1
 80020ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80020d4:	f107 031c 	add.w	r3, r7, #28
 80020d8:	4619      	mov	r1, r3
 80020da:	485d      	ldr	r0, [pc, #372]	@ (8002250 <MX_GPIO_Init+0x26c>)
 80020dc:	f001 f98e 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pins : FL_IN1_Pin FL_IN2_Pin FR_IN1_Pin FR_IN2_Pin
                           RL_IN1_Pin RL_IN2_Pin RR_IN1_Pin RR_IN2_Pin */
  GPIO_InitStruct.Pin = FL_IN1_Pin|FL_IN2_Pin|FR_IN1_Pin|FR_IN2_Pin
 80020e0:	f240 333f 	movw	r3, #831	@ 0x33f
 80020e4:	61fb      	str	r3, [r7, #28]
                          |RL_IN1_Pin|RL_IN2_Pin|RR_IN1_Pin|RR_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ee:	2300      	movs	r3, #0
 80020f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f2:	f107 031c 	add.w	r3, r7, #28
 80020f6:	4619      	mov	r1, r3
 80020f8:	4856      	ldr	r0, [pc, #344]	@ (8002254 <MX_GPIO_Init+0x270>)
 80020fa:	f001 f97f 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80020fe:	2310      	movs	r3, #16
 8002100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	2302      	movs	r3, #2
 8002104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002106:	2300      	movs	r3, #0
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210a:	2300      	movs	r3, #0
 800210c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800210e:	2306      	movs	r3, #6
 8002110:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002112:	f107 031c 	add.w	r3, r7, #28
 8002116:	4619      	mov	r1, r3
 8002118:	4850      	ldr	r0, [pc, #320]	@ (800225c <MX_GPIO_Init+0x278>)
 800211a:	f001 f96f 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_SCK_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 800211e:	2320      	movs	r3, #32
 8002120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800212e:	2305      	movs	r3, #5
 8002130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	4619      	mov	r1, r3
 8002138:	4848      	ldr	r0, [pc, #288]	@ (800225c <MX_GPIO_Init+0x278>)
 800213a:	f001 f95f 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800213e:	2304      	movs	r3, #4
 8002140:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	4619      	mov	r1, r3
 8002150:	4843      	ldr	r0, [pc, #268]	@ (8002260 <MX_GPIO_Init+0x27c>)
 8002152:	f001 f953 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002156:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800215a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800215c:	2302      	movs	r3, #2
 800215e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002160:	2300      	movs	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002164:	2300      	movs	r3, #0
 8002166:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002168:	2305      	movs	r3, #5
 800216a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800216c:	f107 031c 	add.w	r3, r7, #28
 8002170:	4619      	mov	r1, r3
 8002172:	483b      	ldr	r0, [pc, #236]	@ (8002260 <MX_GPIO_Init+0x27c>)
 8002174:	f001 f942 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_OUT_Pin */
  GPIO_InitStruct.Pin = IR_OUT_Pin;
 8002178:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800217c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800217e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002184:	2300      	movs	r3, #0
 8002186:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(IR_OUT_GPIO_Port, &GPIO_InitStruct);
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	4619      	mov	r1, r3
 800218e:	4832      	ldr	r0, [pc, #200]	@ (8002258 <MX_GPIO_Init+0x274>)
 8002190:	f001 f934 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002194:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002198:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219a:	2301      	movs	r3, #1
 800219c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	4619      	mov	r1, r3
 80021ac:	482a      	ldr	r0, [pc, #168]	@ (8002258 <MX_GPIO_Init+0x274>)
 80021ae:	f001 f925 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80021b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021b8:	2300      	movs	r3, #0
 80021ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80021c0:	f107 031c 	add.w	r3, r7, #28
 80021c4:	4619      	mov	r1, r3
 80021c6:	4825      	ldr	r0, [pc, #148]	@ (800225c <MX_GPIO_Init+0x278>)
 80021c8:	f001 f918 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80021cc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80021d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021d2:	2302      	movs	r3, #2
 80021d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021da:	2300      	movs	r3, #0
 80021dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021de:	230a      	movs	r3, #10
 80021e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021e2:	f107 031c 	add.w	r3, r7, #28
 80021e6:	4619      	mov	r1, r3
 80021e8:	481c      	ldr	r0, [pc, #112]	@ (800225c <MX_GPIO_Init+0x278>)
 80021ea:	f001 f907 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 80021ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f4:	2302      	movs	r3, #2
 80021f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fc:	2300      	movs	r3, #0
 80021fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002200:	2306      	movs	r3, #6
 8002202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002204:	f107 031c 	add.w	r3, r7, #28
 8002208:	4619      	mov	r1, r3
 800220a:	4812      	ldr	r0, [pc, #72]	@ (8002254 <MX_GPIO_Init+0x270>)
 800220c:	f001 f8f6 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002210:	2320      	movs	r3, #32
 8002212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002214:	2300      	movs	r3, #0
 8002216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	4619      	mov	r1, r3
 8002222:	480d      	ldr	r0, [pc, #52]	@ (8002258 <MX_GPIO_Init+0x274>)
 8002224:	f001 f8ea 	bl	80033fc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002228:	2302      	movs	r3, #2
 800222a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800222c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002236:	f107 031c 	add.w	r3, r7, #28
 800223a:	4619      	mov	r1, r3
 800223c:	4804      	ldr	r0, [pc, #16]	@ (8002250 <MX_GPIO_Init+0x26c>)
 800223e:	f001 f8dd 	bl	80033fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002242:	bf00      	nop
 8002244:	3730      	adds	r7, #48	@ 0x30
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40023800 	.word	0x40023800
 8002250:	40021000 	.word	0x40021000
 8002254:	40020800 	.word	0x40020800
 8002258:	40020c00 	.word	0x40020c00
 800225c:	40020000 	.word	0x40020000
 8002260:	40020400 	.word	0x40020400

08002264 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a04      	ldr	r2, [pc, #16]	@ (8002284 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d101      	bne.n	800227a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002276:	f000 ff09 	bl	800308c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40001400 	.word	0x40001400

08002288 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800228c:	b672      	cpsid	i
}
 800228e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <Error_Handler+0x8>

08002294 <myprintf>:
#include "myprintf.h"

extern UART_HandleTypeDef huart2;

void myprintf(UART_HandleTypeDef *huart, const char *fmt, ...)
{
 8002294:	b40e      	push	{r1, r2, r3}
 8002296:	b580      	push	{r7, lr}
 8002298:	b085      	sub	sp, #20
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
    static char buffer[256];
    va_list args;
    va_start(args, fmt);
 800229e:	f107 0320 	add.w	r3, r7, #32
 80022a2:	60bb      	str	r3, [r7, #8]
    vsnprintf(buffer, sizeof(buffer), fmt, args);
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	69fa      	ldr	r2, [r7, #28]
 80022a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022ac:	480b      	ldr	r0, [pc, #44]	@ (80022dc <myprintf+0x48>)
 80022ae:	f007 fc95 	bl	8009bdc <vsniprintf>
    va_end(args);

    int len = strlen(buffer);
 80022b2:	480a      	ldr	r0, [pc, #40]	@ (80022dc <myprintf+0x48>)
 80022b4:	f7fd ff8c 	bl	80001d0 <strlen>
 80022b8:	4603      	mov	r3, r0
 80022ba:	60fb      	str	r3, [r7, #12]
    HAL_UART_Transmit(huart, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	b29a      	uxth	r2, r3
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
 80022c4:	4905      	ldr	r1, [pc, #20]	@ (80022dc <myprintf+0x48>)
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f003 fd8c 	bl	8005de4 <HAL_UART_Transmit>
}
 80022cc:	bf00      	nop
 80022ce:	3714      	adds	r7, #20
 80022d0:	46bd      	mov	sp, r7
 80022d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022d6:	b003      	add	sp, #12
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	20000554 	.word	0x20000554

080022e0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
	...

080022f0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b086      	sub	sp, #24
 80022f4:	af04      	add	r7, sp, #16
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80022fa:	f04f 33ff 	mov.w	r3, #4294967295
 80022fe:	9302      	str	r3, [sp, #8]
 8002300:	2301      	movs	r3, #1
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	1dfb      	adds	r3, r7, #7
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	2301      	movs	r3, #1
 800230a:	2200      	movs	r2, #0
 800230c:	2178      	movs	r1, #120	@ 0x78
 800230e:	4803      	ldr	r0, [pc, #12]	@ (800231c <ssd1306_WriteCommand+0x2c>)
 8002310:	f001 fb86 	bl	8003a20 <HAL_I2C_Mem_Write>
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	200001f8 	.word	0x200001f8

08002320 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af04      	add	r7, sp, #16
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	b29b      	uxth	r3, r3
 800232e:	f04f 32ff 	mov.w	r2, #4294967295
 8002332:	9202      	str	r2, [sp, #8]
 8002334:	9301      	str	r3, [sp, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2301      	movs	r3, #1
 800233c:	2240      	movs	r2, #64	@ 0x40
 800233e:	2178      	movs	r1, #120	@ 0x78
 8002340:	4803      	ldr	r0, [pc, #12]	@ (8002350 <ssd1306_WriteData+0x30>)
 8002342:	f001 fb6d 	bl	8003a20 <HAL_I2C_Mem_Write>
}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	200001f8 	.word	0x200001f8

08002354 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002358:	f7ff ffc2 	bl	80022e0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800235c:	2064      	movs	r0, #100	@ 0x64
 800235e:	f000 feb5 	bl	80030cc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002362:	2000      	movs	r0, #0
 8002364:	f000 f9d8 	bl	8002718 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002368:	2020      	movs	r0, #32
 800236a:	f7ff ffc1 	bl	80022f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800236e:	2000      	movs	r0, #0
 8002370:	f7ff ffbe 	bl	80022f0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002374:	20b0      	movs	r0, #176	@ 0xb0
 8002376:	f7ff ffbb 	bl	80022f0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800237a:	20c8      	movs	r0, #200	@ 0xc8
 800237c:	f7ff ffb8 	bl	80022f0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002380:	2000      	movs	r0, #0
 8002382:	f7ff ffb5 	bl	80022f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002386:	2010      	movs	r0, #16
 8002388:	f7ff ffb2 	bl	80022f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800238c:	2040      	movs	r0, #64	@ 0x40
 800238e:	f7ff ffaf 	bl	80022f0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002392:	20ff      	movs	r0, #255	@ 0xff
 8002394:	f000 f9ac 	bl	80026f0 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002398:	20a1      	movs	r0, #161	@ 0xa1
 800239a:	f7ff ffa9 	bl	80022f0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800239e:	20a6      	movs	r0, #166	@ 0xa6
 80023a0:	f7ff ffa6 	bl	80022f0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80023a4:	20a8      	movs	r0, #168	@ 0xa8
 80023a6:	f7ff ffa3 	bl	80022f0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80023aa:	201f      	movs	r0, #31
 80023ac:	f7ff ffa0 	bl	80022f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80023b0:	20a4      	movs	r0, #164	@ 0xa4
 80023b2:	f7ff ff9d 	bl	80022f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80023b6:	20d3      	movs	r0, #211	@ 0xd3
 80023b8:	f7ff ff9a 	bl	80022f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80023bc:	2000      	movs	r0, #0
 80023be:	f7ff ff97 	bl	80022f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80023c2:	20d5      	movs	r0, #213	@ 0xd5
 80023c4:	f7ff ff94 	bl	80022f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80023c8:	20f0      	movs	r0, #240	@ 0xf0
 80023ca:	f7ff ff91 	bl	80022f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80023ce:	20d9      	movs	r0, #217	@ 0xd9
 80023d0:	f7ff ff8e 	bl	80022f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80023d4:	2022      	movs	r0, #34	@ 0x22
 80023d6:	f7ff ff8b 	bl	80022f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80023da:	20da      	movs	r0, #218	@ 0xda
 80023dc:	f7ff ff88 	bl	80022f0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80023e0:	2002      	movs	r0, #2
 80023e2:	f7ff ff85 	bl	80022f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80023e6:	20db      	movs	r0, #219	@ 0xdb
 80023e8:	f7ff ff82 	bl	80022f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80023ec:	2020      	movs	r0, #32
 80023ee:	f7ff ff7f 	bl	80022f0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80023f2:	208d      	movs	r0, #141	@ 0x8d
 80023f4:	f7ff ff7c 	bl	80022f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80023f8:	2014      	movs	r0, #20
 80023fa:	f7ff ff79 	bl	80022f0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80023fe:	2001      	movs	r0, #1
 8002400:	f000 f98a 	bl	8002718 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002404:	2000      	movs	r0, #0
 8002406:	f000 f80f 	bl	8002428 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800240a:	f000 f825 	bl	8002458 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800240e:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <ssd1306_Init+0xd0>)
 8002410:	2200      	movs	r2, #0
 8002412:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002414:	4b03      	ldr	r3, [pc, #12]	@ (8002424 <ssd1306_Init+0xd0>)
 8002416:	2200      	movs	r2, #0
 8002418:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800241a:	4b02      	ldr	r3, [pc, #8]	@ (8002424 <ssd1306_Init+0xd0>)
 800241c:	2201      	movs	r2, #1
 800241e:	711a      	strb	r2, [r3, #4]
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	20000854 	.word	0x20000854

08002428 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <ssd1306_Fill+0x14>
 8002438:	2300      	movs	r3, #0
 800243a:	e000      	b.n	800243e <ssd1306_Fill+0x16>
 800243c:	23ff      	movs	r3, #255	@ 0xff
 800243e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002442:	4619      	mov	r1, r3
 8002444:	4803      	ldr	r0, [pc, #12]	@ (8002454 <ssd1306_Fill+0x2c>)
 8002446:	f007 fbf1 	bl	8009c2c <memset>
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000654 	.word	0x20000654

08002458 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800245e:	2300      	movs	r3, #0
 8002460:	71fb      	strb	r3, [r7, #7]
 8002462:	e016      	b.n	8002492 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002464:	79fb      	ldrb	r3, [r7, #7]
 8002466:	3b50      	subs	r3, #80	@ 0x50
 8002468:	b2db      	uxtb	r3, r3
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff ff40 	bl	80022f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002470:	2000      	movs	r0, #0
 8002472:	f7ff ff3d 	bl	80022f0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002476:	2010      	movs	r0, #16
 8002478:	f7ff ff3a 	bl	80022f0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	01db      	lsls	r3, r3, #7
 8002480:	4a08      	ldr	r2, [pc, #32]	@ (80024a4 <ssd1306_UpdateScreen+0x4c>)
 8002482:	4413      	add	r3, r2
 8002484:	2180      	movs	r1, #128	@ 0x80
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff4a 	bl	8002320 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	3301      	adds	r3, #1
 8002490:	71fb      	strb	r3, [r7, #7]
 8002492:	79fb      	ldrb	r3, [r7, #7]
 8002494:	2b03      	cmp	r3, #3
 8002496:	d9e5      	bls.n	8002464 <ssd1306_UpdateScreen+0xc>
    }
}
 8002498:	bf00      	nop
 800249a:	bf00      	nop
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000654 	.word	0x20000654

080024a8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
 80024b2:	460b      	mov	r3, r1
 80024b4:	71bb      	strb	r3, [r7, #6]
 80024b6:	4613      	mov	r3, r2
 80024b8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80024ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	db3d      	blt.n	800253e <ssd1306_DrawPixel+0x96>
 80024c2:	79bb      	ldrb	r3, [r7, #6]
 80024c4:	2b1f      	cmp	r3, #31
 80024c6:	d83a      	bhi.n	800253e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80024c8:	797b      	ldrb	r3, [r7, #5]
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d11a      	bne.n	8002504 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80024ce:	79fa      	ldrb	r2, [r7, #7]
 80024d0:	79bb      	ldrb	r3, [r7, #6]
 80024d2:	08db      	lsrs	r3, r3, #3
 80024d4:	b2d8      	uxtb	r0, r3
 80024d6:	4603      	mov	r3, r0
 80024d8:	01db      	lsls	r3, r3, #7
 80024da:	4413      	add	r3, r2
 80024dc:	4a1b      	ldr	r2, [pc, #108]	@ (800254c <ssd1306_DrawPixel+0xa4>)
 80024de:	5cd3      	ldrb	r3, [r2, r3]
 80024e0:	b25a      	sxtb	r2, r3
 80024e2:	79bb      	ldrb	r3, [r7, #6]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	2101      	movs	r1, #1
 80024ea:	fa01 f303 	lsl.w	r3, r1, r3
 80024ee:	b25b      	sxtb	r3, r3
 80024f0:	4313      	orrs	r3, r2
 80024f2:	b259      	sxtb	r1, r3
 80024f4:	79fa      	ldrb	r2, [r7, #7]
 80024f6:	4603      	mov	r3, r0
 80024f8:	01db      	lsls	r3, r3, #7
 80024fa:	4413      	add	r3, r2
 80024fc:	b2c9      	uxtb	r1, r1
 80024fe:	4a13      	ldr	r2, [pc, #76]	@ (800254c <ssd1306_DrawPixel+0xa4>)
 8002500:	54d1      	strb	r1, [r2, r3]
 8002502:	e01d      	b.n	8002540 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002504:	79fa      	ldrb	r2, [r7, #7]
 8002506:	79bb      	ldrb	r3, [r7, #6]
 8002508:	08db      	lsrs	r3, r3, #3
 800250a:	b2d8      	uxtb	r0, r3
 800250c:	4603      	mov	r3, r0
 800250e:	01db      	lsls	r3, r3, #7
 8002510:	4413      	add	r3, r2
 8002512:	4a0e      	ldr	r2, [pc, #56]	@ (800254c <ssd1306_DrawPixel+0xa4>)
 8002514:	5cd3      	ldrb	r3, [r2, r3]
 8002516:	b25a      	sxtb	r2, r3
 8002518:	79bb      	ldrb	r3, [r7, #6]
 800251a:	f003 0307 	and.w	r3, r3, #7
 800251e:	2101      	movs	r1, #1
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	b25b      	sxtb	r3, r3
 8002526:	43db      	mvns	r3, r3
 8002528:	b25b      	sxtb	r3, r3
 800252a:	4013      	ands	r3, r2
 800252c:	b259      	sxtb	r1, r3
 800252e:	79fa      	ldrb	r2, [r7, #7]
 8002530:	4603      	mov	r3, r0
 8002532:	01db      	lsls	r3, r3, #7
 8002534:	4413      	add	r3, r2
 8002536:	b2c9      	uxtb	r1, r1
 8002538:	4a04      	ldr	r2, [pc, #16]	@ (800254c <ssd1306_DrawPixel+0xa4>)
 800253a:	54d1      	strb	r1, [r2, r3]
 800253c:	e000      	b.n	8002540 <ssd1306_DrawPixel+0x98>
        return;
 800253e:	bf00      	nop
    }
}
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000654 	.word	0x20000654

08002550 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002550:	b590      	push	{r4, r7, lr}
 8002552:	b089      	sub	sp, #36	@ 0x24
 8002554:	af00      	add	r7, sp, #0
 8002556:	4604      	mov	r4, r0
 8002558:	4638      	mov	r0, r7
 800255a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800255e:	4623      	mov	r3, r4
 8002560:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	2b1f      	cmp	r3, #31
 8002566:	d902      	bls.n	800256e <ssd1306_WriteChar+0x1e>
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	2b7e      	cmp	r3, #126	@ 0x7e
 800256c:	d901      	bls.n	8002572 <ssd1306_WriteChar+0x22>
        return 0;
 800256e:	2300      	movs	r3, #0
 8002570:	e079      	b.n	8002666 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <ssd1306_WriteChar+0x34>
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	7bfb      	ldrb	r3, [r7, #15]
 800257c:	3b20      	subs	r3, #32
 800257e:	4413      	add	r3, r2
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	e000      	b.n	8002586 <ssd1306_WriteChar+0x36>
 8002584:	783b      	ldrb	r3, [r7, #0]
 8002586:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002588:	4b39      	ldr	r3, [pc, #228]	@ (8002670 <ssd1306_WriteChar+0x120>)
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	461a      	mov	r2, r3
 800258e:	7dfb      	ldrb	r3, [r7, #23]
 8002590:	4413      	add	r3, r2
 8002592:	2b80      	cmp	r3, #128	@ 0x80
 8002594:	dc06      	bgt.n	80025a4 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002596:	4b36      	ldr	r3, [pc, #216]	@ (8002670 <ssd1306_WriteChar+0x120>)
 8002598:	885b      	ldrh	r3, [r3, #2]
 800259a:	461a      	mov	r2, r3
 800259c:	787b      	ldrb	r3, [r7, #1]
 800259e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	dd01      	ble.n	80025a8 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	e05e      	b.n	8002666 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80025a8:	2300      	movs	r3, #0
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	e04d      	b.n	800264a <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	3b20      	subs	r3, #32
 80025b4:	7879      	ldrb	r1, [r7, #1]
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	4619      	mov	r1, r3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	440b      	add	r3, r1
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	4413      	add	r3, r2
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80025c8:	2300      	movs	r3, #0
 80025ca:	61bb      	str	r3, [r7, #24]
 80025cc:	e036      	b.n	800263c <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d013      	beq.n	8002606 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80025de:	4b24      	ldr	r3, [pc, #144]	@ (8002670 <ssd1306_WriteChar+0x120>)
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	b2d8      	uxtb	r0, r3
 80025ec:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <ssd1306_WriteChar+0x120>)
 80025ee:	885b      	ldrh	r3, [r3, #2]
 80025f0:	b2da      	uxtb	r2, r3
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	4413      	add	r3, r2
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80025fe:	4619      	mov	r1, r3
 8002600:	f7ff ff52 	bl	80024a8 <ssd1306_DrawPixel>
 8002604:	e017      	b.n	8002636 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002606:	4b1a      	ldr	r3, [pc, #104]	@ (8002670 <ssd1306_WriteChar+0x120>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	b2da      	uxtb	r2, r3
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	4413      	add	r3, r2
 8002612:	b2d8      	uxtb	r0, r3
 8002614:	4b16      	ldr	r3, [pc, #88]	@ (8002670 <ssd1306_WriteChar+0x120>)
 8002616:	885b      	ldrh	r3, [r3, #2]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	b2db      	uxtb	r3, r3
 800261e:	4413      	add	r3, r2
 8002620:	b2d9      	uxtb	r1, r3
 8002622:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8002626:	2b00      	cmp	r3, #0
 8002628:	bf0c      	ite	eq
 800262a:	2301      	moveq	r3, #1
 800262c:	2300      	movne	r3, #0
 800262e:	b2db      	uxtb	r3, r3
 8002630:	461a      	mov	r2, r3
 8002632:	f7ff ff39 	bl	80024a8 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	3301      	adds	r3, #1
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	7dfb      	ldrb	r3, [r7, #23]
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	429a      	cmp	r2, r3
 8002642:	d3c4      	bcc.n	80025ce <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	3301      	adds	r3, #1
 8002648:	61fb      	str	r3, [r7, #28]
 800264a:	787b      	ldrb	r3, [r7, #1]
 800264c:	461a      	mov	r2, r3
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	4293      	cmp	r3, r2
 8002652:	d3ac      	bcc.n	80025ae <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002654:	4b06      	ldr	r3, [pc, #24]	@ (8002670 <ssd1306_WriteChar+0x120>)
 8002656:	881a      	ldrh	r2, [r3, #0]
 8002658:	7dfb      	ldrb	r3, [r7, #23]
 800265a:	b29b      	uxth	r3, r3
 800265c:	4413      	add	r3, r2
 800265e:	b29a      	uxth	r2, r3
 8002660:	4b03      	ldr	r3, [pc, #12]	@ (8002670 <ssd1306_WriteChar+0x120>)
 8002662:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3724      	adds	r7, #36	@ 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd90      	pop	{r4, r7, pc}
 800266e:	bf00      	nop
 8002670:	20000854 	.word	0x20000854

08002674 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	4638      	mov	r0, r7
 800267e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002682:	e013      	b.n	80026ac <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	7818      	ldrb	r0, [r3, #0]
 8002688:	7e3b      	ldrb	r3, [r7, #24]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	463b      	mov	r3, r7
 800268e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002690:	f7ff ff5e 	bl	8002550 <ssd1306_WriteChar>
 8002694:	4603      	mov	r3, r0
 8002696:	461a      	mov	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	429a      	cmp	r2, r3
 800269e:	d002      	beq.n	80026a6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	e008      	b.n	80026b8 <ssd1306_WriteString+0x44>
        }
        str++;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	3301      	adds	r3, #1
 80026aa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1e7      	bne.n	8002684 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	781b      	ldrb	r3, [r3, #0]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	460a      	mov	r2, r1
 80026ca:	71fb      	strb	r3, [r7, #7]
 80026cc:	4613      	mov	r3, r2
 80026ce:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	4b05      	ldr	r3, [pc, #20]	@ (80026ec <ssd1306_SetCursor+0x2c>)
 80026d6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80026d8:	79bb      	ldrb	r3, [r7, #6]
 80026da:	b29a      	uxth	r2, r3
 80026dc:	4b03      	ldr	r3, [pc, #12]	@ (80026ec <ssd1306_SetCursor+0x2c>)
 80026de:	805a      	strh	r2, [r3, #2]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	20000854 	.word	0x20000854

080026f0 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80026fa:	2381      	movs	r3, #129	@ 0x81
 80026fc:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80026fe:	7bfb      	ldrb	r3, [r7, #15]
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff fdf5 	bl	80022f0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002706:	79fb      	ldrb	r3, [r7, #7]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fdf1 	bl	80022f0 <ssd1306_WriteCommand>
}
 800270e:	bf00      	nop
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002728:	23af      	movs	r3, #175	@ 0xaf
 800272a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800272c:	4b08      	ldr	r3, [pc, #32]	@ (8002750 <ssd1306_SetDisplayOn+0x38>)
 800272e:	2201      	movs	r2, #1
 8002730:	715a      	strb	r2, [r3, #5]
 8002732:	e004      	b.n	800273e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002734:	23ae      	movs	r3, #174	@ 0xae
 8002736:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002738:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <ssd1306_SetDisplayOn+0x38>)
 800273a:	2200      	movs	r2, #0
 800273c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fdd5 	bl	80022f0 <ssd1306_WriteCommand>
}
 8002746:	bf00      	nop
 8002748:	3710      	adds	r7, #16
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	20000854 	.word	0x20000854

08002754 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
 800275e:	4b10      	ldr	r3, [pc, #64]	@ (80027a0 <HAL_MspInit+0x4c>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002762:	4a0f      	ldr	r2, [pc, #60]	@ (80027a0 <HAL_MspInit+0x4c>)
 8002764:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002768:	6453      	str	r3, [r2, #68]	@ 0x44
 800276a:	4b0d      	ldr	r3, [pc, #52]	@ (80027a0 <HAL_MspInit+0x4c>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800276e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <HAL_MspInit+0x4c>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	4a08      	ldr	r2, [pc, #32]	@ (80027a0 <HAL_MspInit+0x4c>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	@ 0x40
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_MspInit+0x4c>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278e:	603b      	str	r3, [r7, #0]
 8002790:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800

080027a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	@ 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a22      	ldr	r2, [pc, #136]	@ (800284c <HAL_I2C_MspInit+0xa8>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d13d      	bne.n	8002842 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	4b21      	ldr	r3, [pc, #132]	@ (8002850 <HAL_I2C_MspInit+0xac>)
 80027cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ce:	4a20      	ldr	r2, [pc, #128]	@ (8002850 <HAL_I2C_MspInit+0xac>)
 80027d0:	f043 0302 	orr.w	r3, r3, #2
 80027d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002850 <HAL_I2C_MspInit+0xac>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80027e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027e8:	2312      	movs	r3, #18
 80027ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f0:	2303      	movs	r3, #3
 80027f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027f4:	2304      	movs	r3, #4
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f8:	f107 0314 	add.w	r3, r7, #20
 80027fc:	4619      	mov	r1, r3
 80027fe:	4815      	ldr	r0, [pc, #84]	@ (8002854 <HAL_I2C_MspInit+0xb0>)
 8002800:	f000 fdfc 	bl	80033fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Audio_SDA_Pin;
 8002804:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800280a:	2312      	movs	r3, #18
 800280c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002816:	2304      	movs	r3, #4
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 800281a:	f107 0314 	add.w	r3, r7, #20
 800281e:	4619      	mov	r1, r3
 8002820:	480c      	ldr	r0, [pc, #48]	@ (8002854 <HAL_I2C_MspInit+0xb0>)
 8002822:	f000 fdeb 	bl	80033fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60fb      	str	r3, [r7, #12]
 800282a:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <HAL_I2C_MspInit+0xac>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	4a08      	ldr	r2, [pc, #32]	@ (8002850 <HAL_I2C_MspInit+0xac>)
 8002830:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002834:	6413      	str	r3, [r2, #64]	@ 0x40
 8002836:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <HAL_I2C_MspInit+0xac>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002842:	bf00      	nop
 8002844:	3728      	adds	r7, #40	@ 0x28
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	40005400 	.word	0x40005400
 8002850:	40023800 	.word	0x40023800
 8002854:	40020400 	.word	0x40020400

08002858 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b090      	sub	sp, #64	@ 0x40
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002860:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
 8002868:	605a      	str	r2, [r3, #4]
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	60da      	str	r2, [r3, #12]
 800286e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a74      	ldr	r2, [pc, #464]	@ (8002a48 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d12d      	bne.n	80028d6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800287e:	4b73      	ldr	r3, [pc, #460]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002882:	4a72      	ldr	r2, [pc, #456]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6453      	str	r3, [r2, #68]	@ 0x44
 800288a:	4b70      	ldr	r3, [pc, #448]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002894:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	@ 0x24
 800289a:	4b6c      	ldr	r3, [pc, #432]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	4a6b      	ldr	r2, [pc, #428]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80028a0:	f043 0310 	orr.w	r3, r3, #16
 80028a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a6:	4b69      	ldr	r3, [pc, #420]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028aa:	f003 0310 	and.w	r3, r3, #16
 80028ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80028b2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80028b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b8:	2302      	movs	r3, #2
 80028ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028bc:	2300      	movs	r3, #0
 80028be:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c0:	2300      	movs	r3, #0
 80028c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80028c4:	2301      	movs	r3, #1
 80028c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80028c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028cc:	4619      	mov	r1, r3
 80028ce:	4860      	ldr	r0, [pc, #384]	@ (8002a50 <HAL_TIM_Encoder_MspInit+0x1f8>)
 80028d0:	f000 fd94 	bl	80033fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80028d4:	e0b3      	b.n	8002a3e <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(htim_encoder->Instance==TIM2)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028de:	d14b      	bne.n	8002978 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028e0:	2300      	movs	r3, #0
 80028e2:	623b      	str	r3, [r7, #32]
 80028e4:	4b59      	ldr	r3, [pc, #356]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80028e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e8:	4a58      	ldr	r2, [pc, #352]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80028ea:	f043 0301 	orr.w	r3, r3, #1
 80028ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80028f0:	4b56      	ldr	r3, [pc, #344]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80028f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	623b      	str	r3, [r7, #32]
 80028fa:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028fc:	2300      	movs	r3, #0
 80028fe:	61fb      	str	r3, [r7, #28]
 8002900:	4b52      	ldr	r3, [pc, #328]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002904:	4a51      	ldr	r2, [pc, #324]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6313      	str	r3, [r2, #48]	@ 0x30
 800290c:	4b4f      	ldr	r3, [pc, #316]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 800290e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002918:	2300      	movs	r3, #0
 800291a:	61bb      	str	r3, [r7, #24]
 800291c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002920:	4a4a      	ldr	r2, [pc, #296]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002922:	f043 0302 	orr.w	r3, r3, #2
 8002926:	6313      	str	r3, [r2, #48]	@ 0x30
 8002928:	4b48      	ldr	r3, [pc, #288]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002934:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002938:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293a:	2302      	movs	r3, #2
 800293c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002942:	2300      	movs	r3, #0
 8002944:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002946:	2301      	movs	r3, #1
 8002948:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800294a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800294e:	4619      	mov	r1, r3
 8002950:	4840      	ldr	r0, [pc, #256]	@ (8002a54 <HAL_TIM_Encoder_MspInit+0x1fc>)
 8002952:	f000 fd53 	bl	80033fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002956:	2308      	movs	r3, #8
 8002958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800295a:	2302      	movs	r3, #2
 800295c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800295e:	2300      	movs	r3, #0
 8002960:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002962:	2300      	movs	r3, #0
 8002964:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002966:	2301      	movs	r3, #1
 8002968:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800296a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800296e:	4619      	mov	r1, r3
 8002970:	4839      	ldr	r0, [pc, #228]	@ (8002a58 <HAL_TIM_Encoder_MspInit+0x200>)
 8002972:	f000 fd43 	bl	80033fc <HAL_GPIO_Init>
}
 8002976:	e062      	b.n	8002a3e <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(htim_encoder->Instance==TIM5)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a37      	ldr	r2, [pc, #220]	@ (8002a5c <HAL_TIM_Encoder_MspInit+0x204>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d12c      	bne.n	80029dc <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	4b31      	ldr	r3, [pc, #196]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	4a30      	ldr	r2, [pc, #192]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	6413      	str	r3, [r2, #64]	@ 0x40
 8002992:	4b2e      	ldr	r3, [pc, #184]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800299e:	2300      	movs	r3, #0
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	4b2a      	ldr	r3, [pc, #168]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a6:	4a29      	ldr	r2, [pc, #164]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80029a8:	f043 0301 	orr.w	r3, r3, #1
 80029ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ae:	4b27      	ldr	r3, [pc, #156]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	f003 0301 	and.w	r3, r3, #1
 80029b6:	613b      	str	r3, [r7, #16]
 80029b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029ba:	2303      	movs	r3, #3
 80029bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029be:	2302      	movs	r3, #2
 80029c0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c2:	2300      	movs	r3, #0
 80029c4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c6:	2300      	movs	r3, #0
 80029c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029ca:	2302      	movs	r3, #2
 80029cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029d2:	4619      	mov	r1, r3
 80029d4:	481f      	ldr	r0, [pc, #124]	@ (8002a54 <HAL_TIM_Encoder_MspInit+0x1fc>)
 80029d6:	f000 fd11 	bl	80033fc <HAL_GPIO_Init>
}
 80029da:	e030      	b.n	8002a3e <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(htim_encoder->Instance==TIM8)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1f      	ldr	r2, [pc, #124]	@ (8002a60 <HAL_TIM_Encoder_MspInit+0x208>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d12b      	bne.n	8002a3e <HAL_TIM_Encoder_MspInit+0x1e6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b18      	ldr	r3, [pc, #96]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ee:	4a17      	ldr	r2, [pc, #92]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029f6:	4b15      	ldr	r3, [pc, #84]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	60bb      	str	r3, [r7, #8]
 8002a06:	4b11      	ldr	r3, [pc, #68]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	4a10      	ldr	r2, [pc, #64]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a12:	4b0e      	ldr	r3, [pc, #56]	@ (8002a4c <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a1e:	23c0      	movs	r3, #192	@ 0xc0
 8002a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a22:	2302      	movs	r3, #2
 8002a24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a26:	2300      	movs	r3, #0
 8002a28:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a36:	4619      	mov	r1, r3
 8002a38:	480a      	ldr	r0, [pc, #40]	@ (8002a64 <HAL_TIM_Encoder_MspInit+0x20c>)
 8002a3a:	f000 fcdf 	bl	80033fc <HAL_GPIO_Init>
}
 8002a3e:	bf00      	nop
 8002a40:	3740      	adds	r7, #64	@ 0x40
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40010000 	.word	0x40010000
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40021000 	.word	0x40021000
 8002a54:	40020000 	.word	0x40020000
 8002a58:	40020400 	.word	0x40020400
 8002a5c:	40000c00 	.word	0x40000c00
 8002a60:	40010400 	.word	0x40010400
 8002a64:	40020800 	.word	0x40020800

08002a68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b085      	sub	sp, #20
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a15      	ldr	r2, [pc, #84]	@ (8002acc <HAL_TIM_Base_MspInit+0x64>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d10e      	bne.n	8002a98 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	4b14      	ldr	r3, [pc, #80]	@ (8002ad0 <HAL_TIM_Base_MspInit+0x68>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	4a13      	ldr	r2, [pc, #76]	@ (8002ad0 <HAL_TIM_Base_MspInit+0x68>)
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a8a:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <HAL_TIM_Base_MspInit+0x68>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a96:	e012      	b.n	8002abe <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM4)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad4 <HAL_TIM_Base_MspInit+0x6c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d10d      	bne.n	8002abe <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad0 <HAL_TIM_Base_MspInit+0x68>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aaa:	4a09      	ldr	r2, [pc, #36]	@ (8002ad0 <HAL_TIM_Base_MspInit+0x68>)
 8002aac:	f043 0304 	orr.w	r3, r3, #4
 8002ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ab2:	4b07      	ldr	r3, [pc, #28]	@ (8002ad0 <HAL_TIM_Base_MspInit+0x68>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab6:	f003 0304 	and.w	r3, r3, #4
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
}
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40000800 	.word	0x40000800

08002ad8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08a      	sub	sp, #40	@ 0x28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 0314 	add.w	r3, r7, #20
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a24      	ldr	r2, [pc, #144]	@ (8002b88 <HAL_TIM_MspPostInit+0xb0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d11e      	bne.n	8002b38 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
 8002afe:	4b23      	ldr	r3, [pc, #140]	@ (8002b8c <HAL_TIM_MspPostInit+0xb4>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b02:	4a22      	ldr	r2, [pc, #136]	@ (8002b8c <HAL_TIM_MspPostInit+0xb4>)
 8002b04:	f043 0301 	orr.w	r3, r3, #1
 8002b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b0a:	4b20      	ldr	r3, [pc, #128]	@ (8002b8c <HAL_TIM_MspPostInit+0xb4>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	613b      	str	r3, [r7, #16]
 8002b14:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b16:	23c0      	movs	r3, #192	@ 0xc0
 8002b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b26:	2302      	movs	r3, #2
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2a:	f107 0314 	add.w	r3, r7, #20
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4817      	ldr	r0, [pc, #92]	@ (8002b90 <HAL_TIM_MspPostInit+0xb8>)
 8002b32:	f000 fc63 	bl	80033fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002b36:	e022      	b.n	8002b7e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a15      	ldr	r2, [pc, #84]	@ (8002b94 <HAL_TIM_MspPostInit+0xbc>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d11d      	bne.n	8002b7e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <HAL_TIM_MspPostInit+0xb4>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	4a10      	ldr	r2, [pc, #64]	@ (8002b8c <HAL_TIM_MspPostInit+0xb4>)
 8002b4c:	f043 0302 	orr.w	r3, r3, #2
 8002b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b52:	4b0e      	ldr	r3, [pc, #56]	@ (8002b8c <HAL_TIM_MspPostInit+0xb4>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b5e:	23c0      	movs	r3, #192	@ 0xc0
 8002b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b62:	2302      	movs	r3, #2
 8002b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002b6e:	2302      	movs	r3, #2
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b72:	f107 0314 	add.w	r3, r7, #20
 8002b76:	4619      	mov	r1, r3
 8002b78:	4807      	ldr	r0, [pc, #28]	@ (8002b98 <HAL_TIM_MspPostInit+0xc0>)
 8002b7a:	f000 fc3f 	bl	80033fc <HAL_GPIO_Init>
}
 8002b7e:	bf00      	nop
 8002b80:	3728      	adds	r7, #40	@ 0x28
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40020000 	.word	0x40020000
 8002b94:	40000800 	.word	0x40000800
 8002b98:	40020400 	.word	0x40020400

08002b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b08c      	sub	sp, #48	@ 0x30
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ba4:	f107 031c 	add.w	r3, r7, #28
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a46      	ldr	r2, [pc, #280]	@ (8002cd4 <HAL_UART_MspInit+0x138>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d134      	bne.n	8002c28 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	61bb      	str	r3, [r7, #24]
 8002bc2:	4b45      	ldr	r3, [pc, #276]	@ (8002cd8 <HAL_UART_MspInit+0x13c>)
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc6:	4a44      	ldr	r2, [pc, #272]	@ (8002cd8 <HAL_UART_MspInit+0x13c>)
 8002bc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bce:	4b42      	ldr	r3, [pc, #264]	@ (8002cd8 <HAL_UART_MspInit+0x13c>)
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	617b      	str	r3, [r7, #20]
 8002bde:	4b3e      	ldr	r3, [pc, #248]	@ (8002cd8 <HAL_UART_MspInit+0x13c>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be2:	4a3d      	ldr	r2, [pc, #244]	@ (8002cd8 <HAL_UART_MspInit+0x13c>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bea:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd8 <HAL_UART_MspInit+0x13c>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bee:	f003 0301 	and.w	r3, r3, #1
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bf6:	230c      	movs	r3, #12
 8002bf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c02:	2303      	movs	r3, #3
 8002c04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c06:	2307      	movs	r3, #7
 8002c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0a:	f107 031c 	add.w	r3, r7, #28
 8002c0e:	4619      	mov	r1, r3
 8002c10:	4832      	ldr	r0, [pc, #200]	@ (8002cdc <HAL_UART_MspInit+0x140>)
 8002c12:	f000 fbf3 	bl	80033fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002c16:	2200      	movs	r2, #0
 8002c18:	2100      	movs	r1, #0
 8002c1a:	2026      	movs	r0, #38	@ 0x26
 8002c1c:	f000 fb32 	bl	8003284 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c20:	2026      	movs	r0, #38	@ 0x26
 8002c22:	f000 fb4b 	bl	80032bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c26:	e050      	b.n	8002cca <HAL_UART_MspInit+0x12e>
  else if(huart->Instance==USART3)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ce0 <HAL_UART_MspInit+0x144>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d14b      	bne.n	8002cca <HAL_UART_MspInit+0x12e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
 8002c36:	4b28      	ldr	r3, [pc, #160]	@ (8002cd8 <HAL_UART_MspInit+0x13c>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	4a27      	ldr	r2, [pc, #156]	@ (8002cd8 <HAL_UART_MspInit+0x13c>)
 8002c3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c42:	4b25      	ldr	r3, [pc, #148]	@ (8002cd8 <HAL_UART_MspInit+0x13c>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c4a:	613b      	str	r3, [r7, #16]
 8002c4c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]
 8002c52:	4b21      	ldr	r3, [pc, #132]	@ (8002cd8 <HAL_UART_MspInit+0x13c>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c56:	4a20      	ldr	r2, [pc, #128]	@ (8002cd8 <HAL_UART_MspInit+0x13c>)
 8002c58:	f043 0302 	orr.w	r3, r3, #2
 8002c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd8 <HAL_UART_MspInit+0x13c>)
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
 8002c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cd8 <HAL_UART_MspInit+0x13c>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c72:	4a19      	ldr	r2, [pc, #100]	@ (8002cd8 <HAL_UART_MspInit+0x13c>)
 8002c74:	f043 0308 	orr.w	r3, r3, #8
 8002c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c7a:	4b17      	ldr	r3, [pc, #92]	@ (8002cd8 <HAL_UART_MspInit+0x13c>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7e:	f003 0308 	and.w	r3, r3, #8
 8002c82:	60bb      	str	r3, [r7, #8]
 8002c84:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002c86:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c90:	2300      	movs	r3, #0
 8002c92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c94:	2303      	movs	r3, #3
 8002c96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002c98:	2307      	movs	r3, #7
 8002c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c9c:	f107 031c 	add.w	r3, r7, #28
 8002ca0:	4619      	mov	r1, r3
 8002ca2:	4810      	ldr	r0, [pc, #64]	@ (8002ce4 <HAL_UART_MspInit+0x148>)
 8002ca4:	f000 fbaa 	bl	80033fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ca8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cae:	2302      	movs	r3, #2
 8002cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002cba:	2307      	movs	r3, #7
 8002cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cbe:	f107 031c 	add.w	r3, r7, #28
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4808      	ldr	r0, [pc, #32]	@ (8002ce8 <HAL_UART_MspInit+0x14c>)
 8002cc6:	f000 fb99 	bl	80033fc <HAL_GPIO_Init>
}
 8002cca:	bf00      	nop
 8002ccc:	3730      	adds	r7, #48	@ 0x30
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40004400 	.word	0x40004400
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40020000 	.word	0x40020000
 8002ce0:	40004800 	.word	0x40004800
 8002ce4:	40020400 	.word	0x40020400
 8002ce8:	40020c00 	.word	0x40020c00

08002cec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08e      	sub	sp, #56	@ 0x38
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	60fb      	str	r3, [r7, #12]
 8002d00:	4b33      	ldr	r3, [pc, #204]	@ (8002dd0 <HAL_InitTick+0xe4>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d04:	4a32      	ldr	r2, [pc, #200]	@ (8002dd0 <HAL_InitTick+0xe4>)
 8002d06:	f043 0320 	orr.w	r3, r3, #32
 8002d0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d0c:	4b30      	ldr	r3, [pc, #192]	@ (8002dd0 <HAL_InitTick+0xe4>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002d18:	f107 0210 	add.w	r2, r7, #16
 8002d1c:	f107 0314 	add.w	r3, r7, #20
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f001 fe7e 	bl	8004a24 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d103      	bne.n	8002d3a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002d32:	f001 fe4f 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 8002d36:	6378      	str	r0, [r7, #52]	@ 0x34
 8002d38:	e004      	b.n	8002d44 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002d3a:	f001 fe4b 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d46:	4a23      	ldr	r2, [pc, #140]	@ (8002dd4 <HAL_InitTick+0xe8>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	0c9b      	lsrs	r3, r3, #18
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002d52:	4b21      	ldr	r3, [pc, #132]	@ (8002dd8 <HAL_InitTick+0xec>)
 8002d54:	4a21      	ldr	r2, [pc, #132]	@ (8002ddc <HAL_InitTick+0xf0>)
 8002d56:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002d58:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd8 <HAL_InitTick+0xec>)
 8002d5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002d5e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002d60:	4a1d      	ldr	r2, [pc, #116]	@ (8002dd8 <HAL_InitTick+0xec>)
 8002d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d64:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002d66:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd8 <HAL_InitTick+0xec>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd8 <HAL_InitTick+0xec>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d72:	4b19      	ldr	r3, [pc, #100]	@ (8002dd8 <HAL_InitTick+0xec>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8002d78:	4817      	ldr	r0, [pc, #92]	@ (8002dd8 <HAL_InitTick+0xec>)
 8002d7a:	f001 fe85 	bl	8004a88 <HAL_TIM_Base_Init>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002d84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d11b      	bne.n	8002dc4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8002d8c:	4812      	ldr	r0, [pc, #72]	@ (8002dd8 <HAL_InitTick+0xec>)
 8002d8e:	f001 fecb 	bl	8004b28 <HAL_TIM_Base_Start_IT>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002d98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d111      	bne.n	8002dc4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002da0:	2037      	movs	r0, #55	@ 0x37
 8002da2:	f000 fa8b 	bl	80032bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b0f      	cmp	r3, #15
 8002daa:	d808      	bhi.n	8002dbe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8002dac:	2200      	movs	r2, #0
 8002dae:	6879      	ldr	r1, [r7, #4]
 8002db0:	2037      	movs	r0, #55	@ 0x37
 8002db2:	f000 fa67 	bl	8003284 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002db6:	4a0a      	ldr	r2, [pc, #40]	@ (8002de0 <HAL_InitTick+0xf4>)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	e002      	b.n	8002dc4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002dc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3738      	adds	r7, #56	@ 0x38
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	40023800 	.word	0x40023800
 8002dd4:	431bde83 	.word	0x431bde83
 8002dd8:	2000085c 	.word	0x2000085c
 8002ddc:	40001400 	.word	0x40001400
 8002de0:	20000008 	.word	0x20000008

08002de4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002de8:	bf00      	nop
 8002dea:	e7fd      	b.n	8002de8 <NMI_Handler+0x4>

08002dec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002df0:	bf00      	nop
 8002df2:	e7fd      	b.n	8002df0 <HardFault_Handler+0x4>

08002df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002df8:	bf00      	nop
 8002dfa:	e7fd      	b.n	8002df8 <MemManage_Handler+0x4>

08002dfc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e00:	bf00      	nop
 8002e02:	e7fd      	b.n	8002e00 <BusFault_Handler+0x4>

08002e04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <UsageFault_Handler+0x4>

08002e0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e10:	bf00      	nop
 8002e12:	46bd      	mov	sp, r7
 8002e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e18:	4770      	bx	lr
	...

08002e1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002e20:	4802      	ldr	r0, [pc, #8]	@ (8002e2c <USART2_IRQHandler+0x10>)
 8002e22:	f003 f88f 	bl	8005f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	200003fc 	.word	0x200003fc

08002e30 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002e34:	4802      	ldr	r0, [pc, #8]	@ (8002e40 <TIM7_IRQHandler+0x10>)
 8002e36:	f002 f93d 	bl	80050b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	2000085c 	.word	0x2000085c

08002e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  return 1;
 8002e48:	2301      	movs	r3, #1
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <_kill>:

int _kill(int pid, int sig)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002e5e:	f006 ff57 	bl	8009d10 <__errno>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2216      	movs	r2, #22
 8002e66:	601a      	str	r2, [r3, #0]
  return -1;
 8002e68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <_exit>:

void _exit (int status)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f7ff ffe7 	bl	8002e54 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e86:	bf00      	nop
 8002e88:	e7fd      	b.n	8002e86 <_exit+0x12>

08002e8a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b086      	sub	sp, #24
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	60f8      	str	r0, [r7, #12]
 8002e92:	60b9      	str	r1, [r7, #8]
 8002e94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	e00a      	b.n	8002eb2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e9c:	f3af 8000 	nop.w
 8002ea0:	4601      	mov	r1, r0
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	60ba      	str	r2, [r7, #8]
 8002ea8:	b2ca      	uxtb	r2, r1
 8002eaa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	617b      	str	r3, [r7, #20]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	dbf0      	blt.n	8002e9c <_read+0x12>
  }

  return len;
 8002eba:	687b      	ldr	r3, [r7, #4]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3718      	adds	r7, #24
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	e009      	b.n	8002eea <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	1c5a      	adds	r2, r3, #1
 8002eda:	60ba      	str	r2, [r7, #8]
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	617b      	str	r3, [r7, #20]
 8002eea:	697a      	ldr	r2, [r7, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	dbf1      	blt.n	8002ed6 <_write+0x12>
  }
  return len;
 8002ef2:	687b      	ldr	r3, [r7, #4]
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <_close>:

int _close(int file)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002f04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002f24:	605a      	str	r2, [r3, #4]
  return 0;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <_isatty>:

int _isatty(int file)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002f3c:	2301      	movs	r3, #1
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b085      	sub	sp, #20
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	60f8      	str	r0, [r7, #12]
 8002f52:	60b9      	str	r1, [r7, #8]
 8002f54:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f6c:	4a14      	ldr	r2, [pc, #80]	@ (8002fc0 <_sbrk+0x5c>)
 8002f6e:	4b15      	ldr	r3, [pc, #84]	@ (8002fc4 <_sbrk+0x60>)
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f78:	4b13      	ldr	r3, [pc, #76]	@ (8002fc8 <_sbrk+0x64>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d102      	bne.n	8002f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f80:	4b11      	ldr	r3, [pc, #68]	@ (8002fc8 <_sbrk+0x64>)
 8002f82:	4a12      	ldr	r2, [pc, #72]	@ (8002fcc <_sbrk+0x68>)
 8002f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f86:	4b10      	ldr	r3, [pc, #64]	@ (8002fc8 <_sbrk+0x64>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d207      	bcs.n	8002fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f94:	f006 febc 	bl	8009d10 <__errno>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	220c      	movs	r2, #12
 8002f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8002fa2:	e009      	b.n	8002fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fa4:	4b08      	ldr	r3, [pc, #32]	@ (8002fc8 <_sbrk+0x64>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002faa:	4b07      	ldr	r3, [pc, #28]	@ (8002fc8 <_sbrk+0x64>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	4a05      	ldr	r2, [pc, #20]	@ (8002fc8 <_sbrk+0x64>)
 8002fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20020000 	.word	0x20020000
 8002fc4:	00000400 	.word	0x00000400
 8002fc8:	200008a4 	.word	0x200008a4
 8002fcc:	20013798 	.word	0x20013798

08002fd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fd4:	4b06      	ldr	r3, [pc, #24]	@ (8002ff0 <SystemInit+0x20>)
 8002fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fda:	4a05      	ldr	r2, [pc, #20]	@ (8002ff0 <SystemInit+0x20>)
 8002fdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002fe0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	e000ed00 	.word	0xe000ed00

08002ff4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002ff4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800302c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002ff8:	f7ff ffea 	bl	8002fd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ffc:	480c      	ldr	r0, [pc, #48]	@ (8003030 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ffe:	490d      	ldr	r1, [pc, #52]	@ (8003034 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003000:	4a0d      	ldr	r2, [pc, #52]	@ (8003038 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003002:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003004:	e002      	b.n	800300c <LoopCopyDataInit>

08003006 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003006:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003008:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800300a:	3304      	adds	r3, #4

0800300c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800300c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800300e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003010:	d3f9      	bcc.n	8003006 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003012:	4a0a      	ldr	r2, [pc, #40]	@ (800303c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003014:	4c0a      	ldr	r4, [pc, #40]	@ (8003040 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003016:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003018:	e001      	b.n	800301e <LoopFillZerobss>

0800301a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800301a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800301c:	3204      	adds	r2, #4

0800301e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800301e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003020:	d3fb      	bcc.n	800301a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003022:	f006 fe7b 	bl	8009d1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003026:	f7fe fc01 	bl	800182c <main>
  bx  lr    
 800302a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800302c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003030:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003034:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003038:	0800e034 	.word	0x0800e034
  ldr r2, =_sbss
 800303c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003040:	20013798 	.word	0x20013798

08003044 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003044:	e7fe      	b.n	8003044 <ADC_IRQHandler>
	...

08003048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800304c:	4b0e      	ldr	r3, [pc, #56]	@ (8003088 <HAL_Init+0x40>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a0d      	ldr	r2, [pc, #52]	@ (8003088 <HAL_Init+0x40>)
 8003052:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003056:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003058:	4b0b      	ldr	r3, [pc, #44]	@ (8003088 <HAL_Init+0x40>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a0a      	ldr	r2, [pc, #40]	@ (8003088 <HAL_Init+0x40>)
 800305e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003062:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003064:	4b08      	ldr	r3, [pc, #32]	@ (8003088 <HAL_Init+0x40>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a07      	ldr	r2, [pc, #28]	@ (8003088 <HAL_Init+0x40>)
 800306a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800306e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003070:	2003      	movs	r0, #3
 8003072:	f000 f8fc 	bl	800326e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003076:	200f      	movs	r0, #15
 8003078:	f7ff fe38 	bl	8002cec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800307c:	f7ff fb6a 	bl	8002754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40023c00 	.word	0x40023c00

0800308c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003090:	4b06      	ldr	r3, [pc, #24]	@ (80030ac <HAL_IncTick+0x20>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <HAL_IncTick+0x24>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4413      	add	r3, r2
 800309c:	4a04      	ldr	r2, [pc, #16]	@ (80030b0 <HAL_IncTick+0x24>)
 800309e:	6013      	str	r3, [r2, #0]
}
 80030a0:	bf00      	nop
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	2000000c 	.word	0x2000000c
 80030b0:	200008a8 	.word	0x200008a8

080030b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return uwTick;
 80030b8:	4b03      	ldr	r3, [pc, #12]	@ (80030c8 <HAL_GetTick+0x14>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	200008a8 	.word	0x200008a8

080030cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030d4:	f7ff ffee 	bl	80030b4 <HAL_GetTick>
 80030d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d005      	beq.n	80030f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003110 <HAL_Delay+0x44>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4413      	add	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030f2:	bf00      	nop
 80030f4:	f7ff ffde 	bl	80030b4 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	429a      	cmp	r2, r3
 8003102:	d8f7      	bhi.n	80030f4 <HAL_Delay+0x28>
  {
  }
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	2000000c 	.word	0x2000000c

08003114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f003 0307 	and.w	r3, r3, #7
 8003122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003124:	4b0c      	ldr	r3, [pc, #48]	@ (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003130:	4013      	ands	r3, r2
 8003132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800313c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003146:	4a04      	ldr	r2, [pc, #16]	@ (8003158 <__NVIC_SetPriorityGrouping+0x44>)
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	60d3      	str	r3, [r2, #12]
}
 800314c:	bf00      	nop
 800314e:	3714      	adds	r7, #20
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	e000ed00 	.word	0xe000ed00

0800315c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003160:	4b04      	ldr	r3, [pc, #16]	@ (8003174 <__NVIC_GetPriorityGrouping+0x18>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 0307 	and.w	r3, r3, #7
}
 800316a:	4618      	mov	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003186:	2b00      	cmp	r3, #0
 8003188:	db0b      	blt.n	80031a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800318a:	79fb      	ldrb	r3, [r7, #7]
 800318c:	f003 021f 	and.w	r2, r3, #31
 8003190:	4907      	ldr	r1, [pc, #28]	@ (80031b0 <__NVIC_EnableIRQ+0x38>)
 8003192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003196:	095b      	lsrs	r3, r3, #5
 8003198:	2001      	movs	r0, #1
 800319a:	fa00 f202 	lsl.w	r2, r0, r2
 800319e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	e000e100 	.word	0xe000e100

080031b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	4603      	mov	r3, r0
 80031bc:	6039      	str	r1, [r7, #0]
 80031be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	db0a      	blt.n	80031de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	b2da      	uxtb	r2, r3
 80031cc:	490c      	ldr	r1, [pc, #48]	@ (8003200 <__NVIC_SetPriority+0x4c>)
 80031ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d2:	0112      	lsls	r2, r2, #4
 80031d4:	b2d2      	uxtb	r2, r2
 80031d6:	440b      	add	r3, r1
 80031d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031dc:	e00a      	b.n	80031f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	4908      	ldr	r1, [pc, #32]	@ (8003204 <__NVIC_SetPriority+0x50>)
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	3b04      	subs	r3, #4
 80031ec:	0112      	lsls	r2, r2, #4
 80031ee:	b2d2      	uxtb	r2, r2
 80031f0:	440b      	add	r3, r1
 80031f2:	761a      	strb	r2, [r3, #24]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	e000e100 	.word	0xe000e100
 8003204:	e000ed00 	.word	0xe000ed00

08003208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003208:	b480      	push	{r7}
 800320a:	b089      	sub	sp, #36	@ 0x24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f1c3 0307 	rsb	r3, r3, #7
 8003222:	2b04      	cmp	r3, #4
 8003224:	bf28      	it	cs
 8003226:	2304      	movcs	r3, #4
 8003228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3304      	adds	r3, #4
 800322e:	2b06      	cmp	r3, #6
 8003230:	d902      	bls.n	8003238 <NVIC_EncodePriority+0x30>
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	3b03      	subs	r3, #3
 8003236:	e000      	b.n	800323a <NVIC_EncodePriority+0x32>
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	f04f 32ff 	mov.w	r2, #4294967295
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	fa02 f303 	lsl.w	r3, r2, r3
 8003246:	43da      	mvns	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	401a      	ands	r2, r3
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003250:	f04f 31ff 	mov.w	r1, #4294967295
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa01 f303 	lsl.w	r3, r1, r3
 800325a:	43d9      	mvns	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003260:	4313      	orrs	r3, r2
         );
}
 8003262:	4618      	mov	r0, r3
 8003264:	3724      	adds	r7, #36	@ 0x24
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b082      	sub	sp, #8
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f7ff ff4c 	bl	8003114 <__NVIC_SetPriorityGrouping>
}
 800327c:	bf00      	nop
 800327e:	3708      	adds	r7, #8
 8003280:	46bd      	mov	sp, r7
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003296:	f7ff ff61 	bl	800315c <__NVIC_GetPriorityGrouping>
 800329a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	68b9      	ldr	r1, [r7, #8]
 80032a0:	6978      	ldr	r0, [r7, #20]
 80032a2:	f7ff ffb1 	bl	8003208 <NVIC_EncodePriority>
 80032a6:	4602      	mov	r2, r0
 80032a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff ff80 	bl	80031b4 <__NVIC_SetPriority>
}
 80032b4:	bf00      	nop
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff ff54 	bl	8003178 <__NVIC_EnableIRQ>
}
 80032d0:	bf00      	nop
 80032d2:	3708      	adds	r7, #8
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}

080032d8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80032e6:	f7ff fee5 	bl	80030b4 <HAL_GetTick>
 80032ea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d008      	beq.n	800330a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e052      	b.n	80033b0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0216 	bic.w	r2, r2, #22
 8003318:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003328:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	2b00      	cmp	r3, #0
 8003330:	d103      	bne.n	800333a <HAL_DMA_Abort+0x62>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003336:	2b00      	cmp	r3, #0
 8003338:	d007      	beq.n	800334a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0208 	bic.w	r2, r2, #8
 8003348:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f022 0201 	bic.w	r2, r2, #1
 8003358:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800335a:	e013      	b.n	8003384 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800335c:	f7ff feaa 	bl	80030b4 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b05      	cmp	r3, #5
 8003368:	d90c      	bls.n	8003384 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2203      	movs	r2, #3
 8003374:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e015      	b.n	80033b0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e4      	bne.n	800335c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003396:	223f      	movs	r2, #63	@ 0x3f
 8003398:	409a      	lsls	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d004      	beq.n	80033d6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2280      	movs	r2, #128	@ 0x80
 80033d0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e00c      	b.n	80033f0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2205      	movs	r2, #5
 80033da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0201 	bic.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr

080033fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b089      	sub	sp, #36	@ 0x24
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003406:	2300      	movs	r3, #0
 8003408:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800340a:	2300      	movs	r3, #0
 800340c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800340e:	2300      	movs	r3, #0
 8003410:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
 8003416:	e16b      	b.n	80036f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003418:	2201      	movs	r2, #1
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4013      	ands	r3, r2
 800342a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	429a      	cmp	r2, r3
 8003432:	f040 815a 	bne.w	80036ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b01      	cmp	r3, #1
 8003440:	d005      	beq.n	800344e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800344a:	2b02      	cmp	r3, #2
 800344c:	d130      	bne.n	80034b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	2203      	movs	r2, #3
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	43db      	mvns	r3, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4013      	ands	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	68da      	ldr	r2, [r3, #12]
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4313      	orrs	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003484:	2201      	movs	r2, #1
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	091b      	lsrs	r3, r3, #4
 800349a:	f003 0201 	and.w	r2, r3, #1
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	fa02 f303 	lsl.w	r3, r2, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	f003 0303 	and.w	r3, r3, #3
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d017      	beq.n	80034ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	2203      	movs	r2, #3
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	005b      	lsls	r3, r3, #1
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f003 0303 	and.w	r3, r3, #3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d123      	bne.n	8003540 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	08da      	lsrs	r2, r3, #3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3208      	adds	r2, #8
 8003500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003504:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	220f      	movs	r2, #15
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	691a      	ldr	r2, [r3, #16]
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	08da      	lsrs	r2, r3, #3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	3208      	adds	r2, #8
 800353a:	69b9      	ldr	r1, [r7, #24]
 800353c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	005b      	lsls	r3, r3, #1
 800354a:	2203      	movs	r2, #3
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	43db      	mvns	r3, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4013      	ands	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 0203 	and.w	r2, r3, #3
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	fa02 f303 	lsl.w	r3, r2, r3
 8003568:	69ba      	ldr	r2, [r7, #24]
 800356a:	4313      	orrs	r3, r2
 800356c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800357c:	2b00      	cmp	r3, #0
 800357e:	f000 80b4 	beq.w	80036ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	4b60      	ldr	r3, [pc, #384]	@ (8003708 <HAL_GPIO_Init+0x30c>)
 8003588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358a:	4a5f      	ldr	r2, [pc, #380]	@ (8003708 <HAL_GPIO_Init+0x30c>)
 800358c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003590:	6453      	str	r3, [r2, #68]	@ 0x44
 8003592:	4b5d      	ldr	r3, [pc, #372]	@ (8003708 <HAL_GPIO_Init+0x30c>)
 8003594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003596:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800359e:	4a5b      	ldr	r2, [pc, #364]	@ (800370c <HAL_GPIO_Init+0x310>)
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	089b      	lsrs	r3, r3, #2
 80035a4:	3302      	adds	r3, #2
 80035a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	220f      	movs	r2, #15
 80035b6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	4013      	ands	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a52      	ldr	r2, [pc, #328]	@ (8003710 <HAL_GPIO_Init+0x314>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d02b      	beq.n	8003622 <HAL_GPIO_Init+0x226>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a51      	ldr	r2, [pc, #324]	@ (8003714 <HAL_GPIO_Init+0x318>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d025      	beq.n	800361e <HAL_GPIO_Init+0x222>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a50      	ldr	r2, [pc, #320]	@ (8003718 <HAL_GPIO_Init+0x31c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d01f      	beq.n	800361a <HAL_GPIO_Init+0x21e>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a4f      	ldr	r2, [pc, #316]	@ (800371c <HAL_GPIO_Init+0x320>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d019      	beq.n	8003616 <HAL_GPIO_Init+0x21a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003720 <HAL_GPIO_Init+0x324>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_GPIO_Init+0x216>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a4d      	ldr	r2, [pc, #308]	@ (8003724 <HAL_GPIO_Init+0x328>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00d      	beq.n	800360e <HAL_GPIO_Init+0x212>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a4c      	ldr	r2, [pc, #304]	@ (8003728 <HAL_GPIO_Init+0x32c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d007      	beq.n	800360a <HAL_GPIO_Init+0x20e>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a4b      	ldr	r2, [pc, #300]	@ (800372c <HAL_GPIO_Init+0x330>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d101      	bne.n	8003606 <HAL_GPIO_Init+0x20a>
 8003602:	2307      	movs	r3, #7
 8003604:	e00e      	b.n	8003624 <HAL_GPIO_Init+0x228>
 8003606:	2308      	movs	r3, #8
 8003608:	e00c      	b.n	8003624 <HAL_GPIO_Init+0x228>
 800360a:	2306      	movs	r3, #6
 800360c:	e00a      	b.n	8003624 <HAL_GPIO_Init+0x228>
 800360e:	2305      	movs	r3, #5
 8003610:	e008      	b.n	8003624 <HAL_GPIO_Init+0x228>
 8003612:	2304      	movs	r3, #4
 8003614:	e006      	b.n	8003624 <HAL_GPIO_Init+0x228>
 8003616:	2303      	movs	r3, #3
 8003618:	e004      	b.n	8003624 <HAL_GPIO_Init+0x228>
 800361a:	2302      	movs	r3, #2
 800361c:	e002      	b.n	8003624 <HAL_GPIO_Init+0x228>
 800361e:	2301      	movs	r3, #1
 8003620:	e000      	b.n	8003624 <HAL_GPIO_Init+0x228>
 8003622:	2300      	movs	r3, #0
 8003624:	69fa      	ldr	r2, [r7, #28]
 8003626:	f002 0203 	and.w	r2, r2, #3
 800362a:	0092      	lsls	r2, r2, #2
 800362c:	4093      	lsls	r3, r2
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	4313      	orrs	r3, r2
 8003632:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003634:	4935      	ldr	r1, [pc, #212]	@ (800370c <HAL_GPIO_Init+0x310>)
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	089b      	lsrs	r3, r3, #2
 800363a:	3302      	adds	r3, #2
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003642:	4b3b      	ldr	r3, [pc, #236]	@ (8003730 <HAL_GPIO_Init+0x334>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	43db      	mvns	r3, r3
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	4013      	ands	r3, r2
 8003650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d003      	beq.n	8003666 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4313      	orrs	r3, r2
 8003664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003666:	4a32      	ldr	r2, [pc, #200]	@ (8003730 <HAL_GPIO_Init+0x334>)
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800366c:	4b30      	ldr	r3, [pc, #192]	@ (8003730 <HAL_GPIO_Init+0x334>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	43db      	mvns	r3, r3
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4013      	ands	r3, r2
 800367a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d003      	beq.n	8003690 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	4313      	orrs	r3, r2
 800368e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003690:	4a27      	ldr	r2, [pc, #156]	@ (8003730 <HAL_GPIO_Init+0x334>)
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003696:	4b26      	ldr	r3, [pc, #152]	@ (8003730 <HAL_GPIO_Init+0x334>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	43db      	mvns	r3, r3
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	4013      	ands	r3, r2
 80036a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003730 <HAL_GPIO_Init+0x334>)
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003730 <HAL_GPIO_Init+0x334>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	43db      	mvns	r3, r3
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	4013      	ands	r3, r2
 80036ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d003      	beq.n	80036e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e4:	4a12      	ldr	r2, [pc, #72]	@ (8003730 <HAL_GPIO_Init+0x334>)
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3301      	adds	r3, #1
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b0f      	cmp	r3, #15
 80036f4:	f67f ae90 	bls.w	8003418 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036f8:	bf00      	nop
 80036fa:	bf00      	nop
 80036fc:	3724      	adds	r7, #36	@ 0x24
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40023800 	.word	0x40023800
 800370c:	40013800 	.word	0x40013800
 8003710:	40020000 	.word	0x40020000
 8003714:	40020400 	.word	0x40020400
 8003718:	40020800 	.word	0x40020800
 800371c:	40020c00 	.word	0x40020c00
 8003720:	40021000 	.word	0x40021000
 8003724:	40021400 	.word	0x40021400
 8003728:	40021800 	.word	0x40021800
 800372c:	40021c00 	.word	0x40021c00
 8003730:	40013c00 	.word	0x40013c00

08003734 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	887b      	ldrh	r3, [r7, #2]
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	d002      	beq.n	8003752 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800374c:	2301      	movs	r3, #1
 800374e:	73fb      	strb	r3, [r7, #15]
 8003750:	e001      	b.n	8003756 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003756:	7bfb      	ldrb	r3, [r7, #15]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3714      	adds	r7, #20
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	807b      	strh	r3, [r7, #2]
 8003770:	4613      	mov	r3, r2
 8003772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003774:	787b      	ldrb	r3, [r7, #1]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003780:	e003      	b.n	800378a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003782:	887b      	ldrh	r3, [r7, #2]
 8003784:	041a      	lsls	r2, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	619a      	str	r2, [r3, #24]
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
	...

08003798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e12b      	b.n	8003a02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d106      	bne.n	80037c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f7fe fff0 	bl	80027a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2224      	movs	r2, #36	@ 0x24
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 0201 	bic.w	r2, r2, #1
 80037da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037fc:	f001 f8ea 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 8003800:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	4a81      	ldr	r2, [pc, #516]	@ (8003a0c <HAL_I2C_Init+0x274>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d807      	bhi.n	800381c <HAL_I2C_Init+0x84>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4a80      	ldr	r2, [pc, #512]	@ (8003a10 <HAL_I2C_Init+0x278>)
 8003810:	4293      	cmp	r3, r2
 8003812:	bf94      	ite	ls
 8003814:	2301      	movls	r3, #1
 8003816:	2300      	movhi	r3, #0
 8003818:	b2db      	uxtb	r3, r3
 800381a:	e006      	b.n	800382a <HAL_I2C_Init+0x92>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	4a7d      	ldr	r2, [pc, #500]	@ (8003a14 <HAL_I2C_Init+0x27c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	bf94      	ite	ls
 8003824:	2301      	movls	r3, #1
 8003826:	2300      	movhi	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e0e7      	b.n	8003a02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	4a78      	ldr	r2, [pc, #480]	@ (8003a18 <HAL_I2C_Init+0x280>)
 8003836:	fba2 2303 	umull	r2, r3, r2, r3
 800383a:	0c9b      	lsrs	r3, r3, #18
 800383c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	430a      	orrs	r2, r1
 8003850:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4a6a      	ldr	r2, [pc, #424]	@ (8003a0c <HAL_I2C_Init+0x274>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d802      	bhi.n	800386c <HAL_I2C_Init+0xd4>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	3301      	adds	r3, #1
 800386a:	e009      	b.n	8003880 <HAL_I2C_Init+0xe8>
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003872:	fb02 f303 	mul.w	r3, r2, r3
 8003876:	4a69      	ldr	r2, [pc, #420]	@ (8003a1c <HAL_I2C_Init+0x284>)
 8003878:	fba2 2303 	umull	r2, r3, r2, r3
 800387c:	099b      	lsrs	r3, r3, #6
 800387e:	3301      	adds	r3, #1
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6812      	ldr	r2, [r2, #0]
 8003884:	430b      	orrs	r3, r1
 8003886:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003892:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	495c      	ldr	r1, [pc, #368]	@ (8003a0c <HAL_I2C_Init+0x274>)
 800389c:	428b      	cmp	r3, r1
 800389e:	d819      	bhi.n	80038d4 <HAL_I2C_Init+0x13c>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1e59      	subs	r1, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	005b      	lsls	r3, r3, #1
 80038aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ae:	1c59      	adds	r1, r3, #1
 80038b0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80038b4:	400b      	ands	r3, r1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00a      	beq.n	80038d0 <HAL_I2C_Init+0x138>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1e59      	subs	r1, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ce:	e051      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 80038d0:	2304      	movs	r3, #4
 80038d2:	e04f      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d111      	bne.n	8003900 <HAL_I2C_Init+0x168>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e58      	subs	r0, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	440b      	add	r3, r1
 80038ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ee:	3301      	adds	r3, #1
 80038f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf0c      	ite	eq
 80038f8:	2301      	moveq	r3, #1
 80038fa:	2300      	movne	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	e012      	b.n	8003926 <HAL_I2C_Init+0x18e>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	1e58      	subs	r0, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6859      	ldr	r1, [r3, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	0099      	lsls	r1, r3, #2
 8003910:	440b      	add	r3, r1
 8003912:	fbb0 f3f3 	udiv	r3, r0, r3
 8003916:	3301      	adds	r3, #1
 8003918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800391c:	2b00      	cmp	r3, #0
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_Init+0x196>
 800392a:	2301      	movs	r3, #1
 800392c:	e022      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10e      	bne.n	8003954 <HAL_I2C_Init+0x1bc>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1e58      	subs	r0, r3, #1
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6859      	ldr	r1, [r3, #4]
 800393e:	460b      	mov	r3, r1
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	440b      	add	r3, r1
 8003944:	fbb0 f3f3 	udiv	r3, r0, r3
 8003948:	3301      	adds	r3, #1
 800394a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003952:	e00f      	b.n	8003974 <HAL_I2C_Init+0x1dc>
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	1e58      	subs	r0, r3, #1
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6859      	ldr	r1, [r3, #4]
 800395c:	460b      	mov	r3, r1
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	0099      	lsls	r1, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	fbb0 f3f3 	udiv	r3, r0, r3
 800396a:	3301      	adds	r3, #1
 800396c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003970:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	6809      	ldr	r1, [r1, #0]
 8003978:	4313      	orrs	r3, r2
 800397a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	69da      	ldr	r2, [r3, #28]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80039a2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6911      	ldr	r1, [r2, #16]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	68d2      	ldr	r2, [r2, #12]
 80039ae:	4311      	orrs	r1, r2
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	6812      	ldr	r2, [r2, #0]
 80039b4:	430b      	orrs	r3, r1
 80039b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	695a      	ldr	r2, [r3, #20]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0201 	orr.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	000186a0 	.word	0x000186a0
 8003a10:	001e847f 	.word	0x001e847f
 8003a14:	003d08ff 	.word	0x003d08ff
 8003a18:	431bde83 	.word	0x431bde83
 8003a1c:	10624dd3 	.word	0x10624dd3

08003a20 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b088      	sub	sp, #32
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	4608      	mov	r0, r1
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	817b      	strh	r3, [r7, #10]
 8003a32:	460b      	mov	r3, r1
 8003a34:	813b      	strh	r3, [r7, #8]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a3a:	f7ff fb3b 	bl	80030b4 <HAL_GetTick>
 8003a3e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	f040 80d9 	bne.w	8003c00 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	2319      	movs	r3, #25
 8003a54:	2201      	movs	r2, #1
 8003a56:	496d      	ldr	r1, [pc, #436]	@ (8003c0c <HAL_I2C_Mem_Write+0x1ec>)
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f971 	bl	8003d40 <I2C_WaitOnFlagUntilTimeout>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a64:	2302      	movs	r3, #2
 8003a66:	e0cc      	b.n	8003c02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_I2C_Mem_Write+0x56>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e0c5      	b.n	8003c02 <HAL_I2C_Mem_Write+0x1e2>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f003 0301 	and.w	r3, r3, #1
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d007      	beq.n	8003a9c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003aaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2221      	movs	r2, #33	@ 0x21
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2240      	movs	r2, #64	@ 0x40
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a3a      	ldr	r2, [r7, #32]
 8003ac6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003acc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ad2:	b29a      	uxth	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4a4d      	ldr	r2, [pc, #308]	@ (8003c10 <HAL_I2C_Mem_Write+0x1f0>)
 8003adc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ade:	88f8      	ldrh	r0, [r7, #6]
 8003ae0:	893a      	ldrh	r2, [r7, #8]
 8003ae2:	8979      	ldrh	r1, [r7, #10]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	9301      	str	r3, [sp, #4]
 8003ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	4603      	mov	r3, r0
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f890 	bl	8003c14 <I2C_RequestMemoryWrite>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d052      	beq.n	8003ba0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e081      	b.n	8003c02 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 fa36 	bl	8003f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00d      	beq.n	8003b2a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d107      	bne.n	8003b26 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e06b      	b.n	8003c02 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b2e:	781a      	ldrb	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b29a      	uxth	r2, r3
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b50:	b29b      	uxth	r3, r3
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d11b      	bne.n	8003ba0 <HAL_I2C_Mem_Write+0x180>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d017      	beq.n	8003ba0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b74:	781a      	ldrb	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1aa      	bne.n	8003afe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 fa29 	bl	8004004 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d107      	bne.n	8003bd0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bce:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e016      	b.n	8003c02 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e000      	b.n	8003c02 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c00:	2302      	movs	r3, #2
  }
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	00100002 	.word	0x00100002
 8003c10:	ffff0000 	.word	0xffff0000

08003c14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af02      	add	r7, sp, #8
 8003c1a:	60f8      	str	r0, [r7, #12]
 8003c1c:	4608      	mov	r0, r1
 8003c1e:	4611      	mov	r1, r2
 8003c20:	461a      	mov	r2, r3
 8003c22:	4603      	mov	r3, r0
 8003c24:	817b      	strh	r3, [r7, #10]
 8003c26:	460b      	mov	r3, r1
 8003c28:	813b      	strh	r3, [r7, #8]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	6a3b      	ldr	r3, [r7, #32]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f878 	bl	8003d40 <I2C_WaitOnFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00d      	beq.n	8003c72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c64:	d103      	bne.n	8003c6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e05f      	b.n	8003d32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c72:	897b      	ldrh	r3, [r7, #10]
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	461a      	mov	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003c80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c84:	6a3a      	ldr	r2, [r7, #32]
 8003c86:	492d      	ldr	r1, [pc, #180]	@ (8003d3c <I2C_RequestMemoryWrite+0x128>)
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f8d3 	bl	8003e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e04c      	b.n	8003d32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	617b      	str	r3, [r7, #20]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	617b      	str	r3, [r7, #20]
 8003cac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb0:	6a39      	ldr	r1, [r7, #32]
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 f95e 	bl	8003f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00d      	beq.n	8003cda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d107      	bne.n	8003cd6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003cd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e02b      	b.n	8003d32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cda:	88fb      	ldrh	r3, [r7, #6]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d105      	bne.n	8003cec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ce0:	893b      	ldrh	r3, [r7, #8]
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	611a      	str	r2, [r3, #16]
 8003cea:	e021      	b.n	8003d30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cec:	893b      	ldrh	r3, [r7, #8]
 8003cee:	0a1b      	lsrs	r3, r3, #8
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cfc:	6a39      	ldr	r1, [r7, #32]
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f938 	bl	8003f74 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00d      	beq.n	8003d26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d107      	bne.n	8003d22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e005      	b.n	8003d32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d26:	893b      	ldrh	r3, [r7, #8]
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	00010002 	.word	0x00010002

08003d40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	603b      	str	r3, [r7, #0]
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d50:	e048      	b.n	8003de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d58:	d044      	beq.n	8003de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d5a:	f7ff f9ab 	bl	80030b4 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	69bb      	ldr	r3, [r7, #24]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	683a      	ldr	r2, [r7, #0]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d302      	bcc.n	8003d70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d139      	bne.n	8003de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	0c1b      	lsrs	r3, r3, #16
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d10d      	bne.n	8003d96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	695b      	ldr	r3, [r3, #20]
 8003d80:	43da      	mvns	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4013      	ands	r3, r2
 8003d86:	b29b      	uxth	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	461a      	mov	r2, r3
 8003d94:	e00c      	b.n	8003db0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	43da      	mvns	r2, r3
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	4013      	ands	r3, r2
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	79fb      	ldrb	r3, [r7, #7]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d116      	bne.n	8003de4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dd0:	f043 0220 	orr.w	r2, r3, #32
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	e023      	b.n	8003e2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	0c1b      	lsrs	r3, r3, #16
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d10d      	bne.n	8003e0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	43da      	mvns	r2, r3
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	bf0c      	ite	eq
 8003e00:	2301      	moveq	r3, #1
 8003e02:	2300      	movne	r3, #0
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	461a      	mov	r2, r3
 8003e08:	e00c      	b.n	8003e24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	43da      	mvns	r2, r3
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	4013      	ands	r3, r2
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	461a      	mov	r2, r3
 8003e24:	79fb      	ldrb	r3, [r7, #7]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d093      	beq.n	8003d52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3710      	adds	r7, #16
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	607a      	str	r2, [r7, #4]
 8003e40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e42:	e071      	b.n	8003f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	695b      	ldr	r3, [r3, #20]
 8003e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e52:	d123      	bne.n	8003e9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003e6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2200      	movs	r2, #0
 8003e72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	f043 0204 	orr.w	r2, r3, #4
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e067      	b.n	8003f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea2:	d041      	beq.n	8003f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea4:	f7ff f906 	bl	80030b4 <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d302      	bcc.n	8003eba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d136      	bne.n	8003f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	0c1b      	lsrs	r3, r3, #16
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d10c      	bne.n	8003ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	43da      	mvns	r2, r3
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	bf14      	ite	ne
 8003ed6:	2301      	movne	r3, #1
 8003ed8:	2300      	moveq	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	e00b      	b.n	8003ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	43da      	mvns	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bf14      	ite	ne
 8003ef0:	2301      	movne	r3, #1
 8003ef2:	2300      	moveq	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d016      	beq.n	8003f28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f14:	f043 0220 	orr.w	r2, r3, #32
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e021      	b.n	8003f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	0c1b      	lsrs	r3, r3, #16
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d10c      	bne.n	8003f4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695b      	ldr	r3, [r3, #20]
 8003f38:	43da      	mvns	r2, r3
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	bf14      	ite	ne
 8003f44:	2301      	movne	r3, #1
 8003f46:	2300      	moveq	r3, #0
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	e00b      	b.n	8003f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	43da      	mvns	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	4013      	ands	r3, r2
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	bf14      	ite	ne
 8003f5e:	2301      	movne	r3, #1
 8003f60:	2300      	moveq	r3, #0
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f47f af6d 	bne.w	8003e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f80:	e034      	b.n	8003fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 f886 	bl	8004094 <I2C_IsAcknowledgeFailed>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e034      	b.n	8003ffc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f98:	d028      	beq.n	8003fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f9a:	f7ff f88b 	bl	80030b4 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	68ba      	ldr	r2, [r7, #8]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d302      	bcc.n	8003fb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d11d      	bne.n	8003fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fba:	2b80      	cmp	r3, #128	@ 0x80
 8003fbc:	d016      	beq.n	8003fec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd8:	f043 0220 	orr.w	r2, r3, #32
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e007      	b.n	8003ffc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff6:	2b80      	cmp	r3, #128	@ 0x80
 8003ff8:	d1c3      	bne.n	8003f82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3710      	adds	r7, #16
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}

08004004 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b084      	sub	sp, #16
 8004008:	af00      	add	r7, sp, #0
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	60b9      	str	r1, [r7, #8]
 800400e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004010:	e034      	b.n	800407c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f000 f83e 	bl	8004094 <I2C_IsAcknowledgeFailed>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e034      	b.n	800408c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004028:	d028      	beq.n	800407c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800402a:	f7ff f843 	bl	80030b4 <HAL_GetTick>
 800402e:	4602      	mov	r2, r0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	1ad3      	subs	r3, r2, r3
 8004034:	68ba      	ldr	r2, [r7, #8]
 8004036:	429a      	cmp	r2, r3
 8004038:	d302      	bcc.n	8004040 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d11d      	bne.n	800407c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	f003 0304 	and.w	r3, r3, #4
 800404a:	2b04      	cmp	r3, #4
 800404c:	d016      	beq.n	800407c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2200      	movs	r2, #0
 8004052:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004068:	f043 0220 	orr.w	r2, r3, #32
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e007      	b.n	800408c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	f003 0304 	and.w	r3, r3, #4
 8004086:	2b04      	cmp	r3, #4
 8004088:	d1c3      	bne.n	8004012 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3710      	adds	r7, #16
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}

08004094 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040aa:	d11b      	bne.n	80040e4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80040b4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2220      	movs	r2, #32
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d0:	f043 0204 	orr.w	r2, r3, #4
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	e000      	b.n	80040e6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
	...

080040f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e267      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b00      	cmp	r3, #0
 8004110:	d075      	beq.n	80041fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004112:	4b88      	ldr	r3, [pc, #544]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 030c 	and.w	r3, r3, #12
 800411a:	2b04      	cmp	r3, #4
 800411c:	d00c      	beq.n	8004138 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800411e:	4b85      	ldr	r3, [pc, #532]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004126:	2b08      	cmp	r3, #8
 8004128:	d112      	bne.n	8004150 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800412a:	4b82      	ldr	r3, [pc, #520]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004132:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004136:	d10b      	bne.n	8004150 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004138:	4b7e      	ldr	r3, [pc, #504]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004140:	2b00      	cmp	r3, #0
 8004142:	d05b      	beq.n	80041fc <HAL_RCC_OscConfig+0x108>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d157      	bne.n	80041fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e242      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004158:	d106      	bne.n	8004168 <HAL_RCC_OscConfig+0x74>
 800415a:	4b76      	ldr	r3, [pc, #472]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a75      	ldr	r2, [pc, #468]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 8004160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	e01d      	b.n	80041a4 <HAL_RCC_OscConfig+0xb0>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004170:	d10c      	bne.n	800418c <HAL_RCC_OscConfig+0x98>
 8004172:	4b70      	ldr	r3, [pc, #448]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a6f      	ldr	r2, [pc, #444]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 8004178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	4b6d      	ldr	r3, [pc, #436]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a6c      	ldr	r2, [pc, #432]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 8004184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	e00b      	b.n	80041a4 <HAL_RCC_OscConfig+0xb0>
 800418c:	4b69      	ldr	r3, [pc, #420]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a68      	ldr	r2, [pc, #416]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 8004192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004196:	6013      	str	r3, [r2, #0]
 8004198:	4b66      	ldr	r3, [pc, #408]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a65      	ldr	r2, [pc, #404]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 800419e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d013      	beq.n	80041d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ac:	f7fe ff82 	bl	80030b4 <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b4:	f7fe ff7e 	bl	80030b4 <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	@ 0x64
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e207      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c6:	4b5b      	ldr	r3, [pc, #364]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0f0      	beq.n	80041b4 <HAL_RCC_OscConfig+0xc0>
 80041d2:	e014      	b.n	80041fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041d4:	f7fe ff6e 	bl	80030b4 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041dc:	f7fe ff6a 	bl	80030b4 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b64      	cmp	r3, #100	@ 0x64
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e1f3      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ee:	4b51      	ldr	r3, [pc, #324]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0xe8>
 80041fa:	e000      	b.n	80041fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d063      	beq.n	80042d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800420a:	4b4a      	ldr	r3, [pc, #296]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	2b00      	cmp	r3, #0
 8004214:	d00b      	beq.n	800422e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004216:	4b47      	ldr	r3, [pc, #284]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800421e:	2b08      	cmp	r3, #8
 8004220:	d11c      	bne.n	800425c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004222:	4b44      	ldr	r3, [pc, #272]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d116      	bne.n	800425c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422e:	4b41      	ldr	r3, [pc, #260]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d005      	beq.n	8004246 <HAL_RCC_OscConfig+0x152>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d001      	beq.n	8004246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e1c7      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004246:	4b3b      	ldr	r3, [pc, #236]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	4937      	ldr	r1, [pc, #220]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 8004256:	4313      	orrs	r3, r2
 8004258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800425a:	e03a      	b.n	80042d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d020      	beq.n	80042a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004264:	4b34      	ldr	r3, [pc, #208]	@ (8004338 <HAL_RCC_OscConfig+0x244>)
 8004266:	2201      	movs	r2, #1
 8004268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426a:	f7fe ff23 	bl	80030b4 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004272:	f7fe ff1f 	bl	80030b4 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e1a8      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004284:	4b2b      	ldr	r3, [pc, #172]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0302 	and.w	r3, r3, #2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004290:	4b28      	ldr	r3, [pc, #160]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	00db      	lsls	r3, r3, #3
 800429e:	4925      	ldr	r1, [pc, #148]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	600b      	str	r3, [r1, #0]
 80042a4:	e015      	b.n	80042d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042a6:	4b24      	ldr	r3, [pc, #144]	@ (8004338 <HAL_RCC_OscConfig+0x244>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ac:	f7fe ff02 	bl	80030b4 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042b2:	e008      	b.n	80042c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042b4:	f7fe fefe 	bl	80030b4 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e187      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042c6:	4b1b      	ldr	r3, [pc, #108]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1f0      	bne.n	80042b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d036      	beq.n	800434c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d016      	beq.n	8004314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042e6:	4b15      	ldr	r3, [pc, #84]	@ (800433c <HAL_RCC_OscConfig+0x248>)
 80042e8:	2201      	movs	r2, #1
 80042ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ec:	f7fe fee2 	bl	80030b4 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042f4:	f7fe fede 	bl	80030b4 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e167      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004306:	4b0b      	ldr	r3, [pc, #44]	@ (8004334 <HAL_RCC_OscConfig+0x240>)
 8004308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0f0      	beq.n	80042f4 <HAL_RCC_OscConfig+0x200>
 8004312:	e01b      	b.n	800434c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004314:	4b09      	ldr	r3, [pc, #36]	@ (800433c <HAL_RCC_OscConfig+0x248>)
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800431a:	f7fe fecb 	bl	80030b4 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004320:	e00e      	b.n	8004340 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004322:	f7fe fec7 	bl	80030b4 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d907      	bls.n	8004340 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e150      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
 8004334:	40023800 	.word	0x40023800
 8004338:	42470000 	.word	0x42470000
 800433c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004340:	4b88      	ldr	r3, [pc, #544]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 8004342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1ea      	bne.n	8004322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0304 	and.w	r3, r3, #4
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 8097 	beq.w	8004488 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800435a:	2300      	movs	r3, #0
 800435c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800435e:	4b81      	ldr	r3, [pc, #516]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10f      	bne.n	800438a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]
 800436e:	4b7d      	ldr	r3, [pc, #500]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	4a7c      	ldr	r2, [pc, #496]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 8004374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004378:	6413      	str	r3, [r2, #64]	@ 0x40
 800437a:	4b7a      	ldr	r3, [pc, #488]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004382:	60bb      	str	r3, [r7, #8]
 8004384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004386:	2301      	movs	r3, #1
 8004388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800438a:	4b77      	ldr	r3, [pc, #476]	@ (8004568 <HAL_RCC_OscConfig+0x474>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004392:	2b00      	cmp	r3, #0
 8004394:	d118      	bne.n	80043c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004396:	4b74      	ldr	r3, [pc, #464]	@ (8004568 <HAL_RCC_OscConfig+0x474>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a73      	ldr	r2, [pc, #460]	@ (8004568 <HAL_RCC_OscConfig+0x474>)
 800439c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043a2:	f7fe fe87 	bl	80030b4 <HAL_GetTick>
 80043a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a8:	e008      	b.n	80043bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043aa:	f7fe fe83 	bl	80030b4 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d901      	bls.n	80043bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	e10c      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043bc:	4b6a      	ldr	r3, [pc, #424]	@ (8004568 <HAL_RCC_OscConfig+0x474>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d0f0      	beq.n	80043aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d106      	bne.n	80043de <HAL_RCC_OscConfig+0x2ea>
 80043d0:	4b64      	ldr	r3, [pc, #400]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d4:	4a63      	ldr	r2, [pc, #396]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 80043d6:	f043 0301 	orr.w	r3, r3, #1
 80043da:	6713      	str	r3, [r2, #112]	@ 0x70
 80043dc:	e01c      	b.n	8004418 <HAL_RCC_OscConfig+0x324>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b05      	cmp	r3, #5
 80043e4:	d10c      	bne.n	8004400 <HAL_RCC_OscConfig+0x30c>
 80043e6:	4b5f      	ldr	r3, [pc, #380]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 80043e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ea:	4a5e      	ldr	r2, [pc, #376]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 80043ec:	f043 0304 	orr.w	r3, r3, #4
 80043f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043f2:	4b5c      	ldr	r3, [pc, #368]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f6:	4a5b      	ldr	r2, [pc, #364]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 80043f8:	f043 0301 	orr.w	r3, r3, #1
 80043fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80043fe:	e00b      	b.n	8004418 <HAL_RCC_OscConfig+0x324>
 8004400:	4b58      	ldr	r3, [pc, #352]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 8004402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004404:	4a57      	ldr	r2, [pc, #348]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	6713      	str	r3, [r2, #112]	@ 0x70
 800440c:	4b55      	ldr	r3, [pc, #340]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 800440e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004410:	4a54      	ldr	r2, [pc, #336]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 8004412:	f023 0304 	bic.w	r3, r3, #4
 8004416:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d015      	beq.n	800444c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004420:	f7fe fe48 	bl	80030b4 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004426:	e00a      	b.n	800443e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004428:	f7fe fe44 	bl	80030b4 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004436:	4293      	cmp	r3, r2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e0cb      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800443e:	4b49      	ldr	r3, [pc, #292]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 8004440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0ee      	beq.n	8004428 <HAL_RCC_OscConfig+0x334>
 800444a:	e014      	b.n	8004476 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800444c:	f7fe fe32 	bl	80030b4 <HAL_GetTick>
 8004450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004452:	e00a      	b.n	800446a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004454:	f7fe fe2e 	bl	80030b4 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	693b      	ldr	r3, [r7, #16]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004462:	4293      	cmp	r3, r2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e0b5      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800446a:	4b3e      	ldr	r3, [pc, #248]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 800446c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800446e:	f003 0302 	and.w	r3, r3, #2
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1ee      	bne.n	8004454 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004476:	7dfb      	ldrb	r3, [r7, #23]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d105      	bne.n	8004488 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800447c:	4b39      	ldr	r3, [pc, #228]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 800447e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004480:	4a38      	ldr	r2, [pc, #224]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 8004482:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004486:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	699b      	ldr	r3, [r3, #24]
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80a1 	beq.w	80045d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004492:	4b34      	ldr	r3, [pc, #208]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b08      	cmp	r3, #8
 800449c:	d05c      	beq.n	8004558 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d141      	bne.n	800452a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044a6:	4b31      	ldr	r3, [pc, #196]	@ (800456c <HAL_RCC_OscConfig+0x478>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ac:	f7fe fe02 	bl	80030b4 <HAL_GetTick>
 80044b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044b4:	f7fe fdfe 	bl	80030b4 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d901      	bls.n	80044c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e087      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c6:	4b27      	ldr	r3, [pc, #156]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1f0      	bne.n	80044b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69da      	ldr	r2, [r3, #28]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	019b      	lsls	r3, r3, #6
 80044e2:	431a      	orrs	r2, r3
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044e8:	085b      	lsrs	r3, r3, #1
 80044ea:	3b01      	subs	r3, #1
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f4:	061b      	lsls	r3, r3, #24
 80044f6:	491b      	ldr	r1, [pc, #108]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044fc:	4b1b      	ldr	r3, [pc, #108]	@ (800456c <HAL_RCC_OscConfig+0x478>)
 80044fe:	2201      	movs	r2, #1
 8004500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004502:	f7fe fdd7 	bl	80030b4 <HAL_GetTick>
 8004506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004508:	e008      	b.n	800451c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800450a:	f7fe fdd3 	bl	80030b4 <HAL_GetTick>
 800450e:	4602      	mov	r2, r0
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	1ad3      	subs	r3, r2, r3
 8004514:	2b02      	cmp	r3, #2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e05c      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800451c:	4b11      	ldr	r3, [pc, #68]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0f0      	beq.n	800450a <HAL_RCC_OscConfig+0x416>
 8004528:	e054      	b.n	80045d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800452a:	4b10      	ldr	r3, [pc, #64]	@ (800456c <HAL_RCC_OscConfig+0x478>)
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004530:	f7fe fdc0 	bl	80030b4 <HAL_GetTick>
 8004534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004536:	e008      	b.n	800454a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004538:	f7fe fdbc 	bl	80030b4 <HAL_GetTick>
 800453c:	4602      	mov	r2, r0
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	1ad3      	subs	r3, r2, r3
 8004542:	2b02      	cmp	r3, #2
 8004544:	d901      	bls.n	800454a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e045      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454a:	4b06      	ldr	r3, [pc, #24]	@ (8004564 <HAL_RCC_OscConfig+0x470>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d1f0      	bne.n	8004538 <HAL_RCC_OscConfig+0x444>
 8004556:	e03d      	b.n	80045d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d107      	bne.n	8004570 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e038      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
 8004564:	40023800 	.word	0x40023800
 8004568:	40007000 	.word	0x40007000
 800456c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004570:	4b1b      	ldr	r3, [pc, #108]	@ (80045e0 <HAL_RCC_OscConfig+0x4ec>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d028      	beq.n	80045d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004588:	429a      	cmp	r2, r3
 800458a:	d121      	bne.n	80045d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004596:	429a      	cmp	r2, r3
 8004598:	d11a      	bne.n	80045d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045a0:	4013      	ands	r3, r2
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d111      	bne.n	80045d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	3b01      	subs	r3, #1
 80045ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045bc:	429a      	cmp	r2, r3
 80045be:	d107      	bne.n	80045d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d001      	beq.n	80045d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e000      	b.n	80045d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	40023800 	.word	0x40023800

080045e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d101      	bne.n	80045f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e0cc      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045f8:	4b68      	ldr	r3, [pc, #416]	@ (800479c <HAL_RCC_ClockConfig+0x1b8>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0307 	and.w	r3, r3, #7
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	429a      	cmp	r2, r3
 8004604:	d90c      	bls.n	8004620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004606:	4b65      	ldr	r3, [pc, #404]	@ (800479c <HAL_RCC_ClockConfig+0x1b8>)
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800460e:	4b63      	ldr	r3, [pc, #396]	@ (800479c <HAL_RCC_ClockConfig+0x1b8>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0307 	and.w	r3, r3, #7
 8004616:	683a      	ldr	r2, [r7, #0]
 8004618:	429a      	cmp	r2, r3
 800461a:	d001      	beq.n	8004620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e0b8      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b00      	cmp	r3, #0
 800462a:	d020      	beq.n	800466e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004638:	4b59      	ldr	r3, [pc, #356]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	4a58      	ldr	r2, [pc, #352]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004642:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004650:	4b53      	ldr	r3, [pc, #332]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4a52      	ldr	r2, [pc, #328]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800465a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800465c:	4b50      	ldr	r3, [pc, #320]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	494d      	ldr	r1, [pc, #308]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	4313      	orrs	r3, r2
 800466c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	d044      	beq.n	8004704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d107      	bne.n	8004692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004682:	4b47      	ldr	r3, [pc, #284]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d119      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e07f      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d003      	beq.n	80046a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d107      	bne.n	80046b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a2:	4b3f      	ldr	r3, [pc, #252]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d109      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e06f      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b2:	4b3b      	ldr	r3, [pc, #236]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e067      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046c2:	4b37      	ldr	r3, [pc, #220]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f023 0203 	bic.w	r2, r3, #3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	4934      	ldr	r1, [pc, #208]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046d4:	f7fe fcee 	bl	80030b4 <HAL_GetTick>
 80046d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046da:	e00a      	b.n	80046f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046dc:	f7fe fcea 	bl	80030b4 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e04f      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046f2:	4b2b      	ldr	r3, [pc, #172]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f003 020c 	and.w	r2, r3, #12
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	429a      	cmp	r2, r3
 8004702:	d1eb      	bne.n	80046dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004704:	4b25      	ldr	r3, [pc, #148]	@ (800479c <HAL_RCC_ClockConfig+0x1b8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	683a      	ldr	r2, [r7, #0]
 800470e:	429a      	cmp	r2, r3
 8004710:	d20c      	bcs.n	800472c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004712:	4b22      	ldr	r3, [pc, #136]	@ (800479c <HAL_RCC_ClockConfig+0x1b8>)
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	b2d2      	uxtb	r2, r2
 8004718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800471a:	4b20      	ldr	r3, [pc, #128]	@ (800479c <HAL_RCC_ClockConfig+0x1b8>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0307 	and.w	r3, r3, #7
 8004722:	683a      	ldr	r2, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	d001      	beq.n	800472c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e032      	b.n	8004792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d008      	beq.n	800474a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004738:	4b19      	ldr	r3, [pc, #100]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4916      	ldr	r1, [pc, #88]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	4313      	orrs	r3, r2
 8004748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d009      	beq.n	800476a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004756:	4b12      	ldr	r3, [pc, #72]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	691b      	ldr	r3, [r3, #16]
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	490e      	ldr	r1, [pc, #56]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800476a:	f000 f821 	bl	80047b0 <HAL_RCC_GetSysClockFreq>
 800476e:	4602      	mov	r2, r0
 8004770:	4b0b      	ldr	r3, [pc, #44]	@ (80047a0 <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 030f 	and.w	r3, r3, #15
 800477a:	490a      	ldr	r1, [pc, #40]	@ (80047a4 <HAL_RCC_ClockConfig+0x1c0>)
 800477c:	5ccb      	ldrb	r3, [r1, r3]
 800477e:	fa22 f303 	lsr.w	r3, r2, r3
 8004782:	4a09      	ldr	r2, [pc, #36]	@ (80047a8 <HAL_RCC_ClockConfig+0x1c4>)
 8004784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004786:	4b09      	ldr	r3, [pc, #36]	@ (80047ac <HAL_RCC_ClockConfig+0x1c8>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4618      	mov	r0, r3
 800478c:	f7fe faae 	bl	8002cec <HAL_InitTick>

  return HAL_OK;
 8004790:	2300      	movs	r3, #0
}
 8004792:	4618      	mov	r0, r3
 8004794:	3710      	adds	r7, #16
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40023c00 	.word	0x40023c00
 80047a0:	40023800 	.word	0x40023800
 80047a4:	0800dc30 	.word	0x0800dc30
 80047a8:	20000004 	.word	0x20000004
 80047ac:	20000008 	.word	0x20000008

080047b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047b4:	b094      	sub	sp, #80	@ 0x50
 80047b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80047b8:	2300      	movs	r3, #0
 80047ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80047bc:	2300      	movs	r3, #0
 80047be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80047c0:	2300      	movs	r3, #0
 80047c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80047c4:	2300      	movs	r3, #0
 80047c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047c8:	4b79      	ldr	r3, [pc, #484]	@ (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 030c 	and.w	r3, r3, #12
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d00d      	beq.n	80047f0 <HAL_RCC_GetSysClockFreq+0x40>
 80047d4:	2b08      	cmp	r3, #8
 80047d6:	f200 80e1 	bhi.w	800499c <HAL_RCC_GetSysClockFreq+0x1ec>
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <HAL_RCC_GetSysClockFreq+0x34>
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d003      	beq.n	80047ea <HAL_RCC_GetSysClockFreq+0x3a>
 80047e2:	e0db      	b.n	800499c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047e4:	4b73      	ldr	r3, [pc, #460]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80047e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047e8:	e0db      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ea:	4b73      	ldr	r3, [pc, #460]	@ (80049b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80047ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047ee:	e0d8      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047f0:	4b6f      	ldr	r3, [pc, #444]	@ (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047fa:	4b6d      	ldr	r3, [pc, #436]	@ (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d063      	beq.n	80048ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004806:	4b6a      	ldr	r3, [pc, #424]	@ (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	099b      	lsrs	r3, r3, #6
 800480c:	2200      	movs	r2, #0
 800480e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004810:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004818:	633b      	str	r3, [r7, #48]	@ 0x30
 800481a:	2300      	movs	r3, #0
 800481c:	637b      	str	r3, [r7, #52]	@ 0x34
 800481e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004822:	4622      	mov	r2, r4
 8004824:	462b      	mov	r3, r5
 8004826:	f04f 0000 	mov.w	r0, #0
 800482a:	f04f 0100 	mov.w	r1, #0
 800482e:	0159      	lsls	r1, r3, #5
 8004830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004834:	0150      	lsls	r0, r2, #5
 8004836:	4602      	mov	r2, r0
 8004838:	460b      	mov	r3, r1
 800483a:	4621      	mov	r1, r4
 800483c:	1a51      	subs	r1, r2, r1
 800483e:	6139      	str	r1, [r7, #16]
 8004840:	4629      	mov	r1, r5
 8004842:	eb63 0301 	sbc.w	r3, r3, r1
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004854:	4659      	mov	r1, fp
 8004856:	018b      	lsls	r3, r1, #6
 8004858:	4651      	mov	r1, sl
 800485a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800485e:	4651      	mov	r1, sl
 8004860:	018a      	lsls	r2, r1, #6
 8004862:	4651      	mov	r1, sl
 8004864:	ebb2 0801 	subs.w	r8, r2, r1
 8004868:	4659      	mov	r1, fp
 800486a:	eb63 0901 	sbc.w	r9, r3, r1
 800486e:	f04f 0200 	mov.w	r2, #0
 8004872:	f04f 0300 	mov.w	r3, #0
 8004876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800487a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800487e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004882:	4690      	mov	r8, r2
 8004884:	4699      	mov	r9, r3
 8004886:	4623      	mov	r3, r4
 8004888:	eb18 0303 	adds.w	r3, r8, r3
 800488c:	60bb      	str	r3, [r7, #8]
 800488e:	462b      	mov	r3, r5
 8004890:	eb49 0303 	adc.w	r3, r9, r3
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	f04f 0200 	mov.w	r2, #0
 800489a:	f04f 0300 	mov.w	r3, #0
 800489e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80048a2:	4629      	mov	r1, r5
 80048a4:	024b      	lsls	r3, r1, #9
 80048a6:	4621      	mov	r1, r4
 80048a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80048ac:	4621      	mov	r1, r4
 80048ae:	024a      	lsls	r2, r1, #9
 80048b0:	4610      	mov	r0, r2
 80048b2:	4619      	mov	r1, r3
 80048b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048b6:	2200      	movs	r2, #0
 80048b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048c0:	f7fc f9ba 	bl	8000c38 <__aeabi_uldivmod>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4613      	mov	r3, r2
 80048ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048cc:	e058      	b.n	8004980 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048ce:	4b38      	ldr	r3, [pc, #224]	@ (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	099b      	lsrs	r3, r3, #6
 80048d4:	2200      	movs	r2, #0
 80048d6:	4618      	mov	r0, r3
 80048d8:	4611      	mov	r1, r2
 80048da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048de:	623b      	str	r3, [r7, #32]
 80048e0:	2300      	movs	r3, #0
 80048e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048e8:	4642      	mov	r2, r8
 80048ea:	464b      	mov	r3, r9
 80048ec:	f04f 0000 	mov.w	r0, #0
 80048f0:	f04f 0100 	mov.w	r1, #0
 80048f4:	0159      	lsls	r1, r3, #5
 80048f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048fa:	0150      	lsls	r0, r2, #5
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4641      	mov	r1, r8
 8004902:	ebb2 0a01 	subs.w	sl, r2, r1
 8004906:	4649      	mov	r1, r9
 8004908:	eb63 0b01 	sbc.w	fp, r3, r1
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004918:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800491c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004920:	ebb2 040a 	subs.w	r4, r2, sl
 8004924:	eb63 050b 	sbc.w	r5, r3, fp
 8004928:	f04f 0200 	mov.w	r2, #0
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	00eb      	lsls	r3, r5, #3
 8004932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004936:	00e2      	lsls	r2, r4, #3
 8004938:	4614      	mov	r4, r2
 800493a:	461d      	mov	r5, r3
 800493c:	4643      	mov	r3, r8
 800493e:	18e3      	adds	r3, r4, r3
 8004940:	603b      	str	r3, [r7, #0]
 8004942:	464b      	mov	r3, r9
 8004944:	eb45 0303 	adc.w	r3, r5, r3
 8004948:	607b      	str	r3, [r7, #4]
 800494a:	f04f 0200 	mov.w	r2, #0
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004956:	4629      	mov	r1, r5
 8004958:	028b      	lsls	r3, r1, #10
 800495a:	4621      	mov	r1, r4
 800495c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004960:	4621      	mov	r1, r4
 8004962:	028a      	lsls	r2, r1, #10
 8004964:	4610      	mov	r0, r2
 8004966:	4619      	mov	r1, r3
 8004968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800496a:	2200      	movs	r2, #0
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	61fa      	str	r2, [r7, #28]
 8004970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004974:	f7fc f960 	bl	8000c38 <__aeabi_uldivmod>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4613      	mov	r3, r2
 800497e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004980:	4b0b      	ldr	r3, [pc, #44]	@ (80049b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	0c1b      	lsrs	r3, r3, #16
 8004986:	f003 0303 	and.w	r3, r3, #3
 800498a:	3301      	adds	r3, #1
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004990:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004994:	fbb2 f3f3 	udiv	r3, r2, r3
 8004998:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800499a:	e002      	b.n	80049a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800499c:	4b05      	ldr	r3, [pc, #20]	@ (80049b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800499e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80049a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3750      	adds	r7, #80	@ 0x50
 80049a8:	46bd      	mov	sp, r7
 80049aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ae:	bf00      	nop
 80049b0:	40023800 	.word	0x40023800
 80049b4:	00f42400 	.word	0x00f42400
 80049b8:	007a1200 	.word	0x007a1200

080049bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049bc:	b480      	push	{r7}
 80049be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049c0:	4b03      	ldr	r3, [pc, #12]	@ (80049d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80049c2:	681b      	ldr	r3, [r3, #0]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	20000004 	.word	0x20000004

080049d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049d8:	f7ff fff0 	bl	80049bc <HAL_RCC_GetHCLKFreq>
 80049dc:	4602      	mov	r2, r0
 80049de:	4b05      	ldr	r3, [pc, #20]	@ (80049f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	0a9b      	lsrs	r3, r3, #10
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	4903      	ldr	r1, [pc, #12]	@ (80049f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ea:	5ccb      	ldrb	r3, [r1, r3]
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40023800 	.word	0x40023800
 80049f8:	0800dc40 	.word	0x0800dc40

080049fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004a00:	f7ff ffdc 	bl	80049bc <HAL_RCC_GetHCLKFreq>
 8004a04:	4602      	mov	r2, r0
 8004a06:	4b05      	ldr	r3, [pc, #20]	@ (8004a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	0b5b      	lsrs	r3, r3, #13
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	4903      	ldr	r1, [pc, #12]	@ (8004a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004a12:	5ccb      	ldrb	r3, [r1, r3]
 8004a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40023800 	.word	0x40023800
 8004a20:	0800dc40 	.word	0x0800dc40

08004a24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	220f      	movs	r2, #15
 8004a32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004a34:	4b12      	ldr	r3, [pc, #72]	@ (8004a80 <HAL_RCC_GetClockConfig+0x5c>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 0203 	and.w	r2, r3, #3
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004a40:	4b0f      	ldr	r3, [pc, #60]	@ (8004a80 <HAL_RCC_GetClockConfig+0x5c>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a80 <HAL_RCC_GetClockConfig+0x5c>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004a58:	4b09      	ldr	r3, [pc, #36]	@ (8004a80 <HAL_RCC_GetClockConfig+0x5c>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	08db      	lsrs	r3, r3, #3
 8004a5e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a66:	4b07      	ldr	r3, [pc, #28]	@ (8004a84 <HAL_RCC_GetClockConfig+0x60>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0207 	and.w	r2, r3, #7
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	601a      	str	r2, [r3, #0]
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40023800 	.word	0x40023800
 8004a84:	40023c00 	.word	0x40023c00

08004a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d101      	bne.n	8004a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e041      	b.n	8004b1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fd ffda 	bl	8002a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3304      	adds	r3, #4
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4610      	mov	r0, r2
 8004ac8:	f000 fd96 	bl	80055f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b01      	cmp	r3, #1
 8004b3a:	d001      	beq.n	8004b40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e04e      	b.n	8004bde <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f042 0201 	orr.w	r2, r2, #1
 8004b56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a23      	ldr	r2, [pc, #140]	@ (8004bec <HAL_TIM_Base_Start_IT+0xc4>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d022      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x80>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b6a:	d01d      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x80>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a1f      	ldr	r2, [pc, #124]	@ (8004bf0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d018      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x80>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004bf4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d013      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x80>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a1c      	ldr	r2, [pc, #112]	@ (8004bf8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d00e      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x80>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1b      	ldr	r2, [pc, #108]	@ (8004bfc <HAL_TIM_Base_Start_IT+0xd4>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d009      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x80>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a19      	ldr	r2, [pc, #100]	@ (8004c00 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d004      	beq.n	8004ba8 <HAL_TIM_Base_Start_IT+0x80>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a18      	ldr	r2, [pc, #96]	@ (8004c04 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d111      	bne.n	8004bcc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b06      	cmp	r3, #6
 8004bb8:	d010      	beq.n	8004bdc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681a      	ldr	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f042 0201 	orr.w	r2, r2, #1
 8004bc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bca:	e007      	b.n	8004bdc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f042 0201 	orr.w	r2, r2, #1
 8004bda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	3714      	adds	r7, #20
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40010000 	.word	0x40010000
 8004bf0:	40000400 	.word	0x40000400
 8004bf4:	40000800 	.word	0x40000800
 8004bf8:	40000c00 	.word	0x40000c00
 8004bfc:	40010400 	.word	0x40010400
 8004c00:	40014000 	.word	0x40014000
 8004c04:	40001800 	.word	0x40001800

08004c08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d101      	bne.n	8004c1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e041      	b.n	8004c9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d106      	bne.n	8004c34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f839 	bl	8004ca6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f000 fcd6 	bl	80055f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3708      	adds	r7, #8
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004cae:	bf00      	nop
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
	...

08004cbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d109      	bne.n	8004ce0 <HAL_TIM_PWM_Start+0x24>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	bf14      	ite	ne
 8004cd8:	2301      	movne	r3, #1
 8004cda:	2300      	moveq	r3, #0
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	e022      	b.n	8004d26 <HAL_TIM_PWM_Start+0x6a>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d109      	bne.n	8004cfa <HAL_TIM_PWM_Start+0x3e>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	bf14      	ite	ne
 8004cf2:	2301      	movne	r3, #1
 8004cf4:	2300      	moveq	r3, #0
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	e015      	b.n	8004d26 <HAL_TIM_PWM_Start+0x6a>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d109      	bne.n	8004d14 <HAL_TIM_PWM_Start+0x58>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	bf14      	ite	ne
 8004d0c:	2301      	movne	r3, #1
 8004d0e:	2300      	moveq	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	e008      	b.n	8004d26 <HAL_TIM_PWM_Start+0x6a>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	bf14      	ite	ne
 8004d20:	2301      	movne	r3, #1
 8004d22:	2300      	moveq	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e07c      	b.n	8004e28 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d104      	bne.n	8004d3e <HAL_TIM_PWM_Start+0x82>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d3c:	e013      	b.n	8004d66 <HAL_TIM_PWM_Start+0xaa>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d104      	bne.n	8004d4e <HAL_TIM_PWM_Start+0x92>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d4c:	e00b      	b.n	8004d66 <HAL_TIM_PWM_Start+0xaa>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b08      	cmp	r3, #8
 8004d52:	d104      	bne.n	8004d5e <HAL_TIM_PWM_Start+0xa2>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2202      	movs	r2, #2
 8004d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d5c:	e003      	b.n	8004d66 <HAL_TIM_PWM_Start+0xaa>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2202      	movs	r2, #2
 8004d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	6839      	ldr	r1, [r7, #0]
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 ff32 	bl	8005bd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a2d      	ldr	r2, [pc, #180]	@ (8004e30 <HAL_TIM_PWM_Start+0x174>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d004      	beq.n	8004d88 <HAL_TIM_PWM_Start+0xcc>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a2c      	ldr	r2, [pc, #176]	@ (8004e34 <HAL_TIM_PWM_Start+0x178>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d101      	bne.n	8004d8c <HAL_TIM_PWM_Start+0xd0>
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <HAL_TIM_PWM_Start+0xd2>
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d007      	beq.n	8004da2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004da0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a22      	ldr	r2, [pc, #136]	@ (8004e30 <HAL_TIM_PWM_Start+0x174>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d022      	beq.n	8004df2 <HAL_TIM_PWM_Start+0x136>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004db4:	d01d      	beq.n	8004df2 <HAL_TIM_PWM_Start+0x136>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1f      	ldr	r2, [pc, #124]	@ (8004e38 <HAL_TIM_PWM_Start+0x17c>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d018      	beq.n	8004df2 <HAL_TIM_PWM_Start+0x136>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a1d      	ldr	r2, [pc, #116]	@ (8004e3c <HAL_TIM_PWM_Start+0x180>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d013      	beq.n	8004df2 <HAL_TIM_PWM_Start+0x136>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1c      	ldr	r2, [pc, #112]	@ (8004e40 <HAL_TIM_PWM_Start+0x184>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d00e      	beq.n	8004df2 <HAL_TIM_PWM_Start+0x136>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a16      	ldr	r2, [pc, #88]	@ (8004e34 <HAL_TIM_PWM_Start+0x178>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d009      	beq.n	8004df2 <HAL_TIM_PWM_Start+0x136>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a18      	ldr	r2, [pc, #96]	@ (8004e44 <HAL_TIM_PWM_Start+0x188>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d004      	beq.n	8004df2 <HAL_TIM_PWM_Start+0x136>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a16      	ldr	r2, [pc, #88]	@ (8004e48 <HAL_TIM_PWM_Start+0x18c>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d111      	bne.n	8004e16 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b06      	cmp	r3, #6
 8004e02:	d010      	beq.n	8004e26 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f042 0201 	orr.w	r2, r2, #1
 8004e12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e14:	e007      	b.n	8004e26 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f042 0201 	orr.w	r2, r2, #1
 8004e24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40010400 	.word	0x40010400
 8004e38:	40000400 	.word	0x40000400
 8004e3c:	40000800 	.word	0x40000800
 8004e40:	40000c00 	.word	0x40000c00
 8004e44:	40014000 	.word	0x40014000
 8004e48:	40001800 	.word	0x40001800

08004e4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e097      	b.n	8004f90 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d106      	bne.n	8004e7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f7fd fcef 	bl	8002858 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2202      	movs	r2, #2
 8004e7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6812      	ldr	r2, [r2, #0]
 8004e8c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004e90:	f023 0307 	bic.w	r3, r3, #7
 8004e94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f000 fba9 	bl	80055f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	699b      	ldr	r3, [r3, #24]
 8004eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6a1b      	ldr	r3, [r3, #32]
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	697a      	ldr	r2, [r7, #20]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ece:	f023 0303 	bic.w	r3, r3, #3
 8004ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	021b      	lsls	r3, r3, #8
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004eec:	f023 030c 	bic.w	r3, r3, #12
 8004ef0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ef8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004efc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	021b      	lsls	r3, r3, #8
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	011a      	lsls	r2, r3, #4
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	031b      	lsls	r3, r3, #12
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004f2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004f32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685a      	ldr	r2, [r3, #4]
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	011b      	lsls	r3, r3, #4
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	697a      	ldr	r2, [r7, #20]
 8004f4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3718      	adds	r7, #24
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}

08004f98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b084      	sub	sp, #16
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fa8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004fb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004fc0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d110      	bne.n	8004fea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004fc8:	7bfb      	ldrb	r3, [r7, #15]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d102      	bne.n	8004fd4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004fce:	7b7b      	ldrb	r3, [r7, #13]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d001      	beq.n	8004fd8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e069      	b.n	80050ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2202      	movs	r2, #2
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fe8:	e031      	b.n	800504e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b04      	cmp	r3, #4
 8004fee:	d110      	bne.n	8005012 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ff0:	7bbb      	ldrb	r3, [r7, #14]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d102      	bne.n	8004ffc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ff6:	7b3b      	ldrb	r3, [r7, #12]
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d001      	beq.n	8005000 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e055      	b.n	80050ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2202      	movs	r2, #2
 800500c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005010:	e01d      	b.n	800504e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005012:	7bfb      	ldrb	r3, [r7, #15]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d108      	bne.n	800502a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005018:	7bbb      	ldrb	r3, [r7, #14]
 800501a:	2b01      	cmp	r3, #1
 800501c:	d105      	bne.n	800502a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800501e:	7b7b      	ldrb	r3, [r7, #13]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d102      	bne.n	800502a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005024:	7b3b      	ldrb	r3, [r7, #12]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d001      	beq.n	800502e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e03e      	b.n	80050ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2202      	movs	r2, #2
 8005032:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2202      	movs	r2, #2
 800503a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2202      	movs	r2, #2
 800504a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d003      	beq.n	800505c <HAL_TIM_Encoder_Start+0xc4>
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	2b04      	cmp	r3, #4
 8005058:	d008      	beq.n	800506c <HAL_TIM_Encoder_Start+0xd4>
 800505a:	e00f      	b.n	800507c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2201      	movs	r2, #1
 8005062:	2100      	movs	r1, #0
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fdb7 	bl	8005bd8 <TIM_CCxChannelCmd>
      break;
 800506a:	e016      	b.n	800509a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2201      	movs	r2, #1
 8005072:	2104      	movs	r1, #4
 8005074:	4618      	mov	r0, r3
 8005076:	f000 fdaf 	bl	8005bd8 <TIM_CCxChannelCmd>
      break;
 800507a:	e00e      	b.n	800509a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2201      	movs	r2, #1
 8005082:	2100      	movs	r1, #0
 8005084:	4618      	mov	r0, r3
 8005086:	f000 fda7 	bl	8005bd8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2201      	movs	r2, #1
 8005090:	2104      	movs	r1, #4
 8005092:	4618      	mov	r0, r3
 8005094:	f000 fda0 	bl	8005bd8 <TIM_CCxChannelCmd>
      break;
 8005098:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0201 	orr.w	r2, r2, #1
 80050a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 0302 	and.w	r3, r3, #2
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d020      	beq.n	8005118 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f003 0302 	and.w	r3, r3, #2
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01b      	beq.n	8005118 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0202 	mvn.w	r2, #2
 80050e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fa5b 	bl	80055ba <HAL_TIM_IC_CaptureCallback>
 8005104:	e005      	b.n	8005112 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fa4d 	bl	80055a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fa5e 	bl	80055ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 0304 	and.w	r3, r3, #4
 800511e:	2b00      	cmp	r3, #0
 8005120:	d020      	beq.n	8005164 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01b      	beq.n	8005164 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0204 	mvn.w	r2, #4
 8005134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2202      	movs	r2, #2
 800513a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 fa35 	bl	80055ba <HAL_TIM_IC_CaptureCallback>
 8005150:	e005      	b.n	800515e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fa27 	bl	80055a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 fa38 	bl	80055ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f003 0308 	and.w	r3, r3, #8
 800516a:	2b00      	cmp	r3, #0
 800516c:	d020      	beq.n	80051b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b00      	cmp	r3, #0
 8005176:	d01b      	beq.n	80051b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0208 	mvn.w	r2, #8
 8005180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2204      	movs	r2, #4
 8005186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f003 0303 	and.w	r3, r3, #3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 fa0f 	bl	80055ba <HAL_TIM_IC_CaptureCallback>
 800519c:	e005      	b.n	80051aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fa01 	bl	80055a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fa12 	bl	80055ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f003 0310 	and.w	r3, r3, #16
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d020      	beq.n	80051fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f003 0310 	and.w	r3, r3, #16
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01b      	beq.n	80051fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0210 	mvn.w	r2, #16
 80051cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2208      	movs	r2, #8
 80051d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f9e9 	bl	80055ba <HAL_TIM_IC_CaptureCallback>
 80051e8:	e005      	b.n	80051f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f000 f9db 	bl	80055a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f9ec 	bl	80055ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2200      	movs	r2, #0
 80051fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f003 0301 	and.w	r3, r3, #1
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00c      	beq.n	8005220 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d007      	beq.n	8005220 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f06f 0201 	mvn.w	r2, #1
 8005218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fd f822 	bl	8002264 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00c      	beq.n	8005244 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005230:	2b00      	cmp	r3, #0
 8005232:	d007      	beq.n	8005244 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800523c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fd76 	bl	8005d30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00c      	beq.n	8005268 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d007      	beq.n	8005268 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f000 f9bd 	bl	80055e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 0320 	and.w	r3, r3, #32
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00c      	beq.n	800528c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b00      	cmp	r3, #0
 800527a:	d007      	beq.n	800528c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0220 	mvn.w	r2, #32
 8005284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fd48 	bl	8005d1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800528c:	bf00      	nop
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b086      	sub	sp, #24
 8005298:	af00      	add	r7, sp, #0
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d101      	bne.n	80052b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052ae:	2302      	movs	r3, #2
 80052b0:	e0ae      	b.n	8005410 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b0c      	cmp	r3, #12
 80052be:	f200 809f 	bhi.w	8005400 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80052c2:	a201      	add	r2, pc, #4	@ (adr r2, 80052c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c8:	080052fd 	.word	0x080052fd
 80052cc:	08005401 	.word	0x08005401
 80052d0:	08005401 	.word	0x08005401
 80052d4:	08005401 	.word	0x08005401
 80052d8:	0800533d 	.word	0x0800533d
 80052dc:	08005401 	.word	0x08005401
 80052e0:	08005401 	.word	0x08005401
 80052e4:	08005401 	.word	0x08005401
 80052e8:	0800537f 	.word	0x0800537f
 80052ec:	08005401 	.word	0x08005401
 80052f0:	08005401 	.word	0x08005401
 80052f4:	08005401 	.word	0x08005401
 80052f8:	080053bf 	.word	0x080053bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fa1e 	bl	8005744 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	699a      	ldr	r2, [r3, #24]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0208 	orr.w	r2, r2, #8
 8005316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699a      	ldr	r2, [r3, #24]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f022 0204 	bic.w	r2, r2, #4
 8005326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6999      	ldr	r1, [r3, #24]
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	691a      	ldr	r2, [r3, #16]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	430a      	orrs	r2, r1
 8005338:	619a      	str	r2, [r3, #24]
      break;
 800533a:	e064      	b.n	8005406 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68b9      	ldr	r1, [r7, #8]
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fa6e 	bl	8005824 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005356:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699a      	ldr	r2, [r3, #24]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005366:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	6999      	ldr	r1, [r3, #24]
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	021a      	lsls	r2, r3, #8
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	619a      	str	r2, [r3, #24]
      break;
 800537c:	e043      	b.n	8005406 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68b9      	ldr	r1, [r7, #8]
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fac3 	bl	8005910 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	69da      	ldr	r2, [r3, #28]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0208 	orr.w	r2, r2, #8
 8005398:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	69da      	ldr	r2, [r3, #28]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 0204 	bic.w	r2, r2, #4
 80053a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69d9      	ldr	r1, [r3, #28]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	430a      	orrs	r2, r1
 80053ba:	61da      	str	r2, [r3, #28]
      break;
 80053bc:	e023      	b.n	8005406 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fb17 	bl	80059f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	69da      	ldr	r2, [r3, #28]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	69da      	ldr	r2, [r3, #28]
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69d9      	ldr	r1, [r3, #28]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	021a      	lsls	r2, r3, #8
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	61da      	str	r2, [r3, #28]
      break;
 80053fe:	e002      	b.n	8005406 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	75fb      	strb	r3, [r7, #23]
      break;
 8005404:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800540e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3718      	adds	r7, #24
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005422:	2300      	movs	r3, #0
 8005424:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_TIM_ConfigClockSource+0x1c>
 8005430:	2302      	movs	r3, #2
 8005432:	e0b4      	b.n	800559e <HAL_TIM_ConfigClockSource+0x186>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005452:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800545a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800546c:	d03e      	beq.n	80054ec <HAL_TIM_ConfigClockSource+0xd4>
 800546e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005472:	f200 8087 	bhi.w	8005584 <HAL_TIM_ConfigClockSource+0x16c>
 8005476:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800547a:	f000 8086 	beq.w	800558a <HAL_TIM_ConfigClockSource+0x172>
 800547e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005482:	d87f      	bhi.n	8005584 <HAL_TIM_ConfigClockSource+0x16c>
 8005484:	2b70      	cmp	r3, #112	@ 0x70
 8005486:	d01a      	beq.n	80054be <HAL_TIM_ConfigClockSource+0xa6>
 8005488:	2b70      	cmp	r3, #112	@ 0x70
 800548a:	d87b      	bhi.n	8005584 <HAL_TIM_ConfigClockSource+0x16c>
 800548c:	2b60      	cmp	r3, #96	@ 0x60
 800548e:	d050      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0x11a>
 8005490:	2b60      	cmp	r3, #96	@ 0x60
 8005492:	d877      	bhi.n	8005584 <HAL_TIM_ConfigClockSource+0x16c>
 8005494:	2b50      	cmp	r3, #80	@ 0x50
 8005496:	d03c      	beq.n	8005512 <HAL_TIM_ConfigClockSource+0xfa>
 8005498:	2b50      	cmp	r3, #80	@ 0x50
 800549a:	d873      	bhi.n	8005584 <HAL_TIM_ConfigClockSource+0x16c>
 800549c:	2b40      	cmp	r3, #64	@ 0x40
 800549e:	d058      	beq.n	8005552 <HAL_TIM_ConfigClockSource+0x13a>
 80054a0:	2b40      	cmp	r3, #64	@ 0x40
 80054a2:	d86f      	bhi.n	8005584 <HAL_TIM_ConfigClockSource+0x16c>
 80054a4:	2b30      	cmp	r3, #48	@ 0x30
 80054a6:	d064      	beq.n	8005572 <HAL_TIM_ConfigClockSource+0x15a>
 80054a8:	2b30      	cmp	r3, #48	@ 0x30
 80054aa:	d86b      	bhi.n	8005584 <HAL_TIM_ConfigClockSource+0x16c>
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d060      	beq.n	8005572 <HAL_TIM_ConfigClockSource+0x15a>
 80054b0:	2b20      	cmp	r3, #32
 80054b2:	d867      	bhi.n	8005584 <HAL_TIM_ConfigClockSource+0x16c>
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d05c      	beq.n	8005572 <HAL_TIM_ConfigClockSource+0x15a>
 80054b8:	2b10      	cmp	r3, #16
 80054ba:	d05a      	beq.n	8005572 <HAL_TIM_ConfigClockSource+0x15a>
 80054bc:	e062      	b.n	8005584 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054ce:	f000 fb63 	bl	8005b98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68ba      	ldr	r2, [r7, #8]
 80054e8:	609a      	str	r2, [r3, #8]
      break;
 80054ea:	e04f      	b.n	800558c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054fc:	f000 fb4c 	bl	8005b98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800550e:	609a      	str	r2, [r3, #8]
      break;
 8005510:	e03c      	b.n	800558c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800551e:	461a      	mov	r2, r3
 8005520:	f000 fac0 	bl	8005aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2150      	movs	r1, #80	@ 0x50
 800552a:	4618      	mov	r0, r3
 800552c:	f000 fb19 	bl	8005b62 <TIM_ITRx_SetConfig>
      break;
 8005530:	e02c      	b.n	800558c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800553e:	461a      	mov	r2, r3
 8005540:	f000 fadf 	bl	8005b02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2160      	movs	r1, #96	@ 0x60
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fb09 	bl	8005b62 <TIM_ITRx_SetConfig>
      break;
 8005550:	e01c      	b.n	800558c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800555e:	461a      	mov	r2, r3
 8005560:	f000 faa0 	bl	8005aa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2140      	movs	r1, #64	@ 0x40
 800556a:	4618      	mov	r0, r3
 800556c:	f000 faf9 	bl	8005b62 <TIM_ITRx_SetConfig>
      break;
 8005570:	e00c      	b.n	800558c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4619      	mov	r1, r3
 800557c:	4610      	mov	r0, r2
 800557e:	f000 faf0 	bl	8005b62 <TIM_ITRx_SetConfig>
      break;
 8005582:	e003      	b.n	800558c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	73fb      	strb	r3, [r7, #15]
      break;
 8005588:	e000      	b.n	800558c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800558a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800559c:	7bfb      	ldrb	r3, [r7, #15]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
	...

080055f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a43      	ldr	r2, [pc, #268]	@ (8005718 <TIM_Base_SetConfig+0x120>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d013      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005616:	d00f      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a40      	ldr	r2, [pc, #256]	@ (800571c <TIM_Base_SetConfig+0x124>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00b      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a3f      	ldr	r2, [pc, #252]	@ (8005720 <TIM_Base_SetConfig+0x128>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d007      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a3e      	ldr	r2, [pc, #248]	@ (8005724 <TIM_Base_SetConfig+0x12c>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a3d      	ldr	r2, [pc, #244]	@ (8005728 <TIM_Base_SetConfig+0x130>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d108      	bne.n	800564a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800563e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a32      	ldr	r2, [pc, #200]	@ (8005718 <TIM_Base_SetConfig+0x120>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d02b      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005658:	d027      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a2f      	ldr	r2, [pc, #188]	@ (800571c <TIM_Base_SetConfig+0x124>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d023      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a2e      	ldr	r2, [pc, #184]	@ (8005720 <TIM_Base_SetConfig+0x128>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d01f      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a2d      	ldr	r2, [pc, #180]	@ (8005724 <TIM_Base_SetConfig+0x12c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01b      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a2c      	ldr	r2, [pc, #176]	@ (8005728 <TIM_Base_SetConfig+0x130>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d017      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a2b      	ldr	r2, [pc, #172]	@ (800572c <TIM_Base_SetConfig+0x134>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2a      	ldr	r2, [pc, #168]	@ (8005730 <TIM_Base_SetConfig+0x138>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00f      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a29      	ldr	r2, [pc, #164]	@ (8005734 <TIM_Base_SetConfig+0x13c>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00b      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a28      	ldr	r2, [pc, #160]	@ (8005738 <TIM_Base_SetConfig+0x140>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d007      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a27      	ldr	r2, [pc, #156]	@ (800573c <TIM_Base_SetConfig+0x144>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d003      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a26      	ldr	r2, [pc, #152]	@ (8005740 <TIM_Base_SetConfig+0x148>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d108      	bne.n	80056bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	689a      	ldr	r2, [r3, #8]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a0e      	ldr	r2, [pc, #56]	@ (8005718 <TIM_Base_SetConfig+0x120>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d003      	beq.n	80056ea <TIM_Base_SetConfig+0xf2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a10      	ldr	r2, [pc, #64]	@ (8005728 <TIM_Base_SetConfig+0x130>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d103      	bne.n	80056f2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	691a      	ldr	r2, [r3, #16]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f043 0204 	orr.w	r2, r3, #4
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	601a      	str	r2, [r3, #0]
}
 800570a:	bf00      	nop
 800570c:	3714      	adds	r7, #20
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr
 8005716:	bf00      	nop
 8005718:	40010000 	.word	0x40010000
 800571c:	40000400 	.word	0x40000400
 8005720:	40000800 	.word	0x40000800
 8005724:	40000c00 	.word	0x40000c00
 8005728:	40010400 	.word	0x40010400
 800572c:	40014000 	.word	0x40014000
 8005730:	40014400 	.word	0x40014400
 8005734:	40014800 	.word	0x40014800
 8005738:	40001800 	.word	0x40001800
 800573c:	40001c00 	.word	0x40001c00
 8005740:	40002000 	.word	0x40002000

08005744 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	f023 0201 	bic.w	r2, r3, #1
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005772:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0303 	bic.w	r3, r3, #3
 800577a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f023 0302 	bic.w	r3, r3, #2
 800578c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a20      	ldr	r2, [pc, #128]	@ (800581c <TIM_OC1_SetConfig+0xd8>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_OC1_SetConfig+0x64>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a1f      	ldr	r2, [pc, #124]	@ (8005820 <TIM_OC1_SetConfig+0xdc>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d10c      	bne.n	80057c2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f023 0308 	bic.w	r3, r3, #8
 80057ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	697a      	ldr	r2, [r7, #20]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f023 0304 	bic.w	r3, r3, #4
 80057c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a15      	ldr	r2, [pc, #84]	@ (800581c <TIM_OC1_SetConfig+0xd8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d003      	beq.n	80057d2 <TIM_OC1_SetConfig+0x8e>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a14      	ldr	r2, [pc, #80]	@ (8005820 <TIM_OC1_SetConfig+0xdc>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d111      	bne.n	80057f6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80057e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685a      	ldr	r2, [r3, #4]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	621a      	str	r2, [r3, #32]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr
 800581c:	40010000 	.word	0x40010000
 8005820:	40010400 	.word	0x40010400

08005824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005824:	b480      	push	{r7}
 8005826:	b087      	sub	sp, #28
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a1b      	ldr	r3, [r3, #32]
 8005832:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	f023 0210 	bic.w	r2, r3, #16
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	699b      	ldr	r3, [r3, #24]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800585a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	021b      	lsls	r3, r3, #8
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	4313      	orrs	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f023 0320 	bic.w	r3, r3, #32
 800586e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a22      	ldr	r2, [pc, #136]	@ (8005908 <TIM_OC2_SetConfig+0xe4>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d003      	beq.n	800588c <TIM_OC2_SetConfig+0x68>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a21      	ldr	r2, [pc, #132]	@ (800590c <TIM_OC2_SetConfig+0xe8>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d10d      	bne.n	80058a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005892:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80058a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a17      	ldr	r2, [pc, #92]	@ (8005908 <TIM_OC2_SetConfig+0xe4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d003      	beq.n	80058b8 <TIM_OC2_SetConfig+0x94>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a16      	ldr	r2, [pc, #88]	@ (800590c <TIM_OC2_SetConfig+0xe8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d113      	bne.n	80058e0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80058be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	699b      	ldr	r3, [r3, #24]
 80058d8:	009b      	lsls	r3, r3, #2
 80058da:	693a      	ldr	r2, [r7, #16]
 80058dc:	4313      	orrs	r3, r2
 80058de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40010000 	.word	0x40010000
 800590c:	40010400 	.word	0x40010400

08005910 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800593e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0303 	bic.w	r3, r3, #3
 8005946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005958:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a21      	ldr	r2, [pc, #132]	@ (80059f0 <TIM_OC3_SetConfig+0xe0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d003      	beq.n	8005976 <TIM_OC3_SetConfig+0x66>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	4a20      	ldr	r2, [pc, #128]	@ (80059f4 <TIM_OC3_SetConfig+0xe4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d10d      	bne.n	8005992 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800597c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	697a      	ldr	r2, [r7, #20]
 8005986:	4313      	orrs	r3, r2
 8005988:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005990:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a16      	ldr	r2, [pc, #88]	@ (80059f0 <TIM_OC3_SetConfig+0xe0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d003      	beq.n	80059a2 <TIM_OC3_SetConfig+0x92>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a15      	ldr	r2, [pc, #84]	@ (80059f4 <TIM_OC3_SetConfig+0xe4>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d113      	bne.n	80059ca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
 80059b6:	011b      	lsls	r3, r3, #4
 80059b8:	693a      	ldr	r2, [r7, #16]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	011b      	lsls	r3, r3, #4
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	697a      	ldr	r2, [r7, #20]
 80059e2:	621a      	str	r2, [r3, #32]
}
 80059e4:	bf00      	nop
 80059e6:	371c      	adds	r7, #28
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr
 80059f0:	40010000 	.word	0x40010000
 80059f4:	40010400 	.word	0x40010400

080059f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b087      	sub	sp, #28
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
 8005a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	021b      	lsls	r3, r3, #8
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	031b      	lsls	r3, r3, #12
 8005a4a:	693a      	ldr	r2, [r7, #16]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a12      	ldr	r2, [pc, #72]	@ (8005a9c <TIM_OC4_SetConfig+0xa4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d003      	beq.n	8005a60 <TIM_OC4_SetConfig+0x68>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a11      	ldr	r2, [pc, #68]	@ (8005aa0 <TIM_OC4_SetConfig+0xa8>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d109      	bne.n	8005a74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	695b      	ldr	r3, [r3, #20]
 8005a6c:	019b      	lsls	r3, r3, #6
 8005a6e:	697a      	ldr	r2, [r7, #20]
 8005a70:	4313      	orrs	r3, r2
 8005a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685a      	ldr	r2, [r3, #4]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	621a      	str	r2, [r3, #32]
}
 8005a8e:	bf00      	nop
 8005a90:	371c      	adds	r7, #28
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop
 8005a9c:	40010000 	.word	0x40010000
 8005aa0:	40010400 	.word	0x40010400

08005aa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b087      	sub	sp, #28
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f023 0201 	bic.w	r2, r3, #1
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f023 030a 	bic.w	r3, r3, #10
 8005ae0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	621a      	str	r2, [r3, #32]
}
 8005af6:	bf00      	nop
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b02:	b480      	push	{r7}
 8005b04:	b087      	sub	sp, #28
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	f023 0210 	bic.w	r2, r3, #16
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	031b      	lsls	r3, r3, #12
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	621a      	str	r2, [r3, #32]
}
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b085      	sub	sp, #20
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
 8005b6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b7a:	683a      	ldr	r2, [r7, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f043 0307 	orr.w	r3, r3, #7
 8005b84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	609a      	str	r2, [r3, #8]
}
 8005b8c:	bf00      	nop
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b087      	sub	sp, #28
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	607a      	str	r2, [r7, #4]
 8005ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005bb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	021a      	lsls	r2, r3, #8
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	697a      	ldr	r2, [r7, #20]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	609a      	str	r2, [r3, #8]
}
 8005bcc:	bf00      	nop
 8005bce:	371c      	adds	r7, #28
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b087      	sub	sp, #28
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	f003 031f 	and.w	r3, r3, #31
 8005bea:	2201      	movs	r2, #1
 8005bec:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6a1a      	ldr	r2, [r3, #32]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	43db      	mvns	r3, r3
 8005bfa:	401a      	ands	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a1a      	ldr	r2, [r3, #32]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	f003 031f 	and.w	r3, r3, #31
 8005c0a:	6879      	ldr	r1, [r7, #4]
 8005c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c10:	431a      	orrs	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	621a      	str	r2, [r3, #32]
}
 8005c16:	bf00      	nop
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
	...

08005c24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b085      	sub	sp, #20
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d101      	bne.n	8005c3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e05a      	b.n	8005cf2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a21      	ldr	r2, [pc, #132]	@ (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d022      	beq.n	8005cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c88:	d01d      	beq.n	8005cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d018      	beq.n	8005cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1b      	ldr	r2, [pc, #108]	@ (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d013      	beq.n	8005cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1a      	ldr	r2, [pc, #104]	@ (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d00e      	beq.n	8005cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a18      	ldr	r2, [pc, #96]	@ (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d009      	beq.n	8005cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a17      	ldr	r2, [pc, #92]	@ (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d004      	beq.n	8005cc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a15      	ldr	r2, [pc, #84]	@ (8005d18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d10c      	bne.n	8005ce0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005ccc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40000400 	.word	0x40000400
 8005d08:	40000800 	.word	0x40000800
 8005d0c:	40000c00 	.word	0x40000c00
 8005d10:	40010400 	.word	0x40010400
 8005d14:	40014000 	.word	0x40014000
 8005d18:	40001800 	.word	0x40001800

08005d1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d101      	bne.n	8005d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d52:	2301      	movs	r3, #1
 8005d54:	e042      	b.n	8005ddc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d106      	bne.n	8005d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f7fc ff16 	bl	8002b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2224      	movs	r2, #36	@ 0x24
 8005d74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fdd3 	bl	8006934 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	691a      	ldr	r2, [r3, #16]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	695a      	ldr	r2, [r3, #20]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68da      	ldr	r2, [r3, #12]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2220      	movs	r2, #32
 8005dc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3708      	adds	r7, #8
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08a      	sub	sp, #40	@ 0x28
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	60f8      	str	r0, [r7, #12]
 8005dec:	60b9      	str	r1, [r7, #8]
 8005dee:	603b      	str	r3, [r7, #0]
 8005df0:	4613      	mov	r3, r2
 8005df2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005df4:	2300      	movs	r3, #0
 8005df6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b20      	cmp	r3, #32
 8005e02:	d175      	bne.n	8005ef0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <HAL_UART_Transmit+0x2c>
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e06e      	b.n	8005ef2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2221      	movs	r2, #33	@ 0x21
 8005e1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e22:	f7fd f947 	bl	80030b4 <HAL_GetTick>
 8005e26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	88fa      	ldrh	r2, [r7, #6]
 8005e2c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	88fa      	ldrh	r2, [r7, #6]
 8005e32:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e3c:	d108      	bne.n	8005e50 <HAL_UART_Transmit+0x6c>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d104      	bne.n	8005e50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	e003      	b.n	8005e58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e54:	2300      	movs	r3, #0
 8005e56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005e58:	e02e      	b.n	8005eb8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	9300      	str	r3, [sp, #0]
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2200      	movs	r2, #0
 8005e62:	2180      	movs	r1, #128	@ 0x80
 8005e64:	68f8      	ldr	r0, [r7, #12]
 8005e66:	f000 fb37 	bl	80064d8 <UART_WaitOnFlagUntilTimeout>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d005      	beq.n	8005e7c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e03a      	b.n	8005ef2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10b      	bne.n	8005e9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e82:	69bb      	ldr	r3, [r7, #24]
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	461a      	mov	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e90:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e92:	69bb      	ldr	r3, [r7, #24]
 8005e94:	3302      	adds	r3, #2
 8005e96:	61bb      	str	r3, [r7, #24]
 8005e98:	e007      	b.n	8005eaa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	781a      	ldrb	r2, [r3, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d1cb      	bne.n	8005e5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	9300      	str	r3, [sp, #0]
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2140      	movs	r1, #64	@ 0x40
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 fb03 	bl	80064d8 <UART_WaitOnFlagUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d005      	beq.n	8005ee4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2220      	movs	r2, #32
 8005edc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e006      	b.n	8005ef2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2220      	movs	r2, #32
 8005ee8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005eec:	2300      	movs	r3, #0
 8005eee:	e000      	b.n	8005ef2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ef0:	2302      	movs	r3, #2
  }
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3720      	adds	r7, #32
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	4613      	mov	r3, r2
 8005f06:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	2b20      	cmp	r3, #32
 8005f12:	d112      	bne.n	8005f3a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <HAL_UART_Receive_IT+0x26>
 8005f1a:	88fb      	ldrh	r3, [r7, #6]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d101      	bne.n	8005f24 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e00b      	b.n	8005f3c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	2200      	movs	r2, #0
 8005f28:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005f2a:	88fb      	ldrh	r3, [r7, #6]
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	68b9      	ldr	r1, [r7, #8]
 8005f30:	68f8      	ldr	r0, [r7, #12]
 8005f32:	f000 fb2a 	bl	800658a <UART_Start_Receive_IT>
 8005f36:	4603      	mov	r3, r0
 8005f38:	e000      	b.n	8005f3c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005f3a:	2302      	movs	r3, #2
  }
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3710      	adds	r7, #16
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b0ba      	sub	sp, #232	@ 0xe8
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f7a:	f003 030f 	and.w	r3, r3, #15
 8005f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005f82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d10f      	bne.n	8005faa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d009      	beq.n	8005faa <HAL_UART_IRQHandler+0x66>
 8005f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f9a:	f003 0320 	and.w	r3, r3, #32
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 fc07 	bl	80067b6 <UART_Receive_IT>
      return;
 8005fa8:	e273      	b.n	8006492 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005faa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	f000 80de 	beq.w	8006170 <HAL_UART_IRQHandler+0x22c>
 8005fb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fb8:	f003 0301 	and.w	r3, r3, #1
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d106      	bne.n	8005fce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fc4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	f000 80d1 	beq.w	8006170 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00b      	beq.n	8005ff2 <HAL_UART_IRQHandler+0xae>
 8005fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d005      	beq.n	8005ff2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fea:	f043 0201 	orr.w	r2, r3, #1
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff6:	f003 0304 	and.w	r3, r3, #4
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00b      	beq.n	8006016 <HAL_UART_IRQHandler+0xd2>
 8005ffe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006002:	f003 0301 	and.w	r3, r3, #1
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800600e:	f043 0202 	orr.w	r2, r3, #2
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006016:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d00b      	beq.n	800603a <HAL_UART_IRQHandler+0xf6>
 8006022:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b00      	cmp	r3, #0
 800602c:	d005      	beq.n	800603a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006032:	f043 0204 	orr.w	r2, r3, #4
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800603a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800603e:	f003 0308 	and.w	r3, r3, #8
 8006042:	2b00      	cmp	r3, #0
 8006044:	d011      	beq.n	800606a <HAL_UART_IRQHandler+0x126>
 8006046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	d105      	bne.n	800605e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006052:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d005      	beq.n	800606a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006062:	f043 0208 	orr.w	r2, r3, #8
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 820a 	beq.w	8006488 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006074:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d008      	beq.n	8006092 <HAL_UART_IRQHandler+0x14e>
 8006080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 fb92 	bl	80067b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800609c:	2b40      	cmp	r3, #64	@ 0x40
 800609e:	bf0c      	ite	eq
 80060a0:	2301      	moveq	r3, #1
 80060a2:	2300      	movne	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ae:	f003 0308 	and.w	r3, r3, #8
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d103      	bne.n	80060be <HAL_UART_IRQHandler+0x17a>
 80060b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d04f      	beq.n	800615e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fa9d 	bl	80065fe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ce:	2b40      	cmp	r3, #64	@ 0x40
 80060d0:	d141      	bne.n	8006156 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	3314      	adds	r3, #20
 80060d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80060e0:	e853 3f00 	ldrex	r3, [r3]
 80060e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80060e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80060ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	3314      	adds	r3, #20
 80060fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80060fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006102:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006106:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800610a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800610e:	e841 2300 	strex	r3, r2, [r1]
 8006112:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006116:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1d9      	bne.n	80060d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006122:	2b00      	cmp	r3, #0
 8006124:	d013      	beq.n	800614e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800612a:	4a8a      	ldr	r2, [pc, #552]	@ (8006354 <HAL_UART_IRQHandler+0x410>)
 800612c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006132:	4618      	mov	r0, r3
 8006134:	f7fd f940 	bl	80033b8 <HAL_DMA_Abort_IT>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d016      	beq.n	800616c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006142:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006148:	4610      	mov	r0, r2
 800614a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800614c:	e00e      	b.n	800616c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f000 f9ac 	bl	80064ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006154:	e00a      	b.n	800616c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 f9a8 	bl	80064ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800615c:	e006      	b.n	800616c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 f9a4 	bl	80064ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800616a:	e18d      	b.n	8006488 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616c:	bf00      	nop
    return;
 800616e:	e18b      	b.n	8006488 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006174:	2b01      	cmp	r3, #1
 8006176:	f040 8167 	bne.w	8006448 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800617a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800617e:	f003 0310 	and.w	r3, r3, #16
 8006182:	2b00      	cmp	r3, #0
 8006184:	f000 8160 	beq.w	8006448 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800618c:	f003 0310 	and.w	r3, r3, #16
 8006190:	2b00      	cmp	r3, #0
 8006192:	f000 8159 	beq.w	8006448 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006196:	2300      	movs	r3, #0
 8006198:	60bb      	str	r3, [r7, #8]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	60bb      	str	r3, [r7, #8]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	60bb      	str	r3, [r7, #8]
 80061aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b6:	2b40      	cmp	r3, #64	@ 0x40
 80061b8:	f040 80ce 	bne.w	8006358 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80061c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 80a9 	beq.w	8006324 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80061d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061da:	429a      	cmp	r2, r3
 80061dc:	f080 80a2 	bcs.w	8006324 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061f2:	f000 8088 	beq.w	8006306 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	330c      	adds	r3, #12
 80061fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006204:	e853 3f00 	ldrex	r3, [r3]
 8006208:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800620c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006210:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006214:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	330c      	adds	r3, #12
 800621e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006222:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006226:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800622e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006232:	e841 2300 	strex	r3, r2, [r1]
 8006236:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800623a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1d9      	bne.n	80061f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3314      	adds	r3, #20
 8006248:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006252:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006254:	f023 0301 	bic.w	r3, r3, #1
 8006258:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3314      	adds	r3, #20
 8006262:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006266:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800626a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800626e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006272:	e841 2300 	strex	r3, r2, [r1]
 8006276:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006278:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800627a:	2b00      	cmp	r3, #0
 800627c:	d1e1      	bne.n	8006242 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	3314      	adds	r3, #20
 8006284:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006286:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006288:	e853 3f00 	ldrex	r3, [r3]
 800628c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800628e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006294:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3314      	adds	r3, #20
 800629e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80062a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80062a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80062a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80062aa:	e841 2300 	strex	r3, r2, [r1]
 80062ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80062b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1e3      	bne.n	800627e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	330c      	adds	r3, #12
 80062ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ce:	e853 3f00 	ldrex	r3, [r3]
 80062d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80062d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062d6:	f023 0310 	bic.w	r3, r3, #16
 80062da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	330c      	adds	r3, #12
 80062e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80062e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80062ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80062ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80062f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e3      	bne.n	80062c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006300:	4618      	mov	r0, r3
 8006302:	f7fc ffe9 	bl	80032d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2202      	movs	r2, #2
 800630a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006314:	b29b      	uxth	r3, r3
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	b29b      	uxth	r3, r3
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f000 f8cf 	bl	80064c0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006322:	e0b3      	b.n	800648c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006328:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800632c:	429a      	cmp	r2, r3
 800632e:	f040 80ad 	bne.w	800648c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800633c:	f040 80a6 	bne.w	800648c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2202      	movs	r2, #2
 8006344:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 f8b7 	bl	80064c0 <HAL_UARTEx_RxEventCallback>
      return;
 8006352:	e09b      	b.n	800648c <HAL_UART_IRQHandler+0x548>
 8006354:	080066c5 	.word	0x080066c5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006360:	b29b      	uxth	r3, r3
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800636c:	b29b      	uxth	r3, r3
 800636e:	2b00      	cmp	r3, #0
 8006370:	f000 808e 	beq.w	8006490 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8006374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006378:	2b00      	cmp	r3, #0
 800637a:	f000 8089 	beq.w	8006490 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	330c      	adds	r3, #12
 8006384:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006388:	e853 3f00 	ldrex	r3, [r3]
 800638c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800638e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006390:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006394:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	330c      	adds	r3, #12
 800639e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80063a2:	647a      	str	r2, [r7, #68]	@ 0x44
 80063a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063aa:	e841 2300 	strex	r3, r2, [r1]
 80063ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1e3      	bne.n	800637e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3314      	adds	r3, #20
 80063bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	e853 3f00 	ldrex	r3, [r3]
 80063c4:	623b      	str	r3, [r7, #32]
   return(result);
 80063c6:	6a3b      	ldr	r3, [r7, #32]
 80063c8:	f023 0301 	bic.w	r3, r3, #1
 80063cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	3314      	adds	r3, #20
 80063d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80063da:	633a      	str	r2, [r7, #48]	@ 0x30
 80063dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063e2:	e841 2300 	strex	r3, r2, [r1]
 80063e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1e3      	bne.n	80063b6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	330c      	adds	r3, #12
 8006402:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	e853 3f00 	ldrex	r3, [r3]
 800640a:	60fb      	str	r3, [r7, #12]
   return(result);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0310 	bic.w	r3, r3, #16
 8006412:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	330c      	adds	r3, #12
 800641c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006420:	61fa      	str	r2, [r7, #28]
 8006422:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006424:	69b9      	ldr	r1, [r7, #24]
 8006426:	69fa      	ldr	r2, [r7, #28]
 8006428:	e841 2300 	strex	r3, r2, [r1]
 800642c:	617b      	str	r3, [r7, #20]
   return(result);
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1e3      	bne.n	80063fc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2202      	movs	r2, #2
 8006438:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800643a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f83d 	bl	80064c0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006446:	e023      	b.n	8006490 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800644c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006450:	2b00      	cmp	r3, #0
 8006452:	d009      	beq.n	8006468 <HAL_UART_IRQHandler+0x524>
 8006454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006458:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800645c:	2b00      	cmp	r3, #0
 800645e:	d003      	beq.n	8006468 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 f940 	bl	80066e6 <UART_Transmit_IT>
    return;
 8006466:	e014      	b.n	8006492 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006468:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800646c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00e      	beq.n	8006492 <HAL_UART_IRQHandler+0x54e>
 8006474:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800647c:	2b00      	cmp	r3, #0
 800647e:	d008      	beq.n	8006492 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 f980 	bl	8006786 <UART_EndTransmit_IT>
    return;
 8006486:	e004      	b.n	8006492 <HAL_UART_IRQHandler+0x54e>
    return;
 8006488:	bf00      	nop
 800648a:	e002      	b.n	8006492 <HAL_UART_IRQHandler+0x54e>
      return;
 800648c:	bf00      	nop
 800648e:	e000      	b.n	8006492 <HAL_UART_IRQHandler+0x54e>
      return;
 8006490:	bf00      	nop
  }
}
 8006492:	37e8      	adds	r7, #232	@ 0xe8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	460b      	mov	r3, r1
 80064ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	60f8      	str	r0, [r7, #12]
 80064e0:	60b9      	str	r1, [r7, #8]
 80064e2:	603b      	str	r3, [r7, #0]
 80064e4:	4613      	mov	r3, r2
 80064e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e8:	e03b      	b.n	8006562 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f0:	d037      	beq.n	8006562 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064f2:	f7fc fddf 	bl	80030b4 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	6a3a      	ldr	r2, [r7, #32]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d302      	bcc.n	8006508 <UART_WaitOnFlagUntilTimeout+0x30>
 8006502:	6a3b      	ldr	r3, [r7, #32]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006508:	2303      	movs	r3, #3
 800650a:	e03a      	b.n	8006582 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f003 0304 	and.w	r3, r3, #4
 8006516:	2b00      	cmp	r3, #0
 8006518:	d023      	beq.n	8006562 <UART_WaitOnFlagUntilTimeout+0x8a>
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b80      	cmp	r3, #128	@ 0x80
 800651e:	d020      	beq.n	8006562 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	2b40      	cmp	r3, #64	@ 0x40
 8006524:	d01d      	beq.n	8006562 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f003 0308 	and.w	r3, r3, #8
 8006530:	2b08      	cmp	r3, #8
 8006532:	d116      	bne.n	8006562 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006534:	2300      	movs	r3, #0
 8006536:	617b      	str	r3, [r7, #20]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	617b      	str	r3, [r7, #20]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	617b      	str	r3, [r7, #20]
 8006548:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 f857 	bl	80065fe <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2208      	movs	r2, #8
 8006554:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800655e:	2301      	movs	r3, #1
 8006560:	e00f      	b.n	8006582 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	4013      	ands	r3, r2
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	429a      	cmp	r2, r3
 8006570:	bf0c      	ite	eq
 8006572:	2301      	moveq	r3, #1
 8006574:	2300      	movne	r3, #0
 8006576:	b2db      	uxtb	r3, r3
 8006578:	461a      	mov	r2, r3
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	429a      	cmp	r2, r3
 800657e:	d0b4      	beq.n	80064ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800658a:	b480      	push	{r7}
 800658c:	b085      	sub	sp, #20
 800658e:	af00      	add	r7, sp, #0
 8006590:	60f8      	str	r0, [r7, #12]
 8006592:	60b9      	str	r1, [r7, #8]
 8006594:	4613      	mov	r3, r2
 8006596:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	88fa      	ldrh	r2, [r7, #6]
 80065a2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	88fa      	ldrh	r2, [r7, #6]
 80065a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2222      	movs	r2, #34	@ 0x22
 80065b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d007      	beq.n	80065d0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80065ce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	695a      	ldr	r2, [r3, #20]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f042 0201 	orr.w	r2, r2, #1
 80065de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68da      	ldr	r2, [r3, #12]
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f042 0220 	orr.w	r2, r2, #32
 80065ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80065fe:	b480      	push	{r7}
 8006600:	b095      	sub	sp, #84	@ 0x54
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	330c      	adds	r3, #12
 800660c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006618:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800661c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	330c      	adds	r3, #12
 8006624:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006626:	643a      	str	r2, [r7, #64]	@ 0x40
 8006628:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800662c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e5      	bne.n	8006606 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3314      	adds	r3, #20
 8006640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	61fb      	str	r3, [r7, #28]
   return(result);
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f023 0301 	bic.w	r3, r3, #1
 8006650:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3314      	adds	r3, #20
 8006658:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800665a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800665c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006660:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e5      	bne.n	800663a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006672:	2b01      	cmp	r3, #1
 8006674:	d119      	bne.n	80066aa <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	330c      	adds	r3, #12
 800667c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	60bb      	str	r3, [r7, #8]
   return(result);
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f023 0310 	bic.w	r3, r3, #16
 800668c:	647b      	str	r3, [r7, #68]	@ 0x44
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	330c      	adds	r3, #12
 8006694:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006696:	61ba      	str	r2, [r7, #24]
 8006698:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669a:	6979      	ldr	r1, [r7, #20]
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	613b      	str	r3, [r7, #16]
   return(result);
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e5      	bne.n	8006676 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80066b8:	bf00      	nop
 80066ba:	3754      	adds	r7, #84	@ 0x54
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2200      	movs	r2, #0
 80066d6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f7ff fee7 	bl	80064ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066de:	bf00      	nop
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b085      	sub	sp, #20
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	2b21      	cmp	r3, #33	@ 0x21
 80066f8:	d13e      	bne.n	8006778 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006702:	d114      	bne.n	800672e <UART_Transmit_IT+0x48>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	691b      	ldr	r3, [r3, #16]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d110      	bne.n	800672e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a1b      	ldr	r3, [r3, #32]
 8006710:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006720:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	1c9a      	adds	r2, r3, #2
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	621a      	str	r2, [r3, #32]
 800672c:	e008      	b.n	8006740 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	1c59      	adds	r1, r3, #1
 8006734:	687a      	ldr	r2, [r7, #4]
 8006736:	6211      	str	r1, [r2, #32]
 8006738:	781a      	ldrb	r2, [r3, #0]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006744:	b29b      	uxth	r3, r3
 8006746:	3b01      	subs	r3, #1
 8006748:	b29b      	uxth	r3, r3
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	4619      	mov	r1, r3
 800674e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006750:	2b00      	cmp	r3, #0
 8006752:	d10f      	bne.n	8006774 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006762:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68da      	ldr	r2, [r3, #12]
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006772:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006774:	2300      	movs	r3, #0
 8006776:	e000      	b.n	800677a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006778:	2302      	movs	r3, #2
  }
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006786:	b580      	push	{r7, lr}
 8006788:	b082      	sub	sp, #8
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	68da      	ldr	r2, [r3, #12]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800679c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f7ff fe76 	bl	8006498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b08c      	sub	sp, #48	@ 0x30
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80067be:	2300      	movs	r3, #0
 80067c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b22      	cmp	r3, #34	@ 0x22
 80067d0:	f040 80aa 	bne.w	8006928 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067dc:	d115      	bne.n	800680a <UART_Receive_IT+0x54>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d111      	bne.n	800680a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006802:	1c9a      	adds	r2, r3, #2
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	629a      	str	r2, [r3, #40]	@ 0x28
 8006808:	e024      	b.n	8006854 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006818:	d007      	beq.n	800682a <UART_Receive_IT+0x74>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <UART_Receive_IT+0x82>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d106      	bne.n	8006838 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685b      	ldr	r3, [r3, #4]
 8006830:	b2da      	uxtb	r2, r3
 8006832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	e008      	b.n	800684a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	b2db      	uxtb	r3, r3
 8006840:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006844:	b2da      	uxtb	r2, r3
 8006846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006848:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006858:	b29b      	uxth	r3, r3
 800685a:	3b01      	subs	r3, #1
 800685c:	b29b      	uxth	r3, r3
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	4619      	mov	r1, r3
 8006862:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006864:	2b00      	cmp	r3, #0
 8006866:	d15d      	bne.n	8006924 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68da      	ldr	r2, [r3, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f022 0220 	bic.w	r2, r2, #32
 8006876:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68da      	ldr	r2, [r3, #12]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006886:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	695a      	ldr	r2, [r3, #20]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f022 0201 	bic.w	r2, r2, #1
 8006896:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2220      	movs	r2, #32
 800689c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d135      	bne.n	800691a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	330c      	adds	r3, #12
 80068ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	e853 3f00 	ldrex	r3, [r3]
 80068c2:	613b      	str	r3, [r7, #16]
   return(result);
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f023 0310 	bic.w	r3, r3, #16
 80068ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	330c      	adds	r3, #12
 80068d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068d4:	623a      	str	r2, [r7, #32]
 80068d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d8:	69f9      	ldr	r1, [r7, #28]
 80068da:	6a3a      	ldr	r2, [r7, #32]
 80068dc:	e841 2300 	strex	r3, r2, [r1]
 80068e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d1e5      	bne.n	80068b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0310 	and.w	r3, r3, #16
 80068f2:	2b10      	cmp	r3, #16
 80068f4:	d10a      	bne.n	800690c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	60fb      	str	r3, [r7, #12]
 800690a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f7ff fdd4 	bl	80064c0 <HAL_UARTEx_RxEventCallback>
 8006918:	e002      	b.n	8006920 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7fa fce4 	bl	80012e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006920:	2300      	movs	r3, #0
 8006922:	e002      	b.n	800692a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006924:	2300      	movs	r3, #0
 8006926:	e000      	b.n	800692a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006928:	2302      	movs	r3, #2
  }
}
 800692a:	4618      	mov	r0, r3
 800692c:	3730      	adds	r7, #48	@ 0x30
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
	...

08006934 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006938:	b0c0      	sub	sp, #256	@ 0x100
 800693a:	af00      	add	r7, sp, #0
 800693c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800694c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006950:	68d9      	ldr	r1, [r3, #12]
 8006952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	ea40 0301 	orr.w	r3, r0, r1
 800695c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800695e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006968:	691b      	ldr	r3, [r3, #16]
 800696a:	431a      	orrs	r2, r3
 800696c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006970:	695b      	ldr	r3, [r3, #20]
 8006972:	431a      	orrs	r2, r3
 8006974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006978:	69db      	ldr	r3, [r3, #28]
 800697a:	4313      	orrs	r3, r2
 800697c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800698c:	f021 010c 	bic.w	r1, r1, #12
 8006990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800699a:	430b      	orrs	r3, r1
 800699c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800699e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80069aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ae:	6999      	ldr	r1, [r3, #24]
 80069b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	ea40 0301 	orr.w	r3, r0, r1
 80069ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	4b8f      	ldr	r3, [pc, #572]	@ (8006c00 <UART_SetConfig+0x2cc>)
 80069c4:	429a      	cmp	r2, r3
 80069c6:	d005      	beq.n	80069d4 <UART_SetConfig+0xa0>
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	4b8d      	ldr	r3, [pc, #564]	@ (8006c04 <UART_SetConfig+0x2d0>)
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d104      	bne.n	80069de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80069d4:	f7fe f812 	bl	80049fc <HAL_RCC_GetPCLK2Freq>
 80069d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80069dc:	e003      	b.n	80069e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80069de:	f7fd fff9 	bl	80049d4 <HAL_RCC_GetPCLK1Freq>
 80069e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069f0:	f040 810c 	bne.w	8006c0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80069f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80069fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a06:	4622      	mov	r2, r4
 8006a08:	462b      	mov	r3, r5
 8006a0a:	1891      	adds	r1, r2, r2
 8006a0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a0e:	415b      	adcs	r3, r3
 8006a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a16:	4621      	mov	r1, r4
 8006a18:	eb12 0801 	adds.w	r8, r2, r1
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	eb43 0901 	adc.w	r9, r3, r1
 8006a22:	f04f 0200 	mov.w	r2, #0
 8006a26:	f04f 0300 	mov.w	r3, #0
 8006a2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a36:	4690      	mov	r8, r2
 8006a38:	4699      	mov	r9, r3
 8006a3a:	4623      	mov	r3, r4
 8006a3c:	eb18 0303 	adds.w	r3, r8, r3
 8006a40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006a44:	462b      	mov	r3, r5
 8006a46:	eb49 0303 	adc.w	r3, r9, r3
 8006a4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006a5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006a5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006a62:	460b      	mov	r3, r1
 8006a64:	18db      	adds	r3, r3, r3
 8006a66:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a68:	4613      	mov	r3, r2
 8006a6a:	eb42 0303 	adc.w	r3, r2, r3
 8006a6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006a74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006a78:	f7fa f8de 	bl	8000c38 <__aeabi_uldivmod>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	460b      	mov	r3, r1
 8006a80:	4b61      	ldr	r3, [pc, #388]	@ (8006c08 <UART_SetConfig+0x2d4>)
 8006a82:	fba3 2302 	umull	r2, r3, r3, r2
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	011c      	lsls	r4, r3, #4
 8006a8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006a98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006a9c:	4642      	mov	r2, r8
 8006a9e:	464b      	mov	r3, r9
 8006aa0:	1891      	adds	r1, r2, r2
 8006aa2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006aa4:	415b      	adcs	r3, r3
 8006aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006aa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006aac:	4641      	mov	r1, r8
 8006aae:	eb12 0a01 	adds.w	sl, r2, r1
 8006ab2:	4649      	mov	r1, r9
 8006ab4:	eb43 0b01 	adc.w	fp, r3, r1
 8006ab8:	f04f 0200 	mov.w	r2, #0
 8006abc:	f04f 0300 	mov.w	r3, #0
 8006ac0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ac4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ac8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006acc:	4692      	mov	sl, r2
 8006ace:	469b      	mov	fp, r3
 8006ad0:	4643      	mov	r3, r8
 8006ad2:	eb1a 0303 	adds.w	r3, sl, r3
 8006ad6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ada:	464b      	mov	r3, r9
 8006adc:	eb4b 0303 	adc.w	r3, fp, r3
 8006ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006af0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006af4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006af8:	460b      	mov	r3, r1
 8006afa:	18db      	adds	r3, r3, r3
 8006afc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006afe:	4613      	mov	r3, r2
 8006b00:	eb42 0303 	adc.w	r3, r2, r3
 8006b04:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b0e:	f7fa f893 	bl	8000c38 <__aeabi_uldivmod>
 8006b12:	4602      	mov	r2, r0
 8006b14:	460b      	mov	r3, r1
 8006b16:	4611      	mov	r1, r2
 8006b18:	4b3b      	ldr	r3, [pc, #236]	@ (8006c08 <UART_SetConfig+0x2d4>)
 8006b1a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b1e:	095b      	lsrs	r3, r3, #5
 8006b20:	2264      	movs	r2, #100	@ 0x64
 8006b22:	fb02 f303 	mul.w	r3, r2, r3
 8006b26:	1acb      	subs	r3, r1, r3
 8006b28:	00db      	lsls	r3, r3, #3
 8006b2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006b2e:	4b36      	ldr	r3, [pc, #216]	@ (8006c08 <UART_SetConfig+0x2d4>)
 8006b30:	fba3 2302 	umull	r2, r3, r3, r2
 8006b34:	095b      	lsrs	r3, r3, #5
 8006b36:	005b      	lsls	r3, r3, #1
 8006b38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006b3c:	441c      	add	r4, r3
 8006b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b42:	2200      	movs	r2, #0
 8006b44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006b48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006b4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006b50:	4642      	mov	r2, r8
 8006b52:	464b      	mov	r3, r9
 8006b54:	1891      	adds	r1, r2, r2
 8006b56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006b58:	415b      	adcs	r3, r3
 8006b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006b60:	4641      	mov	r1, r8
 8006b62:	1851      	adds	r1, r2, r1
 8006b64:	6339      	str	r1, [r7, #48]	@ 0x30
 8006b66:	4649      	mov	r1, r9
 8006b68:	414b      	adcs	r3, r1
 8006b6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b6c:	f04f 0200 	mov.w	r2, #0
 8006b70:	f04f 0300 	mov.w	r3, #0
 8006b74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006b78:	4659      	mov	r1, fp
 8006b7a:	00cb      	lsls	r3, r1, #3
 8006b7c:	4651      	mov	r1, sl
 8006b7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b82:	4651      	mov	r1, sl
 8006b84:	00ca      	lsls	r2, r1, #3
 8006b86:	4610      	mov	r0, r2
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	4642      	mov	r2, r8
 8006b8e:	189b      	adds	r3, r3, r2
 8006b90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b94:	464b      	mov	r3, r9
 8006b96:	460a      	mov	r2, r1
 8006b98:	eb42 0303 	adc.w	r3, r2, r3
 8006b9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006bac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006bb0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006bb4:	460b      	mov	r3, r1
 8006bb6:	18db      	adds	r3, r3, r3
 8006bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bba:	4613      	mov	r3, r2
 8006bbc:	eb42 0303 	adc.w	r3, r2, r3
 8006bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006bc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006bca:	f7fa f835 	bl	8000c38 <__aeabi_uldivmod>
 8006bce:	4602      	mov	r2, r0
 8006bd0:	460b      	mov	r3, r1
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c08 <UART_SetConfig+0x2d4>)
 8006bd4:	fba3 1302 	umull	r1, r3, r3, r2
 8006bd8:	095b      	lsrs	r3, r3, #5
 8006bda:	2164      	movs	r1, #100	@ 0x64
 8006bdc:	fb01 f303 	mul.w	r3, r1, r3
 8006be0:	1ad3      	subs	r3, r2, r3
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	3332      	adds	r3, #50	@ 0x32
 8006be6:	4a08      	ldr	r2, [pc, #32]	@ (8006c08 <UART_SetConfig+0x2d4>)
 8006be8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bec:	095b      	lsrs	r3, r3, #5
 8006bee:	f003 0207 	and.w	r2, r3, #7
 8006bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4422      	add	r2, r4
 8006bfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006bfc:	e106      	b.n	8006e0c <UART_SetConfig+0x4d8>
 8006bfe:	bf00      	nop
 8006c00:	40011000 	.word	0x40011000
 8006c04:	40011400 	.word	0x40011400
 8006c08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c10:	2200      	movs	r2, #0
 8006c12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c1e:	4642      	mov	r2, r8
 8006c20:	464b      	mov	r3, r9
 8006c22:	1891      	adds	r1, r2, r2
 8006c24:	6239      	str	r1, [r7, #32]
 8006c26:	415b      	adcs	r3, r3
 8006c28:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c2e:	4641      	mov	r1, r8
 8006c30:	1854      	adds	r4, r2, r1
 8006c32:	4649      	mov	r1, r9
 8006c34:	eb43 0501 	adc.w	r5, r3, r1
 8006c38:	f04f 0200 	mov.w	r2, #0
 8006c3c:	f04f 0300 	mov.w	r3, #0
 8006c40:	00eb      	lsls	r3, r5, #3
 8006c42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c46:	00e2      	lsls	r2, r4, #3
 8006c48:	4614      	mov	r4, r2
 8006c4a:	461d      	mov	r5, r3
 8006c4c:	4643      	mov	r3, r8
 8006c4e:	18e3      	adds	r3, r4, r3
 8006c50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006c54:	464b      	mov	r3, r9
 8006c56:	eb45 0303 	adc.w	r3, r5, r3
 8006c5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006c6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006c6e:	f04f 0200 	mov.w	r2, #0
 8006c72:	f04f 0300 	mov.w	r3, #0
 8006c76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006c7a:	4629      	mov	r1, r5
 8006c7c:	008b      	lsls	r3, r1, #2
 8006c7e:	4621      	mov	r1, r4
 8006c80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c84:	4621      	mov	r1, r4
 8006c86:	008a      	lsls	r2, r1, #2
 8006c88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006c8c:	f7f9 ffd4 	bl	8000c38 <__aeabi_uldivmod>
 8006c90:	4602      	mov	r2, r0
 8006c92:	460b      	mov	r3, r1
 8006c94:	4b60      	ldr	r3, [pc, #384]	@ (8006e18 <UART_SetConfig+0x4e4>)
 8006c96:	fba3 2302 	umull	r2, r3, r3, r2
 8006c9a:	095b      	lsrs	r3, r3, #5
 8006c9c:	011c      	lsls	r4, r3, #4
 8006c9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ca8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006cac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006cb0:	4642      	mov	r2, r8
 8006cb2:	464b      	mov	r3, r9
 8006cb4:	1891      	adds	r1, r2, r2
 8006cb6:	61b9      	str	r1, [r7, #24]
 8006cb8:	415b      	adcs	r3, r3
 8006cba:	61fb      	str	r3, [r7, #28]
 8006cbc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006cc0:	4641      	mov	r1, r8
 8006cc2:	1851      	adds	r1, r2, r1
 8006cc4:	6139      	str	r1, [r7, #16]
 8006cc6:	4649      	mov	r1, r9
 8006cc8:	414b      	adcs	r3, r1
 8006cca:	617b      	str	r3, [r7, #20]
 8006ccc:	f04f 0200 	mov.w	r2, #0
 8006cd0:	f04f 0300 	mov.w	r3, #0
 8006cd4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cd8:	4659      	mov	r1, fp
 8006cda:	00cb      	lsls	r3, r1, #3
 8006cdc:	4651      	mov	r1, sl
 8006cde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ce2:	4651      	mov	r1, sl
 8006ce4:	00ca      	lsls	r2, r1, #3
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4603      	mov	r3, r0
 8006cec:	4642      	mov	r2, r8
 8006cee:	189b      	adds	r3, r3, r2
 8006cf0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006cf4:	464b      	mov	r3, r9
 8006cf6:	460a      	mov	r2, r1
 8006cf8:	eb42 0303 	adc.w	r3, r2, r3
 8006cfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d0c:	f04f 0200 	mov.w	r2, #0
 8006d10:	f04f 0300 	mov.w	r3, #0
 8006d14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d18:	4649      	mov	r1, r9
 8006d1a:	008b      	lsls	r3, r1, #2
 8006d1c:	4641      	mov	r1, r8
 8006d1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d22:	4641      	mov	r1, r8
 8006d24:	008a      	lsls	r2, r1, #2
 8006d26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006d2a:	f7f9 ff85 	bl	8000c38 <__aeabi_uldivmod>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	460b      	mov	r3, r1
 8006d32:	4611      	mov	r1, r2
 8006d34:	4b38      	ldr	r3, [pc, #224]	@ (8006e18 <UART_SetConfig+0x4e4>)
 8006d36:	fba3 2301 	umull	r2, r3, r3, r1
 8006d3a:	095b      	lsrs	r3, r3, #5
 8006d3c:	2264      	movs	r2, #100	@ 0x64
 8006d3e:	fb02 f303 	mul.w	r3, r2, r3
 8006d42:	1acb      	subs	r3, r1, r3
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	3332      	adds	r3, #50	@ 0x32
 8006d48:	4a33      	ldr	r2, [pc, #204]	@ (8006e18 <UART_SetConfig+0x4e4>)
 8006d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4e:	095b      	lsrs	r3, r3, #5
 8006d50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006d54:	441c      	add	r4, r3
 8006d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006d5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006d60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006d64:	4642      	mov	r2, r8
 8006d66:	464b      	mov	r3, r9
 8006d68:	1891      	adds	r1, r2, r2
 8006d6a:	60b9      	str	r1, [r7, #8]
 8006d6c:	415b      	adcs	r3, r3
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d74:	4641      	mov	r1, r8
 8006d76:	1851      	adds	r1, r2, r1
 8006d78:	6039      	str	r1, [r7, #0]
 8006d7a:	4649      	mov	r1, r9
 8006d7c:	414b      	adcs	r3, r1
 8006d7e:	607b      	str	r3, [r7, #4]
 8006d80:	f04f 0200 	mov.w	r2, #0
 8006d84:	f04f 0300 	mov.w	r3, #0
 8006d88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d8c:	4659      	mov	r1, fp
 8006d8e:	00cb      	lsls	r3, r1, #3
 8006d90:	4651      	mov	r1, sl
 8006d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d96:	4651      	mov	r1, sl
 8006d98:	00ca      	lsls	r2, r1, #3
 8006d9a:	4610      	mov	r0, r2
 8006d9c:	4619      	mov	r1, r3
 8006d9e:	4603      	mov	r3, r0
 8006da0:	4642      	mov	r2, r8
 8006da2:	189b      	adds	r3, r3, r2
 8006da4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006da6:	464b      	mov	r3, r9
 8006da8:	460a      	mov	r2, r1
 8006daa:	eb42 0303 	adc.w	r3, r2, r3
 8006dae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	2200      	movs	r2, #0
 8006db8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006dba:	667a      	str	r2, [r7, #100]	@ 0x64
 8006dbc:	f04f 0200 	mov.w	r2, #0
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006dc8:	4649      	mov	r1, r9
 8006dca:	008b      	lsls	r3, r1, #2
 8006dcc:	4641      	mov	r1, r8
 8006dce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006dd2:	4641      	mov	r1, r8
 8006dd4:	008a      	lsls	r2, r1, #2
 8006dd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006dda:	f7f9 ff2d 	bl	8000c38 <__aeabi_uldivmod>
 8006dde:	4602      	mov	r2, r0
 8006de0:	460b      	mov	r3, r1
 8006de2:	4b0d      	ldr	r3, [pc, #52]	@ (8006e18 <UART_SetConfig+0x4e4>)
 8006de4:	fba3 1302 	umull	r1, r3, r3, r2
 8006de8:	095b      	lsrs	r3, r3, #5
 8006dea:	2164      	movs	r1, #100	@ 0x64
 8006dec:	fb01 f303 	mul.w	r3, r1, r3
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	3332      	adds	r3, #50	@ 0x32
 8006df6:	4a08      	ldr	r2, [pc, #32]	@ (8006e18 <UART_SetConfig+0x4e4>)
 8006df8:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfc:	095b      	lsrs	r3, r3, #5
 8006dfe:	f003 020f 	and.w	r2, r3, #15
 8006e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4422      	add	r2, r4
 8006e0a:	609a      	str	r2, [r3, #8]
}
 8006e0c:	bf00      	nop
 8006e0e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e12:	46bd      	mov	sp, r7
 8006e14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e18:	51eb851f 	.word	0x51eb851f

08006e1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f103 0208 	add.w	r2, r3, #8
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f04f 32ff 	mov.w	r2, #4294967295
 8006e34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f103 0208 	add.w	r2, r3, #8
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f103 0208 	add.w	r2, r3, #8
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006e50:	bf00      	nop
 8006e52:	370c      	adds	r7, #12
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006e6a:	bf00      	nop
 8006e6c:	370c      	adds	r7, #12
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006e76:	b480      	push	{r7}
 8006e78:	b085      	sub	sp, #20
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	689a      	ldr	r2, [r3, #8]
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	683a      	ldr	r2, [r7, #0]
 8006e9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	601a      	str	r2, [r3, #0]
}
 8006eb2:	bf00      	nop
 8006eb4:	3714      	adds	r7, #20
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr

08006ebe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ebe:	b480      	push	{r7}
 8006ec0:	b085      	sub	sp, #20
 8006ec2:	af00      	add	r7, sp, #0
 8006ec4:	6078      	str	r0, [r7, #4]
 8006ec6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed4:	d103      	bne.n	8006ede <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	e00c      	b.n	8006ef8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	e002      	b.n	8006eec <vListInsert+0x2e>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d2f6      	bcs.n	8006ee6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f00:	683b      	ldr	r3, [r7, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	683a      	ldr	r2, [r7, #0]
 8006f06:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	68fa      	ldr	r2, [r7, #12]
 8006f0c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	683a      	ldr	r2, [r7, #0]
 8006f12:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	1c5a      	adds	r2, r3, #1
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	601a      	str	r2, [r3, #0]
}
 8006f24:	bf00      	nop
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f30:	b480      	push	{r7}
 8006f32:	b085      	sub	sp, #20
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	6892      	ldr	r2, [r2, #8]
 8006f46:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	6852      	ldr	r2, [r2, #4]
 8006f50:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d103      	bne.n	8006f64 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	1e5a      	subs	r2, r3, #1
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10b      	bne.n	8006fb0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9c:	f383 8811 	msr	BASEPRI, r3
 8006fa0:	f3bf 8f6f 	isb	sy
 8006fa4:	f3bf 8f4f 	dsb	sy
 8006fa8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006faa:	bf00      	nop
 8006fac:	bf00      	nop
 8006fae:	e7fd      	b.n	8006fac <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006fb0:	f001 ff82 	bl	8008eb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fbc:	68f9      	ldr	r1, [r7, #12]
 8006fbe:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006fc0:	fb01 f303 	mul.w	r3, r1, r3
 8006fc4:	441a      	add	r2, r3
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	68f9      	ldr	r1, [r7, #12]
 8006fe4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006fe6:	fb01 f303 	mul.w	r3, r1, r3
 8006fea:	441a      	add	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	22ff      	movs	r2, #255	@ 0xff
 8006ff4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	22ff      	movs	r2, #255	@ 0xff
 8006ffc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d114      	bne.n	8007030 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d01a      	beq.n	8007044 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3310      	adds	r3, #16
 8007012:	4618      	mov	r0, r3
 8007014:	f001 f856 	bl	80080c4 <xTaskRemoveFromEventList>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d012      	beq.n	8007044 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800701e:	4b0d      	ldr	r3, [pc, #52]	@ (8007054 <xQueueGenericReset+0xd0>)
 8007020:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	f3bf 8f6f 	isb	sy
 800702e:	e009      	b.n	8007044 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	3310      	adds	r3, #16
 8007034:	4618      	mov	r0, r3
 8007036:	f7ff fef1 	bl	8006e1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3324      	adds	r3, #36	@ 0x24
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff feec 	bl	8006e1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007044:	f001 ff6a 	bl	8008f1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007048:	2301      	movs	r3, #1
}
 800704a:	4618      	mov	r0, r3
 800704c:	3710      	adds	r7, #16
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	e000ed04 	.word	0xe000ed04

08007058 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007058:	b580      	push	{r7, lr}
 800705a:	b08a      	sub	sp, #40	@ 0x28
 800705c:	af02      	add	r7, sp, #8
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	4613      	mov	r3, r2
 8007064:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d10b      	bne.n	8007084 <xQueueGenericCreate+0x2c>
	__asm volatile
 800706c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007070:	f383 8811 	msr	BASEPRI, r3
 8007074:	f3bf 8f6f 	isb	sy
 8007078:	f3bf 8f4f 	dsb	sy
 800707c:	613b      	str	r3, [r7, #16]
}
 800707e:	bf00      	nop
 8007080:	bf00      	nop
 8007082:	e7fd      	b.n	8007080 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d102      	bne.n	8007090 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800708a:	2300      	movs	r3, #0
 800708c:	61fb      	str	r3, [r7, #28]
 800708e:	e004      	b.n	800709a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	68ba      	ldr	r2, [r7, #8]
 8007094:	fb02 f303 	mul.w	r3, r2, r3
 8007098:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	3350      	adds	r3, #80	@ 0x50
 800709e:	4618      	mov	r0, r3
 80070a0:	f002 f82c 	bl	80090fc <pvPortMalloc>
 80070a4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d00d      	beq.n	80070c8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80070ac:	69bb      	ldr	r3, [r7, #24]
 80070ae:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070b0:	697b      	ldr	r3, [r7, #20]
 80070b2:	3350      	adds	r3, #80	@ 0x50
 80070b4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80070b6:	79fa      	ldrb	r2, [r7, #7]
 80070b8:	69bb      	ldr	r3, [r7, #24]
 80070ba:	9300      	str	r3, [sp, #0]
 80070bc:	4613      	mov	r3, r2
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	68b9      	ldr	r1, [r7, #8]
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 f805 	bl	80070d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80070c8:	69bb      	ldr	r3, [r7, #24]
	}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3720      	adds	r7, #32
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}

080070d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80070d2:	b580      	push	{r7, lr}
 80070d4:	b084      	sub	sp, #16
 80070d6:	af00      	add	r7, sp, #0
 80070d8:	60f8      	str	r0, [r7, #12]
 80070da:	60b9      	str	r1, [r7, #8]
 80070dc:	607a      	str	r2, [r7, #4]
 80070de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d103      	bne.n	80070ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	69ba      	ldr	r2, [r7, #24]
 80070ea:	601a      	str	r2, [r3, #0]
 80070ec:	e002      	b.n	80070f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007100:	2101      	movs	r1, #1
 8007102:	69b8      	ldr	r0, [r7, #24]
 8007104:	f7ff ff3e 	bl	8006f84 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007108:	69bb      	ldr	r3, [r7, #24]
 800710a:	78fa      	ldrb	r2, [r7, #3]
 800710c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007110:	bf00      	nop
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08e      	sub	sp, #56	@ 0x38
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007126:	2300      	movs	r3, #0
 8007128:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800712e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10b      	bne.n	800714c <xQueueGenericSend+0x34>
	__asm volatile
 8007134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007138:	f383 8811 	msr	BASEPRI, r3
 800713c:	f3bf 8f6f 	isb	sy
 8007140:	f3bf 8f4f 	dsb	sy
 8007144:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007146:	bf00      	nop
 8007148:	bf00      	nop
 800714a:	e7fd      	b.n	8007148 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d103      	bne.n	800715a <xQueueGenericSend+0x42>
 8007152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007156:	2b00      	cmp	r3, #0
 8007158:	d101      	bne.n	800715e <xQueueGenericSend+0x46>
 800715a:	2301      	movs	r3, #1
 800715c:	e000      	b.n	8007160 <xQueueGenericSend+0x48>
 800715e:	2300      	movs	r3, #0
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10b      	bne.n	800717c <xQueueGenericSend+0x64>
	__asm volatile
 8007164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007168:	f383 8811 	msr	BASEPRI, r3
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f3bf 8f4f 	dsb	sy
 8007174:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007176:	bf00      	nop
 8007178:	bf00      	nop
 800717a:	e7fd      	b.n	8007178 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2b02      	cmp	r3, #2
 8007180:	d103      	bne.n	800718a <xQueueGenericSend+0x72>
 8007182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007186:	2b01      	cmp	r3, #1
 8007188:	d101      	bne.n	800718e <xQueueGenericSend+0x76>
 800718a:	2301      	movs	r3, #1
 800718c:	e000      	b.n	8007190 <xQueueGenericSend+0x78>
 800718e:	2300      	movs	r3, #0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10b      	bne.n	80071ac <xQueueGenericSend+0x94>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	623b      	str	r3, [r7, #32]
}
 80071a6:	bf00      	nop
 80071a8:	bf00      	nop
 80071aa:	e7fd      	b.n	80071a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071ac:	f001 f92a 	bl	8008404 <xTaskGetSchedulerState>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d102      	bne.n	80071bc <xQueueGenericSend+0xa4>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d101      	bne.n	80071c0 <xQueueGenericSend+0xa8>
 80071bc:	2301      	movs	r3, #1
 80071be:	e000      	b.n	80071c2 <xQueueGenericSend+0xaa>
 80071c0:	2300      	movs	r3, #0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10b      	bne.n	80071de <xQueueGenericSend+0xc6>
	__asm volatile
 80071c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ca:	f383 8811 	msr	BASEPRI, r3
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f3bf 8f4f 	dsb	sy
 80071d6:	61fb      	str	r3, [r7, #28]
}
 80071d8:	bf00      	nop
 80071da:	bf00      	nop
 80071dc:	e7fd      	b.n	80071da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80071de:	f001 fe6b 	bl	8008eb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80071e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d302      	bcc.n	80071f4 <xQueueGenericSend+0xdc>
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	d129      	bne.n	8007248 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80071fa:	f000 fa0d 	bl	8007618 <prvCopyDataToQueue>
 80071fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007204:	2b00      	cmp	r3, #0
 8007206:	d010      	beq.n	800722a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720a:	3324      	adds	r3, #36	@ 0x24
 800720c:	4618      	mov	r0, r3
 800720e:	f000 ff59 	bl	80080c4 <xTaskRemoveFromEventList>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d013      	beq.n	8007240 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007218:	4b3f      	ldr	r3, [pc, #252]	@ (8007318 <xQueueGenericSend+0x200>)
 800721a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	e00a      	b.n	8007240 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800722a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800722c:	2b00      	cmp	r3, #0
 800722e:	d007      	beq.n	8007240 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007230:	4b39      	ldr	r3, [pc, #228]	@ (8007318 <xQueueGenericSend+0x200>)
 8007232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007236:	601a      	str	r2, [r3, #0]
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007240:	f001 fe6c 	bl	8008f1c <vPortExitCritical>
				return pdPASS;
 8007244:	2301      	movs	r3, #1
 8007246:	e063      	b.n	8007310 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d103      	bne.n	8007256 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800724e:	f001 fe65 	bl	8008f1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007252:	2300      	movs	r3, #0
 8007254:	e05c      	b.n	8007310 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007258:	2b00      	cmp	r3, #0
 800725a:	d106      	bne.n	800726a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800725c:	f107 0314 	add.w	r3, r7, #20
 8007260:	4618      	mov	r0, r3
 8007262:	f000 ff93 	bl	800818c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007266:	2301      	movs	r3, #1
 8007268:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800726a:	f001 fe57 	bl	8008f1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800726e:	f000 fd05 	bl	8007c7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007272:	f001 fe21 	bl	8008eb8 <vPortEnterCritical>
 8007276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007278:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800727c:	b25b      	sxtb	r3, r3
 800727e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007282:	d103      	bne.n	800728c <xQueueGenericSend+0x174>
 8007284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007286:	2200      	movs	r2, #0
 8007288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800728c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007292:	b25b      	sxtb	r3, r3
 8007294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007298:	d103      	bne.n	80072a2 <xQueueGenericSend+0x18a>
 800729a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800729c:	2200      	movs	r2, #0
 800729e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072a2:	f001 fe3b 	bl	8008f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072a6:	1d3a      	adds	r2, r7, #4
 80072a8:	f107 0314 	add.w	r3, r7, #20
 80072ac:	4611      	mov	r1, r2
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 ff82 	bl	80081b8 <xTaskCheckForTimeOut>
 80072b4:	4603      	mov	r3, r0
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d124      	bne.n	8007304 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80072ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072bc:	f000 faa4 	bl	8007808 <prvIsQueueFull>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d018      	beq.n	80072f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80072c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c8:	3310      	adds	r3, #16
 80072ca:	687a      	ldr	r2, [r7, #4]
 80072cc:	4611      	mov	r1, r2
 80072ce:	4618      	mov	r0, r3
 80072d0:	f000 fea6 	bl	8008020 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80072d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072d6:	f000 fa2f 	bl	8007738 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80072da:	f000 fcdd 	bl	8007c98 <xTaskResumeAll>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	f47f af7c 	bne.w	80071de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80072e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007318 <xQueueGenericSend+0x200>)
 80072e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	e772      	b.n	80071de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80072f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072fa:	f000 fa1d 	bl	8007738 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80072fe:	f000 fccb 	bl	8007c98 <xTaskResumeAll>
 8007302:	e76c      	b.n	80071de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007306:	f000 fa17 	bl	8007738 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800730a:	f000 fcc5 	bl	8007c98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800730e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007310:	4618      	mov	r0, r3
 8007312:	3738      	adds	r7, #56	@ 0x38
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	e000ed04 	.word	0xe000ed04

0800731c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b08e      	sub	sp, #56	@ 0x38
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
 8007328:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800732e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10b      	bne.n	800734c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007338:	f383 8811 	msr	BASEPRI, r3
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f3bf 8f4f 	dsb	sy
 8007344:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007346:	bf00      	nop
 8007348:	bf00      	nop
 800734a:	e7fd      	b.n	8007348 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d103      	bne.n	800735a <xQueueGenericSendFromISR+0x3e>
 8007352:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <xQueueGenericSendFromISR+0x42>
 800735a:	2301      	movs	r3, #1
 800735c:	e000      	b.n	8007360 <xQueueGenericSendFromISR+0x44>
 800735e:	2300      	movs	r3, #0
 8007360:	2b00      	cmp	r3, #0
 8007362:	d10b      	bne.n	800737c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007368:	f383 8811 	msr	BASEPRI, r3
 800736c:	f3bf 8f6f 	isb	sy
 8007370:	f3bf 8f4f 	dsb	sy
 8007374:	623b      	str	r3, [r7, #32]
}
 8007376:	bf00      	nop
 8007378:	bf00      	nop
 800737a:	e7fd      	b.n	8007378 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2b02      	cmp	r3, #2
 8007380:	d103      	bne.n	800738a <xQueueGenericSendFromISR+0x6e>
 8007382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007386:	2b01      	cmp	r3, #1
 8007388:	d101      	bne.n	800738e <xQueueGenericSendFromISR+0x72>
 800738a:	2301      	movs	r3, #1
 800738c:	e000      	b.n	8007390 <xQueueGenericSendFromISR+0x74>
 800738e:	2300      	movs	r3, #0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d10b      	bne.n	80073ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007398:	f383 8811 	msr	BASEPRI, r3
 800739c:	f3bf 8f6f 	isb	sy
 80073a0:	f3bf 8f4f 	dsb	sy
 80073a4:	61fb      	str	r3, [r7, #28]
}
 80073a6:	bf00      	nop
 80073a8:	bf00      	nop
 80073aa:	e7fd      	b.n	80073a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80073ac:	f001 fe64 	bl	8009078 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80073b0:	f3ef 8211 	mrs	r2, BASEPRI
 80073b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b8:	f383 8811 	msr	BASEPRI, r3
 80073bc:	f3bf 8f6f 	isb	sy
 80073c0:	f3bf 8f4f 	dsb	sy
 80073c4:	61ba      	str	r2, [r7, #24]
 80073c6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80073c8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80073ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d302      	bcc.n	80073de <xQueueGenericSendFromISR+0xc2>
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2b02      	cmp	r3, #2
 80073dc:	d12c      	bne.n	8007438 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80073de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80073e4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073e8:	683a      	ldr	r2, [r7, #0]
 80073ea:	68b9      	ldr	r1, [r7, #8]
 80073ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80073ee:	f000 f913 	bl	8007618 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80073f2:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80073f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073fa:	d112      	bne.n	8007422 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007400:	2b00      	cmp	r3, #0
 8007402:	d016      	beq.n	8007432 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007406:	3324      	adds	r3, #36	@ 0x24
 8007408:	4618      	mov	r0, r3
 800740a:	f000 fe5b 	bl	80080c4 <xTaskRemoveFromEventList>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d00e      	beq.n	8007432 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00b      	beq.n	8007432 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	e007      	b.n	8007432 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007422:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007426:	3301      	adds	r3, #1
 8007428:	b2db      	uxtb	r3, r3
 800742a:	b25a      	sxtb	r2, r3
 800742c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007432:	2301      	movs	r3, #1
 8007434:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8007436:	e001      	b.n	800743c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007438:	2300      	movs	r3, #0
 800743a:	637b      	str	r3, [r7, #52]	@ 0x34
 800743c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800743e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007446:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800744a:	4618      	mov	r0, r3
 800744c:	3738      	adds	r7, #56	@ 0x38
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b08c      	sub	sp, #48	@ 0x30
 8007458:	af00      	add	r7, sp, #0
 800745a:	60f8      	str	r0, [r7, #12]
 800745c:	60b9      	str	r1, [r7, #8]
 800745e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007460:	2300      	movs	r3, #0
 8007462:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746a:	2b00      	cmp	r3, #0
 800746c:	d10b      	bne.n	8007486 <xQueueReceive+0x32>
	__asm volatile
 800746e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007472:	f383 8811 	msr	BASEPRI, r3
 8007476:	f3bf 8f6f 	isb	sy
 800747a:	f3bf 8f4f 	dsb	sy
 800747e:	623b      	str	r3, [r7, #32]
}
 8007480:	bf00      	nop
 8007482:	bf00      	nop
 8007484:	e7fd      	b.n	8007482 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d103      	bne.n	8007494 <xQueueReceive+0x40>
 800748c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	d101      	bne.n	8007498 <xQueueReceive+0x44>
 8007494:	2301      	movs	r3, #1
 8007496:	e000      	b.n	800749a <xQueueReceive+0x46>
 8007498:	2300      	movs	r3, #0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10b      	bne.n	80074b6 <xQueueReceive+0x62>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	61fb      	str	r3, [r7, #28]
}
 80074b0:	bf00      	nop
 80074b2:	bf00      	nop
 80074b4:	e7fd      	b.n	80074b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80074b6:	f000 ffa5 	bl	8008404 <xTaskGetSchedulerState>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d102      	bne.n	80074c6 <xQueueReceive+0x72>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d101      	bne.n	80074ca <xQueueReceive+0x76>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e000      	b.n	80074cc <xQueueReceive+0x78>
 80074ca:	2300      	movs	r3, #0
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10b      	bne.n	80074e8 <xQueueReceive+0x94>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	61bb      	str	r3, [r7, #24]
}
 80074e2:	bf00      	nop
 80074e4:	bf00      	nop
 80074e6:	e7fd      	b.n	80074e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80074e8:	f001 fce6 	bl	8008eb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80074f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d01f      	beq.n	8007538 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80074f8:	68b9      	ldr	r1, [r7, #8]
 80074fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074fc:	f000 f8f6 	bl	80076ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007502:	1e5a      	subs	r2, r3, #1
 8007504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007506:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d00f      	beq.n	8007530 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007512:	3310      	adds	r3, #16
 8007514:	4618      	mov	r0, r3
 8007516:	f000 fdd5 	bl	80080c4 <xTaskRemoveFromEventList>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d007      	beq.n	8007530 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007520:	4b3c      	ldr	r3, [pc, #240]	@ (8007614 <xQueueReceive+0x1c0>)
 8007522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	f3bf 8f4f 	dsb	sy
 800752c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007530:	f001 fcf4 	bl	8008f1c <vPortExitCritical>
				return pdPASS;
 8007534:	2301      	movs	r3, #1
 8007536:	e069      	b.n	800760c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d103      	bne.n	8007546 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800753e:	f001 fced 	bl	8008f1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007542:	2300      	movs	r3, #0
 8007544:	e062      	b.n	800760c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007548:	2b00      	cmp	r3, #0
 800754a:	d106      	bne.n	800755a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800754c:	f107 0310 	add.w	r3, r7, #16
 8007550:	4618      	mov	r0, r3
 8007552:	f000 fe1b 	bl	800818c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007556:	2301      	movs	r3, #1
 8007558:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800755a:	f001 fcdf 	bl	8008f1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800755e:	f000 fb8d 	bl	8007c7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007562:	f001 fca9 	bl	8008eb8 <vPortEnterCritical>
 8007566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007568:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800756c:	b25b      	sxtb	r3, r3
 800756e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007572:	d103      	bne.n	800757c <xQueueReceive+0x128>
 8007574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800757c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007582:	b25b      	sxtb	r3, r3
 8007584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007588:	d103      	bne.n	8007592 <xQueueReceive+0x13e>
 800758a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007592:	f001 fcc3 	bl	8008f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007596:	1d3a      	adds	r2, r7, #4
 8007598:	f107 0310 	add.w	r3, r7, #16
 800759c:	4611      	mov	r1, r2
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 fe0a 	bl	80081b8 <xTaskCheckForTimeOut>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d123      	bne.n	80075f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075ac:	f000 f916 	bl	80077dc <prvIsQueueEmpty>
 80075b0:	4603      	mov	r3, r0
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d017      	beq.n	80075e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80075b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b8:	3324      	adds	r3, #36	@ 0x24
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	4611      	mov	r1, r2
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 fd2e 	bl	8008020 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80075c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075c6:	f000 f8b7 	bl	8007738 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80075ca:	f000 fb65 	bl	8007c98 <xTaskResumeAll>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d189      	bne.n	80074e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80075d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007614 <xQueueReceive+0x1c0>)
 80075d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	e780      	b.n	80074e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80075e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075e8:	f000 f8a6 	bl	8007738 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80075ec:	f000 fb54 	bl	8007c98 <xTaskResumeAll>
 80075f0:	e77a      	b.n	80074e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80075f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075f4:	f000 f8a0 	bl	8007738 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80075f8:	f000 fb4e 	bl	8007c98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80075fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075fe:	f000 f8ed 	bl	80077dc <prvIsQueueEmpty>
 8007602:	4603      	mov	r3, r0
 8007604:	2b00      	cmp	r3, #0
 8007606:	f43f af6f 	beq.w	80074e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800760a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800760c:	4618      	mov	r0, r3
 800760e:	3730      	adds	r7, #48	@ 0x30
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	e000ed04 	.word	0xe000ed04

08007618 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007624:	2300      	movs	r3, #0
 8007626:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800762c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10d      	bne.n	8007652 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d14d      	bne.n	80076da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fefc 	bl	8008440 <xTaskPriorityDisinherit>
 8007648:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	609a      	str	r2, [r3, #8]
 8007650:	e043      	b.n	80076da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d119      	bne.n	800768c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6858      	ldr	r0, [r3, #4]
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007660:	461a      	mov	r2, r3
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	f002 fb81 	bl	8009d6a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007670:	441a      	add	r2, r3
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	689b      	ldr	r3, [r3, #8]
 800767e:	429a      	cmp	r2, r3
 8007680:	d32b      	bcc.n	80076da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	605a      	str	r2, [r3, #4]
 800768a:	e026      	b.n	80076da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	68d8      	ldr	r0, [r3, #12]
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007694:	461a      	mov	r2, r3
 8007696:	68b9      	ldr	r1, [r7, #8]
 8007698:	f002 fb67 	bl	8009d6a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a4:	425b      	negs	r3, r3
 80076a6:	441a      	add	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	68da      	ldr	r2, [r3, #12]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d207      	bcs.n	80076c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	689a      	ldr	r2, [r3, #8]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c0:	425b      	negs	r3, r3
 80076c2:	441a      	add	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d105      	bne.n	80076da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d002      	beq.n	80076da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	3b01      	subs	r3, #1
 80076d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	1c5a      	adds	r2, r3, #1
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80076e2:	697b      	ldr	r3, [r7, #20]
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d018      	beq.n	8007730 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	68da      	ldr	r2, [r3, #12]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007706:	441a      	add	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	68da      	ldr	r2, [r3, #12]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	429a      	cmp	r2, r3
 8007716:	d303      	bcc.n	8007720 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68d9      	ldr	r1, [r3, #12]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007728:	461a      	mov	r2, r3
 800772a:	6838      	ldr	r0, [r7, #0]
 800772c:	f002 fb1d 	bl	8009d6a <memcpy>
	}
}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007740:	f001 fbba 	bl	8008eb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800774a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800774c:	e011      	b.n	8007772 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007752:	2b00      	cmp	r3, #0
 8007754:	d012      	beq.n	800777c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	3324      	adds	r3, #36	@ 0x24
 800775a:	4618      	mov	r0, r3
 800775c:	f000 fcb2 	bl	80080c4 <xTaskRemoveFromEventList>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d001      	beq.n	800776a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007766:	f000 fd8b 	bl	8008280 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	3b01      	subs	r3, #1
 800776e:	b2db      	uxtb	r3, r3
 8007770:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007776:	2b00      	cmp	r3, #0
 8007778:	dce9      	bgt.n	800774e <prvUnlockQueue+0x16>
 800777a:	e000      	b.n	800777e <prvUnlockQueue+0x46>
					break;
 800777c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	22ff      	movs	r2, #255	@ 0xff
 8007782:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007786:	f001 fbc9 	bl	8008f1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800778a:	f001 fb95 	bl	8008eb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007794:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007796:	e011      	b.n	80077bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d012      	beq.n	80077c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	3310      	adds	r3, #16
 80077a4:	4618      	mov	r0, r3
 80077a6:	f000 fc8d 	bl	80080c4 <xTaskRemoveFromEventList>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d001      	beq.n	80077b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80077b0:	f000 fd66 	bl	8008280 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80077bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	dce9      	bgt.n	8007798 <prvUnlockQueue+0x60>
 80077c4:	e000      	b.n	80077c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80077c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	22ff      	movs	r2, #255	@ 0xff
 80077cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80077d0:	f001 fba4 	bl	8008f1c <vPortExitCritical>
}
 80077d4:	bf00      	nop
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80077e4:	f001 fb68 	bl	8008eb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d102      	bne.n	80077f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80077f0:	2301      	movs	r3, #1
 80077f2:	60fb      	str	r3, [r7, #12]
 80077f4:	e001      	b.n	80077fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80077f6:	2300      	movs	r3, #0
 80077f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80077fa:	f001 fb8f 	bl	8008f1c <vPortExitCritical>

	return xReturn;
 80077fe:	68fb      	ldr	r3, [r7, #12]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007810:	f001 fb52 	bl	8008eb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800781c:	429a      	cmp	r2, r3
 800781e:	d102      	bne.n	8007826 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007820:	2301      	movs	r3, #1
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	e001      	b.n	800782a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007826:	2300      	movs	r3, #0
 8007828:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800782a:	f001 fb77 	bl	8008f1c <vPortExitCritical>

	return xReturn;
 800782e:	68fb      	ldr	r3, [r7, #12]
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007842:	2300      	movs	r3, #0
 8007844:	60fb      	str	r3, [r7, #12]
 8007846:	e014      	b.n	8007872 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007848:	4a0f      	ldr	r2, [pc, #60]	@ (8007888 <vQueueAddToRegistry+0x50>)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10b      	bne.n	800786c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007854:	490c      	ldr	r1, [pc, #48]	@ (8007888 <vQueueAddToRegistry+0x50>)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800785e:	4a0a      	ldr	r2, [pc, #40]	@ (8007888 <vQueueAddToRegistry+0x50>)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	4413      	add	r3, r2
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800786a:	e006      	b.n	800787a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	3301      	adds	r3, #1
 8007870:	60fb      	str	r3, [r7, #12]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b07      	cmp	r3, #7
 8007876:	d9e7      	bls.n	8007848 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007878:	bf00      	nop
 800787a:	bf00      	nop
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	200008ac 	.word	0x200008ac

0800788c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800789c:	f001 fb0c 	bl	8008eb8 <vPortEnterCritical>
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078a6:	b25b      	sxtb	r3, r3
 80078a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078ac:	d103      	bne.n	80078b6 <vQueueWaitForMessageRestricted+0x2a>
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078bc:	b25b      	sxtb	r3, r3
 80078be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c2:	d103      	bne.n	80078cc <vQueueWaitForMessageRestricted+0x40>
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078cc:	f001 fb26 	bl	8008f1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d106      	bne.n	80078e6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	3324      	adds	r3, #36	@ 0x24
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	68b9      	ldr	r1, [r7, #8]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f000 fbc3 	bl	800806c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80078e6:	6978      	ldr	r0, [r7, #20]
 80078e8:	f7ff ff26 	bl	8007738 <prvUnlockQueue>
	}
 80078ec:	bf00      	nop
 80078ee:	3718      	adds	r7, #24
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b08c      	sub	sp, #48	@ 0x30
 80078f8:	af04      	add	r7, sp, #16
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	603b      	str	r3, [r7, #0]
 8007900:	4613      	mov	r3, r2
 8007902:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007904:	88fb      	ldrh	r3, [r7, #6]
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4618      	mov	r0, r3
 800790a:	f001 fbf7 	bl	80090fc <pvPortMalloc>
 800790e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00e      	beq.n	8007934 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007916:	2058      	movs	r0, #88	@ 0x58
 8007918:	f001 fbf0 	bl	80090fc <pvPortMalloc>
 800791c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800791e:	69fb      	ldr	r3, [r7, #28]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d003      	beq.n	800792c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007924:	69fb      	ldr	r3, [r7, #28]
 8007926:	697a      	ldr	r2, [r7, #20]
 8007928:	631a      	str	r2, [r3, #48]	@ 0x30
 800792a:	e005      	b.n	8007938 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800792c:	6978      	ldr	r0, [r7, #20]
 800792e:	f001 fcad 	bl	800928c <vPortFree>
 8007932:	e001      	b.n	8007938 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007934:	2300      	movs	r3, #0
 8007936:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d013      	beq.n	8007966 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800793e:	88fa      	ldrh	r2, [r7, #6]
 8007940:	2300      	movs	r3, #0
 8007942:	9303      	str	r3, [sp, #12]
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	9302      	str	r3, [sp, #8]
 8007948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800794a:	9301      	str	r3, [sp, #4]
 800794c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	68b9      	ldr	r1, [r7, #8]
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f80e 	bl	8007976 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800795a:	69f8      	ldr	r0, [r7, #28]
 800795c:	f000 f89c 	bl	8007a98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007960:	2301      	movs	r3, #1
 8007962:	61bb      	str	r3, [r7, #24]
 8007964:	e002      	b.n	800796c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007966:	f04f 33ff 	mov.w	r3, #4294967295
 800796a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800796c:	69bb      	ldr	r3, [r7, #24]
	}
 800796e:	4618      	mov	r0, r3
 8007970:	3720      	adds	r7, #32
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}

08007976 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007976:	b580      	push	{r7, lr}
 8007978:	b088      	sub	sp, #32
 800797a:	af00      	add	r7, sp, #0
 800797c:	60f8      	str	r0, [r7, #12]
 800797e:	60b9      	str	r1, [r7, #8]
 8007980:	607a      	str	r2, [r7, #4]
 8007982:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007986:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	461a      	mov	r2, r3
 800798e:	21a5      	movs	r1, #165	@ 0xa5
 8007990:	f002 f94c 	bl	8009c2c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007996:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800799e:	3b01      	subs	r3, #1
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	4413      	add	r3, r2
 80079a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	f023 0307 	bic.w	r3, r3, #7
 80079ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	f003 0307 	and.w	r3, r3, #7
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00b      	beq.n	80079d0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	617b      	str	r3, [r7, #20]
}
 80079ca:	bf00      	nop
 80079cc:	bf00      	nop
 80079ce:	e7fd      	b.n	80079cc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d01f      	beq.n	8007a16 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079d6:	2300      	movs	r3, #0
 80079d8:	61fb      	str	r3, [r7, #28]
 80079da:	e012      	b.n	8007a02 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	69fb      	ldr	r3, [r7, #28]
 80079e0:	4413      	add	r3, r2
 80079e2:	7819      	ldrb	r1, [r3, #0]
 80079e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079e6:	69fb      	ldr	r3, [r7, #28]
 80079e8:	4413      	add	r3, r2
 80079ea:	3334      	adds	r3, #52	@ 0x34
 80079ec:	460a      	mov	r2, r1
 80079ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	4413      	add	r3, r2
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d006      	beq.n	8007a0a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079fc:	69fb      	ldr	r3, [r7, #28]
 80079fe:	3301      	adds	r3, #1
 8007a00:	61fb      	str	r3, [r7, #28]
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	2b09      	cmp	r3, #9
 8007a06:	d9e9      	bls.n	80079dc <prvInitialiseNewTask+0x66>
 8007a08:	e000      	b.n	8007a0c <prvInitialiseNewTask+0x96>
			{
				break;
 8007a0a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0e:	2200      	movs	r2, #0
 8007a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007a14:	e003      	b.n	8007a1e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	d901      	bls.n	8007a28 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a24:	2304      	movs	r3, #4
 8007a26:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a2c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a32:	649a      	str	r2, [r3, #72]	@ 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8007a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a36:	2200      	movs	r2, #0
 8007a38:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7ff fa0c 	bl	8006e5c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a46:	3318      	adds	r3, #24
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7ff fa07 	bl	8006e5c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a52:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a56:	f1c3 0205 	rsb	r2, r3, #5
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a5c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a62:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a66:	2200      	movs	r2, #0
 8007a68:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	68f9      	ldr	r1, [r7, #12]
 8007a76:	69b8      	ldr	r0, [r7, #24]
 8007a78:	f001 f8ee 	bl	8008c58 <pxPortInitialiseStack>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d002      	beq.n	8007a8e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a8e:	bf00      	nop
 8007a90:	3720      	adds	r7, #32
 8007a92:	46bd      	mov	sp, r7
 8007a94:	bd80      	pop	{r7, pc}
	...

08007a98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007aa0:	f001 fa0a 	bl	8008eb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007aa4:	4b2c      	ldr	r3, [pc, #176]	@ (8007b58 <prvAddNewTaskToReadyList+0xc0>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	4a2b      	ldr	r2, [pc, #172]	@ (8007b58 <prvAddNewTaskToReadyList+0xc0>)
 8007aac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007aae:	4b2b      	ldr	r3, [pc, #172]	@ (8007b5c <prvAddNewTaskToReadyList+0xc4>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d109      	bne.n	8007aca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ab6:	4a29      	ldr	r2, [pc, #164]	@ (8007b5c <prvAddNewTaskToReadyList+0xc4>)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007abc:	4b26      	ldr	r3, [pc, #152]	@ (8007b58 <prvAddNewTaskToReadyList+0xc0>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d110      	bne.n	8007ae6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007ac4:	f000 fc00 	bl	80082c8 <prvInitialiseTaskLists>
 8007ac8:	e00d      	b.n	8007ae6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007aca:	4b25      	ldr	r3, [pc, #148]	@ (8007b60 <prvAddNewTaskToReadyList+0xc8>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d109      	bne.n	8007ae6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007ad2:	4b22      	ldr	r3, [pc, #136]	@ (8007b5c <prvAddNewTaskToReadyList+0xc4>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d802      	bhi.n	8007ae6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007ae0:	4a1e      	ldr	r2, [pc, #120]	@ (8007b5c <prvAddNewTaskToReadyList+0xc4>)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ae6:	4b1f      	ldr	r3, [pc, #124]	@ (8007b64 <prvAddNewTaskToReadyList+0xcc>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3301      	adds	r3, #1
 8007aec:	4a1d      	ldr	r2, [pc, #116]	@ (8007b64 <prvAddNewTaskToReadyList+0xcc>)
 8007aee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007af0:	4b1c      	ldr	r3, [pc, #112]	@ (8007b64 <prvAddNewTaskToReadyList+0xcc>)
 8007af2:	681a      	ldr	r2, [r3, #0]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	641a      	str	r2, [r3, #64]	@ 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afc:	2201      	movs	r2, #1
 8007afe:	409a      	lsls	r2, r3
 8007b00:	4b19      	ldr	r3, [pc, #100]	@ (8007b68 <prvAddNewTaskToReadyList+0xd0>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	4a18      	ldr	r2, [pc, #96]	@ (8007b68 <prvAddNewTaskToReadyList+0xd0>)
 8007b08:	6013      	str	r3, [r2, #0]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b0e:	4613      	mov	r3, r2
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4a15      	ldr	r2, [pc, #84]	@ (8007b6c <prvAddNewTaskToReadyList+0xd4>)
 8007b18:	441a      	add	r2, r3
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	3304      	adds	r3, #4
 8007b1e:	4619      	mov	r1, r3
 8007b20:	4610      	mov	r0, r2
 8007b22:	f7ff f9a8 	bl	8006e76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b26:	f001 f9f9 	bl	8008f1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b60 <prvAddNewTaskToReadyList+0xc8>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00e      	beq.n	8007b50 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b32:	4b0a      	ldr	r3, [pc, #40]	@ (8007b5c <prvAddNewTaskToReadyList+0xc4>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d207      	bcs.n	8007b50 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b40:	4b0b      	ldr	r3, [pc, #44]	@ (8007b70 <prvAddNewTaskToReadyList+0xd8>)
 8007b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b46:	601a      	str	r2, [r3, #0]
 8007b48:	f3bf 8f4f 	dsb	sy
 8007b4c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	200009c4 	.word	0x200009c4
 8007b5c:	200008ec 	.word	0x200008ec
 8007b60:	200009d0 	.word	0x200009d0
 8007b64:	200009e0 	.word	0x200009e0
 8007b68:	200009cc 	.word	0x200009cc
 8007b6c:	200008f0 	.word	0x200008f0
 8007b70:	e000ed04 	.word	0xe000ed04

08007b74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d018      	beq.n	8007bb8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007b86:	4b14      	ldr	r3, [pc, #80]	@ (8007bd8 <vTaskDelay+0x64>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00b      	beq.n	8007ba6 <vTaskDelay+0x32>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	60bb      	str	r3, [r7, #8]
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop
 8007ba4:	e7fd      	b.n	8007ba2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007ba6:	f000 f869 	bl	8007c7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007baa:	2100      	movs	r1, #0
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 fccf 	bl	8008550 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bb2:	f000 f871 	bl	8007c98 <xTaskResumeAll>
 8007bb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d107      	bne.n	8007bce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007bbe:	4b07      	ldr	r3, [pc, #28]	@ (8007bdc <vTaskDelay+0x68>)
 8007bc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bc4:	601a      	str	r2, [r3, #0]
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bce:	bf00      	nop
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
 8007bd6:	bf00      	nop
 8007bd8:	200009ec 	.word	0x200009ec
 8007bdc:	e000ed04 	.word	0xe000ed04

08007be0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8007be6:	4b1f      	ldr	r3, [pc, #124]	@ (8007c64 <vTaskStartScheduler+0x84>)
 8007be8:	9301      	str	r3, [sp, #4]
 8007bea:	2300      	movs	r3, #0
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	2300      	movs	r3, #0
 8007bf0:	2282      	movs	r2, #130	@ 0x82
 8007bf2:	491d      	ldr	r1, [pc, #116]	@ (8007c68 <vTaskStartScheduler+0x88>)
 8007bf4:	481d      	ldr	r0, [pc, #116]	@ (8007c6c <vTaskStartScheduler+0x8c>)
 8007bf6:	f7ff fe7d 	bl	80078f4 <xTaskCreate>
 8007bfa:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d102      	bne.n	8007c08 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 8007c02:	f000 fd0b 	bl	800861c <xTimerCreateTimerTask>
 8007c06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d116      	bne.n	8007c3c <vTaskStartScheduler+0x5c>
	__asm volatile
 8007c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c12:	f383 8811 	msr	BASEPRI, r3
 8007c16:	f3bf 8f6f 	isb	sy
 8007c1a:	f3bf 8f4f 	dsb	sy
 8007c1e:	60bb      	str	r3, [r7, #8]
}
 8007c20:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c22:	4b13      	ldr	r3, [pc, #76]	@ (8007c70 <vTaskStartScheduler+0x90>)
 8007c24:	f04f 32ff 	mov.w	r2, #4294967295
 8007c28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c2a:	4b12      	ldr	r3, [pc, #72]	@ (8007c74 <vTaskStartScheduler+0x94>)
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c30:	4b11      	ldr	r3, [pc, #68]	@ (8007c78 <vTaskStartScheduler+0x98>)
 8007c32:	2200      	movs	r2, #0
 8007c34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c36:	f001 f89b 	bl	8008d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c3a:	e00f      	b.n	8007c5c <vTaskStartScheduler+0x7c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c42:	d10b      	bne.n	8007c5c <vTaskStartScheduler+0x7c>
	__asm volatile
 8007c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c48:	f383 8811 	msr	BASEPRI, r3
 8007c4c:	f3bf 8f6f 	isb	sy
 8007c50:	f3bf 8f4f 	dsb	sy
 8007c54:	607b      	str	r3, [r7, #4]
}
 8007c56:	bf00      	nop
 8007c58:	bf00      	nop
 8007c5a:	e7fd      	b.n	8007c58 <vTaskStartScheduler+0x78>
}
 8007c5c:	bf00      	nop
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	200009e8 	.word	0x200009e8
 8007c68:	0800d494 	.word	0x0800d494
 8007c6c:	08008299 	.word	0x08008299
 8007c70:	200009e4 	.word	0x200009e4
 8007c74:	200009d0 	.word	0x200009d0
 8007c78:	200009c8 	.word	0x200009c8

08007c7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007c80:	4b04      	ldr	r3, [pc, #16]	@ (8007c94 <vTaskSuspendAll+0x18>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3301      	adds	r3, #1
 8007c86:	4a03      	ldr	r2, [pc, #12]	@ (8007c94 <vTaskSuspendAll+0x18>)
 8007c88:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007c8a:	bf00      	nop
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	200009ec 	.word	0x200009ec

08007c98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b084      	sub	sp, #16
 8007c9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ca6:	4b42      	ldr	r3, [pc, #264]	@ (8007db0 <xTaskResumeAll+0x118>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d10b      	bne.n	8007cc6 <xTaskResumeAll+0x2e>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	603b      	str	r3, [r7, #0]
}
 8007cc0:	bf00      	nop
 8007cc2:	bf00      	nop
 8007cc4:	e7fd      	b.n	8007cc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cc6:	f001 f8f7 	bl	8008eb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cca:	4b39      	ldr	r3, [pc, #228]	@ (8007db0 <xTaskResumeAll+0x118>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	4a37      	ldr	r2, [pc, #220]	@ (8007db0 <xTaskResumeAll+0x118>)
 8007cd2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cd4:	4b36      	ldr	r3, [pc, #216]	@ (8007db0 <xTaskResumeAll+0x118>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d161      	bne.n	8007da0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007cdc:	4b35      	ldr	r3, [pc, #212]	@ (8007db4 <xTaskResumeAll+0x11c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d05d      	beq.n	8007da0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ce4:	e02e      	b.n	8007d44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce6:	4b34      	ldr	r3, [pc, #208]	@ (8007db8 <xTaskResumeAll+0x120>)
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3318      	adds	r3, #24
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7ff f91c 	bl	8006f30 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	3304      	adds	r3, #4
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f7ff f917 	bl	8006f30 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d06:	2201      	movs	r2, #1
 8007d08:	409a      	lsls	r2, r3
 8007d0a:	4b2c      	ldr	r3, [pc, #176]	@ (8007dbc <xTaskResumeAll+0x124>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	4a2a      	ldr	r2, [pc, #168]	@ (8007dbc <xTaskResumeAll+0x124>)
 8007d12:	6013      	str	r3, [r2, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d18:	4613      	mov	r3, r2
 8007d1a:	009b      	lsls	r3, r3, #2
 8007d1c:	4413      	add	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4a27      	ldr	r2, [pc, #156]	@ (8007dc0 <xTaskResumeAll+0x128>)
 8007d22:	441a      	add	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3304      	adds	r3, #4
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	f7ff f8a3 	bl	8006e76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d34:	4b23      	ldr	r3, [pc, #140]	@ (8007dc4 <xTaskResumeAll+0x12c>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d3a:	429a      	cmp	r2, r3
 8007d3c:	d302      	bcc.n	8007d44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007d3e:	4b22      	ldr	r3, [pc, #136]	@ (8007dc8 <xTaskResumeAll+0x130>)
 8007d40:	2201      	movs	r2, #1
 8007d42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d44:	4b1c      	ldr	r3, [pc, #112]	@ (8007db8 <xTaskResumeAll+0x120>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d1cc      	bne.n	8007ce6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d001      	beq.n	8007d56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d52:	f000 fb37 	bl	80083c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007d56:	4b1d      	ldr	r3, [pc, #116]	@ (8007dcc <xTaskResumeAll+0x134>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d010      	beq.n	8007d84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d62:	f000 f847 	bl	8007df4 <xTaskIncrementTick>
 8007d66:	4603      	mov	r3, r0
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d002      	beq.n	8007d72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007d6c:	4b16      	ldr	r3, [pc, #88]	@ (8007dc8 <xTaskResumeAll+0x130>)
 8007d6e:	2201      	movs	r2, #1
 8007d70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	3b01      	subs	r3, #1
 8007d76:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1f1      	bne.n	8007d62 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007d7e:	4b13      	ldr	r3, [pc, #76]	@ (8007dcc <xTaskResumeAll+0x134>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d84:	4b10      	ldr	r3, [pc, #64]	@ (8007dc8 <xTaskResumeAll+0x130>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d009      	beq.n	8007da0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d90:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd0 <xTaskResumeAll+0x138>)
 8007d92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d96:	601a      	str	r2, [r3, #0]
 8007d98:	f3bf 8f4f 	dsb	sy
 8007d9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007da0:	f001 f8bc 	bl	8008f1c <vPortExitCritical>

	return xAlreadyYielded;
 8007da4:	68bb      	ldr	r3, [r7, #8]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3710      	adds	r7, #16
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	200009ec 	.word	0x200009ec
 8007db4:	200009c4 	.word	0x200009c4
 8007db8:	20000984 	.word	0x20000984
 8007dbc:	200009cc 	.word	0x200009cc
 8007dc0:	200008f0 	.word	0x200008f0
 8007dc4:	200008ec 	.word	0x200008ec
 8007dc8:	200009d8 	.word	0x200009d8
 8007dcc:	200009d4 	.word	0x200009d4
 8007dd0:	e000ed04 	.word	0xe000ed04

08007dd4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007dda:	4b05      	ldr	r3, [pc, #20]	@ (8007df0 <xTaskGetTickCount+0x1c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007de0:	687b      	ldr	r3, [r7, #4]
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	370c      	adds	r7, #12
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
 8007dee:	bf00      	nop
 8007df0:	200009c8 	.word	0x200009c8

08007df4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b086      	sub	sp, #24
 8007df8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8007f3c <xTaskIncrementTick+0x148>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	f040 8089 	bne.w	8007f1a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e08:	4b4d      	ldr	r3, [pc, #308]	@ (8007f40 <xTaskIncrementTick+0x14c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e10:	4a4b      	ldr	r2, [pc, #300]	@ (8007f40 <xTaskIncrementTick+0x14c>)
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d121      	bne.n	8007e60 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e1c:	4b49      	ldr	r3, [pc, #292]	@ (8007f44 <xTaskIncrementTick+0x150>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00b      	beq.n	8007e3e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	603b      	str	r3, [r7, #0]
}
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	e7fd      	b.n	8007e3a <xTaskIncrementTick+0x46>
 8007e3e:	4b41      	ldr	r3, [pc, #260]	@ (8007f44 <xTaskIncrementTick+0x150>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	60fb      	str	r3, [r7, #12]
 8007e44:	4b40      	ldr	r3, [pc, #256]	@ (8007f48 <xTaskIncrementTick+0x154>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a3e      	ldr	r2, [pc, #248]	@ (8007f44 <xTaskIncrementTick+0x150>)
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	4a3e      	ldr	r2, [pc, #248]	@ (8007f48 <xTaskIncrementTick+0x154>)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	4b3e      	ldr	r3, [pc, #248]	@ (8007f4c <xTaskIncrementTick+0x158>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3301      	adds	r3, #1
 8007e58:	4a3c      	ldr	r2, [pc, #240]	@ (8007f4c <xTaskIncrementTick+0x158>)
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	f000 fab2 	bl	80083c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e60:	4b3b      	ldr	r3, [pc, #236]	@ (8007f50 <xTaskIncrementTick+0x15c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d348      	bcc.n	8007efc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e6a:	4b36      	ldr	r3, [pc, #216]	@ (8007f44 <xTaskIncrementTick+0x150>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e74:	4b36      	ldr	r3, [pc, #216]	@ (8007f50 <xTaskIncrementTick+0x15c>)
 8007e76:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7a:	601a      	str	r2, [r3, #0]
					break;
 8007e7c:	e03e      	b.n	8007efc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e7e:	4b31      	ldr	r3, [pc, #196]	@ (8007f44 <xTaskIncrementTick+0x150>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d203      	bcs.n	8007e9e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e96:	4a2e      	ldr	r2, [pc, #184]	@ (8007f50 <xTaskIncrementTick+0x15c>)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e9c:	e02e      	b.n	8007efc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	3304      	adds	r3, #4
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff f844 	bl	8006f30 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d004      	beq.n	8007eba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	3318      	adds	r3, #24
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7ff f83b 	bl	8006f30 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	409a      	lsls	r2, r3
 8007ec2:	4b24      	ldr	r3, [pc, #144]	@ (8007f54 <xTaskIncrementTick+0x160>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4313      	orrs	r3, r2
 8007ec8:	4a22      	ldr	r2, [pc, #136]	@ (8007f54 <xTaskIncrementTick+0x160>)
 8007eca:	6013      	str	r3, [r2, #0]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	4413      	add	r3, r2
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8007f58 <xTaskIncrementTick+0x164>)
 8007eda:	441a      	add	r2, r3
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	4610      	mov	r0, r2
 8007ee4:	f7fe ffc7 	bl	8006e76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eec:	4b1b      	ldr	r3, [pc, #108]	@ (8007f5c <xTaskIncrementTick+0x168>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d3b9      	bcc.n	8007e6a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007efa:	e7b6      	b.n	8007e6a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007efc:	4b17      	ldr	r3, [pc, #92]	@ (8007f5c <xTaskIncrementTick+0x168>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f02:	4915      	ldr	r1, [pc, #84]	@ (8007f58 <xTaskIncrementTick+0x164>)
 8007f04:	4613      	mov	r3, r2
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	009b      	lsls	r3, r3, #2
 8007f0c:	440b      	add	r3, r1
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2b01      	cmp	r3, #1
 8007f12:	d907      	bls.n	8007f24 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8007f14:	2301      	movs	r3, #1
 8007f16:	617b      	str	r3, [r7, #20]
 8007f18:	e004      	b.n	8007f24 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007f1a:	4b11      	ldr	r3, [pc, #68]	@ (8007f60 <xTaskIncrementTick+0x16c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	3301      	adds	r3, #1
 8007f20:	4a0f      	ldr	r2, [pc, #60]	@ (8007f60 <xTaskIncrementTick+0x16c>)
 8007f22:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007f24:	4b0f      	ldr	r3, [pc, #60]	@ (8007f64 <xTaskIncrementTick+0x170>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007f30:	697b      	ldr	r3, [r7, #20]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3718      	adds	r7, #24
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	200009ec 	.word	0x200009ec
 8007f40:	200009c8 	.word	0x200009c8
 8007f44:	2000097c 	.word	0x2000097c
 8007f48:	20000980 	.word	0x20000980
 8007f4c:	200009dc 	.word	0x200009dc
 8007f50:	200009e4 	.word	0x200009e4
 8007f54:	200009cc 	.word	0x200009cc
 8007f58:	200008f0 	.word	0x200008f0
 8007f5c:	200008ec 	.word	0x200008ec
 8007f60:	200009d4 	.word	0x200009d4
 8007f64:	200009d8 	.word	0x200009d8

08007f68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f6e:	4b27      	ldr	r3, [pc, #156]	@ (800800c <vTaskSwitchContext+0xa4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d003      	beq.n	8007f7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f76:	4b26      	ldr	r3, [pc, #152]	@ (8008010 <vTaskSwitchContext+0xa8>)
 8007f78:	2201      	movs	r2, #1
 8007f7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f7c:	e040      	b.n	8008000 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8007f7e:	4b24      	ldr	r3, [pc, #144]	@ (8008010 <vTaskSwitchContext+0xa8>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f84:	4b23      	ldr	r3, [pc, #140]	@ (8008014 <vTaskSwitchContext+0xac>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	fab3 f383 	clz	r3, r3
 8007f90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007f92:	7afb      	ldrb	r3, [r7, #11]
 8007f94:	f1c3 031f 	rsb	r3, r3, #31
 8007f98:	617b      	str	r3, [r7, #20]
 8007f9a:	491f      	ldr	r1, [pc, #124]	@ (8008018 <vTaskSwitchContext+0xb0>)
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	440b      	add	r3, r1
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d10b      	bne.n	8007fc6 <vTaskSwitchContext+0x5e>
	__asm volatile
 8007fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb2:	f383 8811 	msr	BASEPRI, r3
 8007fb6:	f3bf 8f6f 	isb	sy
 8007fba:	f3bf 8f4f 	dsb	sy
 8007fbe:	607b      	str	r3, [r7, #4]
}
 8007fc0:	bf00      	nop
 8007fc2:	bf00      	nop
 8007fc4:	e7fd      	b.n	8007fc2 <vTaskSwitchContext+0x5a>
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	4613      	mov	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4a11      	ldr	r2, [pc, #68]	@ (8008018 <vTaskSwitchContext+0xb0>)
 8007fd2:	4413      	add	r3, r2
 8007fd4:	613b      	str	r3, [r7, #16]
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	685b      	ldr	r3, [r3, #4]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	605a      	str	r2, [r3, #4]
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	693b      	ldr	r3, [r7, #16]
 8007fe6:	3308      	adds	r3, #8
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d104      	bne.n	8007ff6 <vTaskSwitchContext+0x8e>
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	685a      	ldr	r2, [r3, #4]
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	605a      	str	r2, [r3, #4]
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	4a07      	ldr	r2, [pc, #28]	@ (800801c <vTaskSwitchContext+0xb4>)
 8007ffe:	6013      	str	r3, [r2, #0]
}
 8008000:	bf00      	nop
 8008002:	371c      	adds	r7, #28
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr
 800800c:	200009ec 	.word	0x200009ec
 8008010:	200009d8 	.word	0x200009d8
 8008014:	200009cc 	.word	0x200009cc
 8008018:	200008f0 	.word	0x200008f0
 800801c:	200008ec 	.word	0x200008ec

08008020 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
 8008028:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d10b      	bne.n	8008048 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	60fb      	str	r3, [r7, #12]
}
 8008042:	bf00      	nop
 8008044:	bf00      	nop
 8008046:	e7fd      	b.n	8008044 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008048:	4b07      	ldr	r3, [pc, #28]	@ (8008068 <vTaskPlaceOnEventList+0x48>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3318      	adds	r3, #24
 800804e:	4619      	mov	r1, r3
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7fe ff34 	bl	8006ebe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008056:	2101      	movs	r1, #1
 8008058:	6838      	ldr	r0, [r7, #0]
 800805a:	f000 fa79 	bl	8008550 <prvAddCurrentTaskToDelayedList>
}
 800805e:	bf00      	nop
 8008060:	3710      	adds	r7, #16
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	200008ec 	.word	0x200008ec

0800806c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800806c:	b580      	push	{r7, lr}
 800806e:	b086      	sub	sp, #24
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d10b      	bne.n	8008096 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	617b      	str	r3, [r7, #20]
}
 8008090:	bf00      	nop
 8008092:	bf00      	nop
 8008094:	e7fd      	b.n	8008092 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008096:	4b0a      	ldr	r3, [pc, #40]	@ (80080c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	3318      	adds	r3, #24
 800809c:	4619      	mov	r1, r3
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f7fe fee9 	bl	8006e76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d002      	beq.n	80080b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80080aa:	f04f 33ff 	mov.w	r3, #4294967295
 80080ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080b0:	6879      	ldr	r1, [r7, #4]
 80080b2:	68b8      	ldr	r0, [r7, #8]
 80080b4:	f000 fa4c 	bl	8008550 <prvAddCurrentTaskToDelayedList>
	}
 80080b8:	bf00      	nop
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}
 80080c0:	200008ec 	.word	0x200008ec

080080c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b086      	sub	sp, #24
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d10b      	bne.n	80080f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80080da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080de:	f383 8811 	msr	BASEPRI, r3
 80080e2:	f3bf 8f6f 	isb	sy
 80080e6:	f3bf 8f4f 	dsb	sy
 80080ea:	60fb      	str	r3, [r7, #12]
}
 80080ec:	bf00      	nop
 80080ee:	bf00      	nop
 80080f0:	e7fd      	b.n	80080ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	3318      	adds	r3, #24
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe ff1a 	bl	8006f30 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008174 <xTaskRemoveFromEventList+0xb0>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d11c      	bne.n	800813e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	3304      	adds	r3, #4
 8008108:	4618      	mov	r0, r3
 800810a:	f7fe ff11 	bl	8006f30 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008112:	2201      	movs	r2, #1
 8008114:	409a      	lsls	r2, r3
 8008116:	4b18      	ldr	r3, [pc, #96]	@ (8008178 <xTaskRemoveFromEventList+0xb4>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4313      	orrs	r3, r2
 800811c:	4a16      	ldr	r2, [pc, #88]	@ (8008178 <xTaskRemoveFromEventList+0xb4>)
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008124:	4613      	mov	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	4a13      	ldr	r2, [pc, #76]	@ (800817c <xTaskRemoveFromEventList+0xb8>)
 800812e:	441a      	add	r2, r3
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	3304      	adds	r3, #4
 8008134:	4619      	mov	r1, r3
 8008136:	4610      	mov	r0, r2
 8008138:	f7fe fe9d 	bl	8006e76 <vListInsertEnd>
 800813c:	e005      	b.n	800814a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	3318      	adds	r3, #24
 8008142:	4619      	mov	r1, r3
 8008144:	480e      	ldr	r0, [pc, #56]	@ (8008180 <xTaskRemoveFromEventList+0xbc>)
 8008146:	f7fe fe96 	bl	8006e76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800814e:	4b0d      	ldr	r3, [pc, #52]	@ (8008184 <xTaskRemoveFromEventList+0xc0>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008154:	429a      	cmp	r2, r3
 8008156:	d905      	bls.n	8008164 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008158:	2301      	movs	r3, #1
 800815a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800815c:	4b0a      	ldr	r3, [pc, #40]	@ (8008188 <xTaskRemoveFromEventList+0xc4>)
 800815e:	2201      	movs	r2, #1
 8008160:	601a      	str	r2, [r3, #0]
 8008162:	e001      	b.n	8008168 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008164:	2300      	movs	r3, #0
 8008166:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008168:	697b      	ldr	r3, [r7, #20]
}
 800816a:	4618      	mov	r0, r3
 800816c:	3718      	adds	r7, #24
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	200009ec 	.word	0x200009ec
 8008178:	200009cc 	.word	0x200009cc
 800817c:	200008f0 	.word	0x200008f0
 8008180:	20000984 	.word	0x20000984
 8008184:	200008ec 	.word	0x200008ec
 8008188:	200009d8 	.word	0x200009d8

0800818c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800818c:	b480      	push	{r7}
 800818e:	b083      	sub	sp, #12
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008194:	4b06      	ldr	r3, [pc, #24]	@ (80081b0 <vTaskInternalSetTimeOutState+0x24>)
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800819c:	4b05      	ldr	r3, [pc, #20]	@ (80081b4 <vTaskInternalSetTimeOutState+0x28>)
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	605a      	str	r2, [r3, #4]
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr
 80081b0:	200009dc 	.word	0x200009dc
 80081b4:	200009c8 	.word	0x200009c8

080081b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b088      	sub	sp, #32
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10b      	bne.n	80081e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	613b      	str	r3, [r7, #16]
}
 80081da:	bf00      	nop
 80081dc:	bf00      	nop
 80081de:	e7fd      	b.n	80081dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d10b      	bne.n	80081fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80081e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ea:	f383 8811 	msr	BASEPRI, r3
 80081ee:	f3bf 8f6f 	isb	sy
 80081f2:	f3bf 8f4f 	dsb	sy
 80081f6:	60fb      	str	r3, [r7, #12]
}
 80081f8:	bf00      	nop
 80081fa:	bf00      	nop
 80081fc:	e7fd      	b.n	80081fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80081fe:	f000 fe5b 	bl	8008eb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008202:	4b1d      	ldr	r3, [pc, #116]	@ (8008278 <xTaskCheckForTimeOut+0xc0>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	69ba      	ldr	r2, [r7, #24]
 800820e:	1ad3      	subs	r3, r2, r3
 8008210:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800821a:	d102      	bne.n	8008222 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800821c:	2300      	movs	r3, #0
 800821e:	61fb      	str	r3, [r7, #28]
 8008220:	e023      	b.n	800826a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681a      	ldr	r2, [r3, #0]
 8008226:	4b15      	ldr	r3, [pc, #84]	@ (800827c <xTaskCheckForTimeOut+0xc4>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	429a      	cmp	r2, r3
 800822c:	d007      	beq.n	800823e <xTaskCheckForTimeOut+0x86>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	429a      	cmp	r2, r3
 8008236:	d302      	bcc.n	800823e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008238:	2301      	movs	r3, #1
 800823a:	61fb      	str	r3, [r7, #28]
 800823c:	e015      	b.n	800826a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	697a      	ldr	r2, [r7, #20]
 8008244:	429a      	cmp	r2, r3
 8008246:	d20b      	bcs.n	8008260 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	681a      	ldr	r2, [r3, #0]
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	1ad2      	subs	r2, r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f7ff ff99 	bl	800818c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800825a:	2300      	movs	r3, #0
 800825c:	61fb      	str	r3, [r7, #28]
 800825e:	e004      	b.n	800826a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008266:	2301      	movs	r3, #1
 8008268:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800826a:	f000 fe57 	bl	8008f1c <vPortExitCritical>

	return xReturn;
 800826e:	69fb      	ldr	r3, [r7, #28]
}
 8008270:	4618      	mov	r0, r3
 8008272:	3720      	adds	r7, #32
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	200009c8 	.word	0x200009c8
 800827c:	200009dc 	.word	0x200009dc

08008280 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008280:	b480      	push	{r7}
 8008282:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008284:	4b03      	ldr	r3, [pc, #12]	@ (8008294 <vTaskMissedYield+0x14>)
 8008286:	2201      	movs	r2, #1
 8008288:	601a      	str	r2, [r3, #0]
}
 800828a:	bf00      	nop
 800828c:	46bd      	mov	sp, r7
 800828e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008292:	4770      	bx	lr
 8008294:	200009d8 	.word	0x200009d8

08008298 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008298:	b580      	push	{r7, lr}
 800829a:	b082      	sub	sp, #8
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80082a0:	f000 f852 	bl	8008348 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80082a4:	4b06      	ldr	r3, [pc, #24]	@ (80082c0 <prvIdleTask+0x28>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b01      	cmp	r3, #1
 80082aa:	d9f9      	bls.n	80082a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80082ac:	4b05      	ldr	r3, [pc, #20]	@ (80082c4 <prvIdleTask+0x2c>)
 80082ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082bc:	e7f0      	b.n	80082a0 <prvIdleTask+0x8>
 80082be:	bf00      	nop
 80082c0:	200008f0 	.word	0x200008f0
 80082c4:	e000ed04 	.word	0xe000ed04

080082c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082ce:	2300      	movs	r3, #0
 80082d0:	607b      	str	r3, [r7, #4]
 80082d2:	e00c      	b.n	80082ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	4613      	mov	r3, r2
 80082d8:	009b      	lsls	r3, r3, #2
 80082da:	4413      	add	r3, r2
 80082dc:	009b      	lsls	r3, r3, #2
 80082de:	4a12      	ldr	r2, [pc, #72]	@ (8008328 <prvInitialiseTaskLists+0x60>)
 80082e0:	4413      	add	r3, r2
 80082e2:	4618      	mov	r0, r3
 80082e4:	f7fe fd9a 	bl	8006e1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	3301      	adds	r3, #1
 80082ec:	607b      	str	r3, [r7, #4]
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2b04      	cmp	r3, #4
 80082f2:	d9ef      	bls.n	80082d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082f4:	480d      	ldr	r0, [pc, #52]	@ (800832c <prvInitialiseTaskLists+0x64>)
 80082f6:	f7fe fd91 	bl	8006e1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082fa:	480d      	ldr	r0, [pc, #52]	@ (8008330 <prvInitialiseTaskLists+0x68>)
 80082fc:	f7fe fd8e 	bl	8006e1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008300:	480c      	ldr	r0, [pc, #48]	@ (8008334 <prvInitialiseTaskLists+0x6c>)
 8008302:	f7fe fd8b 	bl	8006e1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008306:	480c      	ldr	r0, [pc, #48]	@ (8008338 <prvInitialiseTaskLists+0x70>)
 8008308:	f7fe fd88 	bl	8006e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800830c:	480b      	ldr	r0, [pc, #44]	@ (800833c <prvInitialiseTaskLists+0x74>)
 800830e:	f7fe fd85 	bl	8006e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008312:	4b0b      	ldr	r3, [pc, #44]	@ (8008340 <prvInitialiseTaskLists+0x78>)
 8008314:	4a05      	ldr	r2, [pc, #20]	@ (800832c <prvInitialiseTaskLists+0x64>)
 8008316:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008318:	4b0a      	ldr	r3, [pc, #40]	@ (8008344 <prvInitialiseTaskLists+0x7c>)
 800831a:	4a05      	ldr	r2, [pc, #20]	@ (8008330 <prvInitialiseTaskLists+0x68>)
 800831c:	601a      	str	r2, [r3, #0]
}
 800831e:	bf00      	nop
 8008320:	3708      	adds	r7, #8
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	200008f0 	.word	0x200008f0
 800832c:	20000954 	.word	0x20000954
 8008330:	20000968 	.word	0x20000968
 8008334:	20000984 	.word	0x20000984
 8008338:	20000998 	.word	0x20000998
 800833c:	200009b0 	.word	0x200009b0
 8008340:	2000097c 	.word	0x2000097c
 8008344:	20000980 	.word	0x20000980

08008348 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800834e:	e019      	b.n	8008384 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008350:	f000 fdb2 	bl	8008eb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008354:	4b10      	ldr	r3, [pc, #64]	@ (8008398 <prvCheckTasksWaitingTermination+0x50>)
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	3304      	adds	r3, #4
 8008360:	4618      	mov	r0, r3
 8008362:	f7fe fde5 	bl	8006f30 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008366:	4b0d      	ldr	r3, [pc, #52]	@ (800839c <prvCheckTasksWaitingTermination+0x54>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	3b01      	subs	r3, #1
 800836c:	4a0b      	ldr	r2, [pc, #44]	@ (800839c <prvCheckTasksWaitingTermination+0x54>)
 800836e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008370:	4b0b      	ldr	r3, [pc, #44]	@ (80083a0 <prvCheckTasksWaitingTermination+0x58>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3b01      	subs	r3, #1
 8008376:	4a0a      	ldr	r2, [pc, #40]	@ (80083a0 <prvCheckTasksWaitingTermination+0x58>)
 8008378:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800837a:	f000 fdcf 	bl	8008f1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f810 	bl	80083a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008384:	4b06      	ldr	r3, [pc, #24]	@ (80083a0 <prvCheckTasksWaitingTermination+0x58>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1e1      	bne.n	8008350 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800838c:	bf00      	nop
 800838e:	bf00      	nop
 8008390:	3708      	adds	r7, #8
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	20000998 	.word	0x20000998
 800839c:	200009c4 	.word	0x200009c4
 80083a0:	200009ac 	.word	0x200009ac

080083a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b082      	sub	sp, #8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 ff6b 	bl	800928c <vPortFree>
			vPortFree( pxTCB );
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f000 ff68 	bl	800928c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083bc:	bf00      	nop
 80083be:	3708      	adds	r7, #8
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083ca:	4b0c      	ldr	r3, [pc, #48]	@ (80083fc <prvResetNextTaskUnblockTime+0x38>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d104      	bne.n	80083de <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80083d4:	4b0a      	ldr	r3, [pc, #40]	@ (8008400 <prvResetNextTaskUnblockTime+0x3c>)
 80083d6:	f04f 32ff 	mov.w	r2, #4294967295
 80083da:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80083dc:	e008      	b.n	80083f0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083de:	4b07      	ldr	r3, [pc, #28]	@ (80083fc <prvResetNextTaskUnblockTime+0x38>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	68db      	ldr	r3, [r3, #12]
 80083e6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	685b      	ldr	r3, [r3, #4]
 80083ec:	4a04      	ldr	r2, [pc, #16]	@ (8008400 <prvResetNextTaskUnblockTime+0x3c>)
 80083ee:	6013      	str	r3, [r2, #0]
}
 80083f0:	bf00      	nop
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	2000097c 	.word	0x2000097c
 8008400:	200009e4 	.word	0x200009e4

08008404 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800840a:	4b0b      	ldr	r3, [pc, #44]	@ (8008438 <xTaskGetSchedulerState+0x34>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d102      	bne.n	8008418 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008412:	2301      	movs	r3, #1
 8008414:	607b      	str	r3, [r7, #4]
 8008416:	e008      	b.n	800842a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008418:	4b08      	ldr	r3, [pc, #32]	@ (800843c <xTaskGetSchedulerState+0x38>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d102      	bne.n	8008426 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008420:	2302      	movs	r3, #2
 8008422:	607b      	str	r3, [r7, #4]
 8008424:	e001      	b.n	800842a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008426:	2300      	movs	r3, #0
 8008428:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800842a:	687b      	ldr	r3, [r7, #4]
	}
 800842c:	4618      	mov	r0, r3
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	200009d0 	.word	0x200009d0
 800843c:	200009ec 	.word	0x200009ec

08008440 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800844c:	2300      	movs	r3, #0
 800844e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d070      	beq.n	8008538 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008456:	4b3b      	ldr	r3, [pc, #236]	@ (8008544 <xTaskPriorityDisinherit+0x104>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	693a      	ldr	r2, [r7, #16]
 800845c:	429a      	cmp	r2, r3
 800845e:	d00b      	beq.n	8008478 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	60fb      	str	r3, [r7, #12]
}
 8008472:	bf00      	nop
 8008474:	bf00      	nop
 8008476:	e7fd      	b.n	8008474 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800847c:	2b00      	cmp	r3, #0
 800847e:	d10b      	bne.n	8008498 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	60bb      	str	r3, [r7, #8]
}
 8008492:	bf00      	nop
 8008494:	bf00      	nop
 8008496:	e7fd      	b.n	8008494 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800849c:	1e5a      	subs	r2, r3, #1
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	64da      	str	r2, [r3, #76]	@ 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d044      	beq.n	8008538 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d140      	bne.n	8008538 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	3304      	adds	r3, #4
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe fd38 	bl	8006f30 <uxListRemove>
 80084c0:	4603      	mov	r3, r0
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d115      	bne.n	80084f2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ca:	491f      	ldr	r1, [pc, #124]	@ (8008548 <xTaskPriorityDisinherit+0x108>)
 80084cc:	4613      	mov	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	4413      	add	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	440b      	add	r3, r1
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10a      	bne.n	80084f2 <xTaskPriorityDisinherit+0xb2>
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e0:	2201      	movs	r2, #1
 80084e2:	fa02 f303 	lsl.w	r3, r2, r3
 80084e6:	43da      	mvns	r2, r3
 80084e8:	4b18      	ldr	r3, [pc, #96]	@ (800854c <xTaskPriorityDisinherit+0x10c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4013      	ands	r3, r2
 80084ee:	4a17      	ldr	r2, [pc, #92]	@ (800854c <xTaskPriorityDisinherit+0x10c>)
 80084f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084f2:	693b      	ldr	r3, [r7, #16]
 80084f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084fe:	f1c3 0205 	rsb	r2, r3, #5
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800850a:	2201      	movs	r2, #1
 800850c:	409a      	lsls	r2, r3
 800850e:	4b0f      	ldr	r3, [pc, #60]	@ (800854c <xTaskPriorityDisinherit+0x10c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4313      	orrs	r3, r2
 8008514:	4a0d      	ldr	r2, [pc, #52]	@ (800854c <xTaskPriorityDisinherit+0x10c>)
 8008516:	6013      	str	r3, [r2, #0]
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800851c:	4613      	mov	r3, r2
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4a08      	ldr	r2, [pc, #32]	@ (8008548 <xTaskPriorityDisinherit+0x108>)
 8008526:	441a      	add	r2, r3
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	3304      	adds	r3, #4
 800852c:	4619      	mov	r1, r3
 800852e:	4610      	mov	r0, r2
 8008530:	f7fe fca1 	bl	8006e76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008534:	2301      	movs	r3, #1
 8008536:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008538:	697b      	ldr	r3, [r7, #20]
	}
 800853a:	4618      	mov	r0, r3
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	200008ec 	.word	0x200008ec
 8008548:	200008f0 	.word	0x200008f0
 800854c:	200009cc 	.word	0x200009cc

08008550 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800855a:	4b29      	ldr	r3, [pc, #164]	@ (8008600 <prvAddCurrentTaskToDelayedList+0xb0>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008560:	4b28      	ldr	r3, [pc, #160]	@ (8008604 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	3304      	adds	r3, #4
 8008566:	4618      	mov	r0, r3
 8008568:	f7fe fce2 	bl	8006f30 <uxListRemove>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d10b      	bne.n	800858a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008572:	4b24      	ldr	r3, [pc, #144]	@ (8008604 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008578:	2201      	movs	r2, #1
 800857a:	fa02 f303 	lsl.w	r3, r2, r3
 800857e:	43da      	mvns	r2, r3
 8008580:	4b21      	ldr	r3, [pc, #132]	@ (8008608 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4013      	ands	r3, r2
 8008586:	4a20      	ldr	r2, [pc, #128]	@ (8008608 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008588:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008590:	d10a      	bne.n	80085a8 <prvAddCurrentTaskToDelayedList+0x58>
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d007      	beq.n	80085a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008598:	4b1a      	ldr	r3, [pc, #104]	@ (8008604 <prvAddCurrentTaskToDelayedList+0xb4>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	3304      	adds	r3, #4
 800859e:	4619      	mov	r1, r3
 80085a0:	481a      	ldr	r0, [pc, #104]	@ (800860c <prvAddCurrentTaskToDelayedList+0xbc>)
 80085a2:	f7fe fc68 	bl	8006e76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80085a6:	e026      	b.n	80085f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4413      	add	r3, r2
 80085ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80085b0:	4b14      	ldr	r3, [pc, #80]	@ (8008604 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68ba      	ldr	r2, [r7, #8]
 80085b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80085b8:	68ba      	ldr	r2, [r7, #8]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d209      	bcs.n	80085d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085c0:	4b13      	ldr	r3, [pc, #76]	@ (8008610 <prvAddCurrentTaskToDelayedList+0xc0>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008604 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	3304      	adds	r3, #4
 80085ca:	4619      	mov	r1, r3
 80085cc:	4610      	mov	r0, r2
 80085ce:	f7fe fc76 	bl	8006ebe <vListInsert>
}
 80085d2:	e010      	b.n	80085f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085d4:	4b0f      	ldr	r3, [pc, #60]	@ (8008614 <prvAddCurrentTaskToDelayedList+0xc4>)
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008604 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	3304      	adds	r3, #4
 80085de:	4619      	mov	r1, r3
 80085e0:	4610      	mov	r0, r2
 80085e2:	f7fe fc6c 	bl	8006ebe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008618 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	68ba      	ldr	r2, [r7, #8]
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d202      	bcs.n	80085f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80085f0:	4a09      	ldr	r2, [pc, #36]	@ (8008618 <prvAddCurrentTaskToDelayedList+0xc8>)
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	6013      	str	r3, [r2, #0]
}
 80085f6:	bf00      	nop
 80085f8:	3710      	adds	r7, #16
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	200009c8 	.word	0x200009c8
 8008604:	200008ec 	.word	0x200008ec
 8008608:	200009cc 	.word	0x200009cc
 800860c:	200009b0 	.word	0x200009b0
 8008610:	20000980 	.word	0x20000980
 8008614:	2000097c 	.word	0x2000097c
 8008618:	200009e4 	.word	0x200009e4

0800861c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8008622:	2300      	movs	r3, #0
 8008624:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008626:	f000 fae1 	bl	8008bec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800862a:	4b12      	ldr	r3, [pc, #72]	@ (8008674 <xTimerCreateTimerTask+0x58>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00b      	beq.n	800864a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8008632:	4b11      	ldr	r3, [pc, #68]	@ (8008678 <xTimerCreateTimerTask+0x5c>)
 8008634:	9301      	str	r3, [sp, #4]
 8008636:	2302      	movs	r3, #2
 8008638:	9300      	str	r3, [sp, #0]
 800863a:	2300      	movs	r3, #0
 800863c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008640:	490e      	ldr	r1, [pc, #56]	@ (800867c <xTimerCreateTimerTask+0x60>)
 8008642:	480f      	ldr	r0, [pc, #60]	@ (8008680 <xTimerCreateTimerTask+0x64>)
 8008644:	f7ff f956 	bl	80078f4 <xTaskCreate>
 8008648:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10b      	bne.n	8008668 <xTimerCreateTimerTask+0x4c>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	603b      	str	r3, [r7, #0]
}
 8008662:	bf00      	nop
 8008664:	bf00      	nop
 8008666:	e7fd      	b.n	8008664 <xTimerCreateTimerTask+0x48>
	return xReturn;
 8008668:	687b      	ldr	r3, [r7, #4]
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	20000a20 	.word	0x20000a20
 8008678:	20000a24 	.word	0x20000a24
 800867c:	0800d49c 	.word	0x0800d49c
 8008680:	080087bd 	.word	0x080087bd

08008684 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b08a      	sub	sp, #40	@ 0x28
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008692:	2300      	movs	r3, #0
 8008694:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d10b      	bne.n	80086b4 <xTimerGenericCommand+0x30>
	__asm volatile
 800869c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086a0:	f383 8811 	msr	BASEPRI, r3
 80086a4:	f3bf 8f6f 	isb	sy
 80086a8:	f3bf 8f4f 	dsb	sy
 80086ac:	623b      	str	r3, [r7, #32]
}
 80086ae:	bf00      	nop
 80086b0:	bf00      	nop
 80086b2:	e7fd      	b.n	80086b0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80086b4:	4b19      	ldr	r3, [pc, #100]	@ (800871c <xTimerGenericCommand+0x98>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d02a      	beq.n	8008712 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	2b05      	cmp	r3, #5
 80086cc:	dc18      	bgt.n	8008700 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80086ce:	f7ff fe99 	bl	8008404 <xTaskGetSchedulerState>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d109      	bne.n	80086ec <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80086d8:	4b10      	ldr	r3, [pc, #64]	@ (800871c <xTimerGenericCommand+0x98>)
 80086da:	6818      	ldr	r0, [r3, #0]
 80086dc:	f107 0114 	add.w	r1, r7, #20
 80086e0:	2300      	movs	r3, #0
 80086e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086e4:	f7fe fd18 	bl	8007118 <xQueueGenericSend>
 80086e8:	6278      	str	r0, [r7, #36]	@ 0x24
 80086ea:	e012      	b.n	8008712 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80086ec:	4b0b      	ldr	r3, [pc, #44]	@ (800871c <xTimerGenericCommand+0x98>)
 80086ee:	6818      	ldr	r0, [r3, #0]
 80086f0:	f107 0114 	add.w	r1, r7, #20
 80086f4:	2300      	movs	r3, #0
 80086f6:	2200      	movs	r2, #0
 80086f8:	f7fe fd0e 	bl	8007118 <xQueueGenericSend>
 80086fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80086fe:	e008      	b.n	8008712 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008700:	4b06      	ldr	r3, [pc, #24]	@ (800871c <xTimerGenericCommand+0x98>)
 8008702:	6818      	ldr	r0, [r3, #0]
 8008704:	f107 0114 	add.w	r1, r7, #20
 8008708:	2300      	movs	r3, #0
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	f7fe fe06 	bl	800731c <xQueueGenericSendFromISR>
 8008710:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008714:	4618      	mov	r0, r3
 8008716:	3728      	adds	r7, #40	@ 0x28
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}
 800871c:	20000a20 	.word	0x20000a20

08008720 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b088      	sub	sp, #32
 8008724:	af02      	add	r7, sp, #8
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800872a:	4b23      	ldr	r3, [pc, #140]	@ (80087b8 <prvProcessExpiredTimer+0x98>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	3304      	adds	r3, #4
 8008738:	4618      	mov	r0, r3
 800873a:	f7fe fbf9 	bl	8006f30 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008744:	f003 0304 	and.w	r3, r3, #4
 8008748:	2b00      	cmp	r3, #0
 800874a:	d023      	beq.n	8008794 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	699a      	ldr	r2, [r3, #24]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	18d1      	adds	r1, r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	683a      	ldr	r2, [r7, #0]
 8008758:	6978      	ldr	r0, [r7, #20]
 800875a:	f000 f8d5 	bl	8008908 <prvInsertTimerInActiveList>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d020      	beq.n	80087a6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008764:	2300      	movs	r3, #0
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	2300      	movs	r3, #0
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	2100      	movs	r1, #0
 800876e:	6978      	ldr	r0, [r7, #20]
 8008770:	f7ff ff88 	bl	8008684 <xTimerGenericCommand>
 8008774:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008776:	693b      	ldr	r3, [r7, #16]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d114      	bne.n	80087a6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800877c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008780:	f383 8811 	msr	BASEPRI, r3
 8008784:	f3bf 8f6f 	isb	sy
 8008788:	f3bf 8f4f 	dsb	sy
 800878c:	60fb      	str	r3, [r7, #12]
}
 800878e:	bf00      	nop
 8008790:	bf00      	nop
 8008792:	e7fd      	b.n	8008790 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800879a:	f023 0301 	bic.w	r3, r3, #1
 800879e:	b2da      	uxtb	r2, r3
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	6a1b      	ldr	r3, [r3, #32]
 80087aa:	6978      	ldr	r0, [r7, #20]
 80087ac:	4798      	blx	r3
}
 80087ae:	bf00      	nop
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	20000a18 	.word	0x20000a18

080087bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087c4:	f107 0308 	add.w	r3, r7, #8
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 f859 	bl	8008880 <prvGetNextExpireTime>
 80087ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	4619      	mov	r1, r3
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f000 f805 	bl	80087e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80087da:	f000 f8d7 	bl	800898c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80087de:	bf00      	nop
 80087e0:	e7f0      	b.n	80087c4 <prvTimerTask+0x8>
	...

080087e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80087ee:	f7ff fa45 	bl	8007c7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80087f2:	f107 0308 	add.w	r3, r7, #8
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 f866 	bl	80088c8 <prvSampleTimeNow>
 80087fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d130      	bne.n	8008866 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10a      	bne.n	8008820 <prvProcessTimerOrBlockTask+0x3c>
 800880a:	687a      	ldr	r2, [r7, #4]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	429a      	cmp	r2, r3
 8008810:	d806      	bhi.n	8008820 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008812:	f7ff fa41 	bl	8007c98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008816:	68f9      	ldr	r1, [r7, #12]
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f7ff ff81 	bl	8008720 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800881e:	e024      	b.n	800886a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d008      	beq.n	8008838 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008826:	4b13      	ldr	r3, [pc, #76]	@ (8008874 <prvProcessTimerOrBlockTask+0x90>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <prvProcessTimerOrBlockTask+0x50>
 8008830:	2301      	movs	r3, #1
 8008832:	e000      	b.n	8008836 <prvProcessTimerOrBlockTask+0x52>
 8008834:	2300      	movs	r3, #0
 8008836:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008838:	4b0f      	ldr	r3, [pc, #60]	@ (8008878 <prvProcessTimerOrBlockTask+0x94>)
 800883a:	6818      	ldr	r0, [r3, #0]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	683a      	ldr	r2, [r7, #0]
 8008844:	4619      	mov	r1, r3
 8008846:	f7ff f821 	bl	800788c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800884a:	f7ff fa25 	bl	8007c98 <xTaskResumeAll>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10a      	bne.n	800886a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008854:	4b09      	ldr	r3, [pc, #36]	@ (800887c <prvProcessTimerOrBlockTask+0x98>)
 8008856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	f3bf 8f6f 	isb	sy
}
 8008864:	e001      	b.n	800886a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008866:	f7ff fa17 	bl	8007c98 <xTaskResumeAll>
}
 800886a:	bf00      	nop
 800886c:	3710      	adds	r7, #16
 800886e:	46bd      	mov	sp, r7
 8008870:	bd80      	pop	{r7, pc}
 8008872:	bf00      	nop
 8008874:	20000a1c 	.word	0x20000a1c
 8008878:	20000a20 	.word	0x20000a20
 800887c:	e000ed04 	.word	0xe000ed04

08008880 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008888:	4b0e      	ldr	r3, [pc, #56]	@ (80088c4 <prvGetNextExpireTime+0x44>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <prvGetNextExpireTime+0x16>
 8008892:	2201      	movs	r2, #1
 8008894:	e000      	b.n	8008898 <prvGetNextExpireTime+0x18>
 8008896:	2200      	movs	r2, #0
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d105      	bne.n	80088b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088a4:	4b07      	ldr	r3, [pc, #28]	@ (80088c4 <prvGetNextExpireTime+0x44>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	60fb      	str	r3, [r7, #12]
 80088ae:	e001      	b.n	80088b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80088b0:	2300      	movs	r3, #0
 80088b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80088b4:	68fb      	ldr	r3, [r7, #12]
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	20000a18 	.word	0x20000a18

080088c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80088d0:	f7ff fa80 	bl	8007dd4 <xTaskGetTickCount>
 80088d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80088d6:	4b0b      	ldr	r3, [pc, #44]	@ (8008904 <prvSampleTimeNow+0x3c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	68fa      	ldr	r2, [r7, #12]
 80088dc:	429a      	cmp	r2, r3
 80088de:	d205      	bcs.n	80088ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80088e0:	f000 f91e 	bl	8008b20 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	601a      	str	r2, [r3, #0]
 80088ea:	e002      	b.n	80088f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80088f2:	4a04      	ldr	r2, [pc, #16]	@ (8008904 <prvSampleTimeNow+0x3c>)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80088f8:	68fb      	ldr	r3, [r7, #12]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	20000a28 	.word	0x20000a28

08008908 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
 8008914:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008916:	2300      	movs	r3, #0
 8008918:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	68fa      	ldr	r2, [r7, #12]
 8008924:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008926:	68ba      	ldr	r2, [r7, #8]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	429a      	cmp	r2, r3
 800892c:	d812      	bhi.n	8008954 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800892e:	687a      	ldr	r2, [r7, #4]
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	1ad2      	subs	r2, r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	429a      	cmp	r2, r3
 800893a:	d302      	bcc.n	8008942 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800893c:	2301      	movs	r3, #1
 800893e:	617b      	str	r3, [r7, #20]
 8008940:	e01b      	b.n	800897a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008942:	4b10      	ldr	r3, [pc, #64]	@ (8008984 <prvInsertTimerInActiveList+0x7c>)
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3304      	adds	r3, #4
 800894a:	4619      	mov	r1, r3
 800894c:	4610      	mov	r0, r2
 800894e:	f7fe fab6 	bl	8006ebe <vListInsert>
 8008952:	e012      	b.n	800897a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008954:	687a      	ldr	r2, [r7, #4]
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	429a      	cmp	r2, r3
 800895a:	d206      	bcs.n	800896a <prvInsertTimerInActiveList+0x62>
 800895c:	68ba      	ldr	r2, [r7, #8]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	429a      	cmp	r2, r3
 8008962:	d302      	bcc.n	800896a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008964:	2301      	movs	r3, #1
 8008966:	617b      	str	r3, [r7, #20]
 8008968:	e007      	b.n	800897a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800896a:	4b07      	ldr	r3, [pc, #28]	@ (8008988 <prvInsertTimerInActiveList+0x80>)
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	3304      	adds	r3, #4
 8008972:	4619      	mov	r1, r3
 8008974:	4610      	mov	r0, r2
 8008976:	f7fe faa2 	bl	8006ebe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800897a:	697b      	ldr	r3, [r7, #20]
}
 800897c:	4618      	mov	r0, r3
 800897e:	3718      	adds	r7, #24
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}
 8008984:	20000a1c 	.word	0x20000a1c
 8008988:	20000a18 	.word	0x20000a18

0800898c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b08c      	sub	sp, #48	@ 0x30
 8008990:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008992:	e0b2      	b.n	8008afa <prvProcessReceivedCommands+0x16e>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	2b00      	cmp	r3, #0
 8008998:	f2c0 80af 	blt.w	8008afa <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80089a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089a2:	695b      	ldr	r3, [r3, #20]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d004      	beq.n	80089b2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089aa:	3304      	adds	r3, #4
 80089ac:	4618      	mov	r0, r3
 80089ae:	f7fe fabf 	bl	8006f30 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80089b2:	1d3b      	adds	r3, r7, #4
 80089b4:	4618      	mov	r0, r3
 80089b6:	f7ff ff87 	bl	80088c8 <prvSampleTimeNow>
 80089ba:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80089bc:	68bb      	ldr	r3, [r7, #8]
 80089be:	2b09      	cmp	r3, #9
 80089c0:	f200 8098 	bhi.w	8008af4 <prvProcessReceivedCommands+0x168>
 80089c4:	a201      	add	r2, pc, #4	@ (adr r2, 80089cc <prvProcessReceivedCommands+0x40>)
 80089c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089ca:	bf00      	nop
 80089cc:	080089f5 	.word	0x080089f5
 80089d0:	080089f5 	.word	0x080089f5
 80089d4:	080089f5 	.word	0x080089f5
 80089d8:	08008a6b 	.word	0x08008a6b
 80089dc:	08008a7f 	.word	0x08008a7f
 80089e0:	08008acb 	.word	0x08008acb
 80089e4:	080089f5 	.word	0x080089f5
 80089e8:	080089f5 	.word	0x080089f5
 80089ec:	08008a6b 	.word	0x08008a6b
 80089f0:	08008a7f 	.word	0x08008a7f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80089f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80089fa:	f043 0301 	orr.w	r3, r3, #1
 80089fe:	b2da      	uxtb	r2, r3
 8008a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0a:	699b      	ldr	r3, [r3, #24]
 8008a0c:	18d1      	adds	r1, r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	6a3a      	ldr	r2, [r7, #32]
 8008a12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a14:	f7ff ff78 	bl	8008908 <prvInsertTimerInActiveList>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d06c      	beq.n	8008af8 <prvProcessReceivedCommands+0x16c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a24:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a2c:	f003 0304 	and.w	r3, r3, #4
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d061      	beq.n	8008af8 <prvProcessReceivedCommands+0x16c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008a34:	68fa      	ldr	r2, [r7, #12]
 8008a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	441a      	add	r2, r3
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	9300      	str	r3, [sp, #0]
 8008a40:	2300      	movs	r3, #0
 8008a42:	2100      	movs	r1, #0
 8008a44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008a46:	f7ff fe1d 	bl	8008684 <xTimerGenericCommand>
 8008a4a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d152      	bne.n	8008af8 <prvProcessReceivedCommands+0x16c>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	61bb      	str	r3, [r7, #24]
}
 8008a64:	bf00      	nop
 8008a66:	bf00      	nop
 8008a68:	e7fd      	b.n	8008a66 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a70:	f023 0301 	bic.w	r3, r3, #1
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a78:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008a7c:	e03d      	b.n	8008afa <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a84:	f043 0301 	orr.w	r3, r3, #1
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008a90:	68fa      	ldr	r2, [r7, #12]
 8008a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a94:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a98:	699b      	ldr	r3, [r3, #24]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10b      	bne.n	8008ab6 <prvProcessReceivedCommands+0x12a>
	__asm volatile
 8008a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aa2:	f383 8811 	msr	BASEPRI, r3
 8008aa6:	f3bf 8f6f 	isb	sy
 8008aaa:	f3bf 8f4f 	dsb	sy
 8008aae:	617b      	str	r3, [r7, #20]
}
 8008ab0:	bf00      	nop
 8008ab2:	bf00      	nop
 8008ab4:	e7fd      	b.n	8008ab2 <prvProcessReceivedCommands+0x126>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab8:	699a      	ldr	r2, [r3, #24]
 8008aba:	6a3b      	ldr	r3, [r7, #32]
 8008abc:	18d1      	adds	r1, r2, r3
 8008abe:	6a3b      	ldr	r3, [r7, #32]
 8008ac0:	6a3a      	ldr	r2, [r7, #32]
 8008ac2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ac4:	f7ff ff20 	bl	8008908 <prvInsertTimerInActiveList>
					break;
 8008ac8:	e017      	b.n	8008afa <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008acc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ad0:	f003 0302 	and.w	r3, r3, #2
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d103      	bne.n	8008ae0 <prvProcessReceivedCommands+0x154>
						{
							vPortFree( pxTimer );
 8008ad8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ada:	f000 fbd7 	bl	800928c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008ade:	e00c      	b.n	8008afa <prvProcessReceivedCommands+0x16e>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ae6:	f023 0301 	bic.w	r3, r3, #1
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008af2:	e002      	b.n	8008afa <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8008af4:	bf00      	nop
 8008af6:	e000      	b.n	8008afa <prvProcessReceivedCommands+0x16e>
					break;
 8008af8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008afa:	4b08      	ldr	r3, [pc, #32]	@ (8008b1c <prvProcessReceivedCommands+0x190>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f107 0108 	add.w	r1, r7, #8
 8008b02:	2200      	movs	r2, #0
 8008b04:	4618      	mov	r0, r3
 8008b06:	f7fe fca5 	bl	8007454 <xQueueReceive>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	f47f af41 	bne.w	8008994 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008b12:	bf00      	nop
 8008b14:	bf00      	nop
 8008b16:	3728      	adds	r7, #40	@ 0x28
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}
 8008b1c:	20000a20 	.word	0x20000a20

08008b20 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b088      	sub	sp, #32
 8008b24:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008b26:	e049      	b.n	8008bbc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b28:	4b2e      	ldr	r3, [pc, #184]	@ (8008be4 <prvSwitchTimerLists+0xc4>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b32:	4b2c      	ldr	r3, [pc, #176]	@ (8008be4 <prvSwitchTimerLists+0xc4>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	68db      	ldr	r3, [r3, #12]
 8008b3a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	3304      	adds	r3, #4
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fe f9f5 	bl	8006f30 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	6a1b      	ldr	r3, [r3, #32]
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b54:	f003 0304 	and.w	r3, r3, #4
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d02f      	beq.n	8008bbc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	693a      	ldr	r2, [r7, #16]
 8008b62:	4413      	add	r3, r2
 8008b64:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008b66:	68ba      	ldr	r2, [r7, #8]
 8008b68:	693b      	ldr	r3, [r7, #16]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d90e      	bls.n	8008b8c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	68ba      	ldr	r2, [r7, #8]
 8008b72:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8008be4 <prvSwitchTimerLists+0xc4>)
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3304      	adds	r3, #4
 8008b82:	4619      	mov	r1, r3
 8008b84:	4610      	mov	r0, r2
 8008b86:	f7fe f99a 	bl	8006ebe <vListInsert>
 8008b8a:	e017      	b.n	8008bbc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	2300      	movs	r3, #0
 8008b92:	693a      	ldr	r2, [r7, #16]
 8008b94:	2100      	movs	r1, #0
 8008b96:	68f8      	ldr	r0, [r7, #12]
 8008b98:	f7ff fd74 	bl	8008684 <xTimerGenericCommand>
 8008b9c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10b      	bne.n	8008bbc <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	603b      	str	r3, [r7, #0]
}
 8008bb6:	bf00      	nop
 8008bb8:	bf00      	nop
 8008bba:	e7fd      	b.n	8008bb8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008bbc:	4b09      	ldr	r3, [pc, #36]	@ (8008be4 <prvSwitchTimerLists+0xc4>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1b0      	bne.n	8008b28 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008bc6:	4b07      	ldr	r3, [pc, #28]	@ (8008be4 <prvSwitchTimerLists+0xc4>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008bcc:	4b06      	ldr	r3, [pc, #24]	@ (8008be8 <prvSwitchTimerLists+0xc8>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a04      	ldr	r2, [pc, #16]	@ (8008be4 <prvSwitchTimerLists+0xc4>)
 8008bd2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008bd4:	4a04      	ldr	r2, [pc, #16]	@ (8008be8 <prvSwitchTimerLists+0xc8>)
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	6013      	str	r3, [r2, #0]
}
 8008bda:	bf00      	nop
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20000a18 	.word	0x20000a18
 8008be8:	20000a1c 	.word	0x20000a1c

08008bec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008bf0:	f000 f962 	bl	8008eb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008bf4:	4b12      	ldr	r3, [pc, #72]	@ (8008c40 <prvCheckForValidListAndQueue+0x54>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d11d      	bne.n	8008c38 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 8008bfc:	4811      	ldr	r0, [pc, #68]	@ (8008c44 <prvCheckForValidListAndQueue+0x58>)
 8008bfe:	f7fe f90d 	bl	8006e1c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008c02:	4811      	ldr	r0, [pc, #68]	@ (8008c48 <prvCheckForValidListAndQueue+0x5c>)
 8008c04:	f7fe f90a 	bl	8006e1c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008c08:	4b10      	ldr	r3, [pc, #64]	@ (8008c4c <prvCheckForValidListAndQueue+0x60>)
 8008c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8008c44 <prvCheckForValidListAndQueue+0x58>)
 8008c0c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008c0e:	4b10      	ldr	r3, [pc, #64]	@ (8008c50 <prvCheckForValidListAndQueue+0x64>)
 8008c10:	4a0d      	ldr	r2, [pc, #52]	@ (8008c48 <prvCheckForValidListAndQueue+0x5c>)
 8008c12:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008c14:	2200      	movs	r2, #0
 8008c16:	210c      	movs	r1, #12
 8008c18:	200a      	movs	r0, #10
 8008c1a:	f7fe fa1d 	bl	8007058 <xQueueGenericCreate>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	4a07      	ldr	r2, [pc, #28]	@ (8008c40 <prvCheckForValidListAndQueue+0x54>)
 8008c22:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008c24:	4b06      	ldr	r3, [pc, #24]	@ (8008c40 <prvCheckForValidListAndQueue+0x54>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d005      	beq.n	8008c38 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008c2c:	4b04      	ldr	r3, [pc, #16]	@ (8008c40 <prvCheckForValidListAndQueue+0x54>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4908      	ldr	r1, [pc, #32]	@ (8008c54 <prvCheckForValidListAndQueue+0x68>)
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7fe fe00 	bl	8007838 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c38:	f000 f970 	bl	8008f1c <vPortExitCritical>
}
 8008c3c:	bf00      	nop
 8008c3e:	bd80      	pop	{r7, pc}
 8008c40:	20000a20 	.word	0x20000a20
 8008c44:	200009f0 	.word	0x200009f0
 8008c48:	20000a04 	.word	0x20000a04
 8008c4c:	20000a18 	.word	0x20000a18
 8008c50:	20000a1c 	.word	0x20000a1c
 8008c54:	0800d4a4 	.word	0x0800d4a4

08008c58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3b04      	subs	r3, #4
 8008c68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008c70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	3b04      	subs	r3, #4
 8008c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f023 0201 	bic.w	r2, r3, #1
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	3b04      	subs	r3, #4
 8008c86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008c88:	4a0c      	ldr	r2, [pc, #48]	@ (8008cbc <pxPortInitialiseStack+0x64>)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	3b14      	subs	r3, #20
 8008c92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	3b04      	subs	r3, #4
 8008c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f06f 0202 	mvn.w	r2, #2
 8008ca6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	3b20      	subs	r3, #32
 8008cac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008cae:	68fb      	ldr	r3, [r7, #12]
}
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	3714      	adds	r7, #20
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr
 8008cbc:	08008cc1 	.word	0x08008cc1

08008cc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008cca:	4b13      	ldr	r3, [pc, #76]	@ (8008d18 <prvTaskExitError+0x58>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd2:	d00b      	beq.n	8008cec <prvTaskExitError+0x2c>
	__asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	60fb      	str	r3, [r7, #12]
}
 8008ce6:	bf00      	nop
 8008ce8:	bf00      	nop
 8008cea:	e7fd      	b.n	8008ce8 <prvTaskExitError+0x28>
	__asm volatile
 8008cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	60bb      	str	r3, [r7, #8]
}
 8008cfe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d00:	bf00      	nop
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d0fc      	beq.n	8008d02 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d08:	bf00      	nop
 8008d0a:	bf00      	nop
 8008d0c:	3714      	adds	r7, #20
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	20000010 	.word	0x20000010
 8008d1c:	00000000 	.word	0x00000000

08008d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d20:	4b07      	ldr	r3, [pc, #28]	@ (8008d40 <pxCurrentTCBConst2>)
 8008d22:	6819      	ldr	r1, [r3, #0]
 8008d24:	6808      	ldr	r0, [r1, #0]
 8008d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d2a:	f380 8809 	msr	PSP, r0
 8008d2e:	f3bf 8f6f 	isb	sy
 8008d32:	f04f 0000 	mov.w	r0, #0
 8008d36:	f380 8811 	msr	BASEPRI, r0
 8008d3a:	4770      	bx	lr
 8008d3c:	f3af 8000 	nop.w

08008d40 <pxCurrentTCBConst2>:
 8008d40:	200008ec 	.word	0x200008ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d44:	bf00      	nop
 8008d46:	bf00      	nop

08008d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d48:	4808      	ldr	r0, [pc, #32]	@ (8008d6c <prvPortStartFirstTask+0x24>)
 8008d4a:	6800      	ldr	r0, [r0, #0]
 8008d4c:	6800      	ldr	r0, [r0, #0]
 8008d4e:	f380 8808 	msr	MSP, r0
 8008d52:	f04f 0000 	mov.w	r0, #0
 8008d56:	f380 8814 	msr	CONTROL, r0
 8008d5a:	b662      	cpsie	i
 8008d5c:	b661      	cpsie	f
 8008d5e:	f3bf 8f4f 	dsb	sy
 8008d62:	f3bf 8f6f 	isb	sy
 8008d66:	df00      	svc	0
 8008d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008d6a:	bf00      	nop
 8008d6c:	e000ed08 	.word	0xe000ed08

08008d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b086      	sub	sp, #24
 8008d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008d76:	4b47      	ldr	r3, [pc, #284]	@ (8008e94 <xPortStartScheduler+0x124>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a47      	ldr	r2, [pc, #284]	@ (8008e98 <xPortStartScheduler+0x128>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d10b      	bne.n	8008d98 <xPortStartScheduler+0x28>
	__asm volatile
 8008d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d84:	f383 8811 	msr	BASEPRI, r3
 8008d88:	f3bf 8f6f 	isb	sy
 8008d8c:	f3bf 8f4f 	dsb	sy
 8008d90:	613b      	str	r3, [r7, #16]
}
 8008d92:	bf00      	nop
 8008d94:	bf00      	nop
 8008d96:	e7fd      	b.n	8008d94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008d98:	4b3e      	ldr	r3, [pc, #248]	@ (8008e94 <xPortStartScheduler+0x124>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8008e9c <xPortStartScheduler+0x12c>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d10b      	bne.n	8008dba <xPortStartScheduler+0x4a>
	__asm volatile
 8008da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da6:	f383 8811 	msr	BASEPRI, r3
 8008daa:	f3bf 8f6f 	isb	sy
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	60fb      	str	r3, [r7, #12]
}
 8008db4:	bf00      	nop
 8008db6:	bf00      	nop
 8008db8:	e7fd      	b.n	8008db6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008dba:	4b39      	ldr	r3, [pc, #228]	@ (8008ea0 <xPortStartScheduler+0x130>)
 8008dbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	b2db      	uxtb	r3, r3
 8008dc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	22ff      	movs	r2, #255	@ 0xff
 8008dca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	b2db      	uxtb	r3, r3
 8008dd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	b2db      	uxtb	r3, r3
 8008dd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008ddc:	b2da      	uxtb	r2, r3
 8008dde:	4b31      	ldr	r3, [pc, #196]	@ (8008ea4 <xPortStartScheduler+0x134>)
 8008de0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008de2:	4b31      	ldr	r3, [pc, #196]	@ (8008ea8 <xPortStartScheduler+0x138>)
 8008de4:	2207      	movs	r2, #7
 8008de6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008de8:	e009      	b.n	8008dfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008dea:	4b2f      	ldr	r3, [pc, #188]	@ (8008ea8 <xPortStartScheduler+0x138>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	3b01      	subs	r3, #1
 8008df0:	4a2d      	ldr	r2, [pc, #180]	@ (8008ea8 <xPortStartScheduler+0x138>)
 8008df2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008df4:	78fb      	ldrb	r3, [r7, #3]
 8008df6:	b2db      	uxtb	r3, r3
 8008df8:	005b      	lsls	r3, r3, #1
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008dfe:	78fb      	ldrb	r3, [r7, #3]
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e06:	2b80      	cmp	r3, #128	@ 0x80
 8008e08:	d0ef      	beq.n	8008dea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e0a:	4b27      	ldr	r3, [pc, #156]	@ (8008ea8 <xPortStartScheduler+0x138>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f1c3 0307 	rsb	r3, r3, #7
 8008e12:	2b04      	cmp	r3, #4
 8008e14:	d00b      	beq.n	8008e2e <xPortStartScheduler+0xbe>
	__asm volatile
 8008e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1a:	f383 8811 	msr	BASEPRI, r3
 8008e1e:	f3bf 8f6f 	isb	sy
 8008e22:	f3bf 8f4f 	dsb	sy
 8008e26:	60bb      	str	r3, [r7, #8]
}
 8008e28:	bf00      	nop
 8008e2a:	bf00      	nop
 8008e2c:	e7fd      	b.n	8008e2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ea8 <xPortStartScheduler+0x138>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	021b      	lsls	r3, r3, #8
 8008e34:	4a1c      	ldr	r2, [pc, #112]	@ (8008ea8 <xPortStartScheduler+0x138>)
 8008e36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e38:	4b1b      	ldr	r3, [pc, #108]	@ (8008ea8 <xPortStartScheduler+0x138>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e40:	4a19      	ldr	r2, [pc, #100]	@ (8008ea8 <xPortStartScheduler+0x138>)
 8008e42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	b2da      	uxtb	r2, r3
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e4c:	4b17      	ldr	r3, [pc, #92]	@ (8008eac <xPortStartScheduler+0x13c>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a16      	ldr	r2, [pc, #88]	@ (8008eac <xPortStartScheduler+0x13c>)
 8008e52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008e56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008e58:	4b14      	ldr	r3, [pc, #80]	@ (8008eac <xPortStartScheduler+0x13c>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a13      	ldr	r2, [pc, #76]	@ (8008eac <xPortStartScheduler+0x13c>)
 8008e5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008e62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008e64:	f000 f8da 	bl	800901c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008e68:	4b11      	ldr	r3, [pc, #68]	@ (8008eb0 <xPortStartScheduler+0x140>)
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008e6e:	f000 f8f9 	bl	8009064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008e72:	4b10      	ldr	r3, [pc, #64]	@ (8008eb4 <xPortStartScheduler+0x144>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a0f      	ldr	r2, [pc, #60]	@ (8008eb4 <xPortStartScheduler+0x144>)
 8008e78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008e7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008e7e:	f7ff ff63 	bl	8008d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008e82:	f7ff f871 	bl	8007f68 <vTaskSwitchContext>
	prvTaskExitError();
 8008e86:	f7ff ff1b 	bl	8008cc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	e000ed00 	.word	0xe000ed00
 8008e98:	410fc271 	.word	0x410fc271
 8008e9c:	410fc270 	.word	0x410fc270
 8008ea0:	e000e400 	.word	0xe000e400
 8008ea4:	20000a2c 	.word	0x20000a2c
 8008ea8:	20000a30 	.word	0x20000a30
 8008eac:	e000ed20 	.word	0xe000ed20
 8008eb0:	20000010 	.word	0x20000010
 8008eb4:	e000ef34 	.word	0xe000ef34

08008eb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8008ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec2:	f383 8811 	msr	BASEPRI, r3
 8008ec6:	f3bf 8f6f 	isb	sy
 8008eca:	f3bf 8f4f 	dsb	sy
 8008ece:	607b      	str	r3, [r7, #4]
}
 8008ed0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ed2:	4b10      	ldr	r3, [pc, #64]	@ (8008f14 <vPortEnterCritical+0x5c>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8008f14 <vPortEnterCritical+0x5c>)
 8008eda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008edc:	4b0d      	ldr	r3, [pc, #52]	@ (8008f14 <vPortEnterCritical+0x5c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d110      	bne.n	8008f06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8008f18 <vPortEnterCritical+0x60>)
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00b      	beq.n	8008f06 <vPortEnterCritical+0x4e>
	__asm volatile
 8008eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef2:	f383 8811 	msr	BASEPRI, r3
 8008ef6:	f3bf 8f6f 	isb	sy
 8008efa:	f3bf 8f4f 	dsb	sy
 8008efe:	603b      	str	r3, [r7, #0]
}
 8008f00:	bf00      	nop
 8008f02:	bf00      	nop
 8008f04:	e7fd      	b.n	8008f02 <vPortEnterCritical+0x4a>
	}
}
 8008f06:	bf00      	nop
 8008f08:	370c      	adds	r7, #12
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	20000010 	.word	0x20000010
 8008f18:	e000ed04 	.word	0xe000ed04

08008f1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f22:	4b12      	ldr	r3, [pc, #72]	@ (8008f6c <vPortExitCritical+0x50>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10b      	bne.n	8008f42 <vPortExitCritical+0x26>
	__asm volatile
 8008f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f2e:	f383 8811 	msr	BASEPRI, r3
 8008f32:	f3bf 8f6f 	isb	sy
 8008f36:	f3bf 8f4f 	dsb	sy
 8008f3a:	607b      	str	r3, [r7, #4]
}
 8008f3c:	bf00      	nop
 8008f3e:	bf00      	nop
 8008f40:	e7fd      	b.n	8008f3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008f42:	4b0a      	ldr	r3, [pc, #40]	@ (8008f6c <vPortExitCritical+0x50>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3b01      	subs	r3, #1
 8008f48:	4a08      	ldr	r2, [pc, #32]	@ (8008f6c <vPortExitCritical+0x50>)
 8008f4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f4c:	4b07      	ldr	r3, [pc, #28]	@ (8008f6c <vPortExitCritical+0x50>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d105      	bne.n	8008f60 <vPortExitCritical+0x44>
 8008f54:	2300      	movs	r3, #0
 8008f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	f383 8811 	msr	BASEPRI, r3
}
 8008f5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	20000010 	.word	0x20000010

08008f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008f70:	f3ef 8009 	mrs	r0, PSP
 8008f74:	f3bf 8f6f 	isb	sy
 8008f78:	4b15      	ldr	r3, [pc, #84]	@ (8008fd0 <pxCurrentTCBConst>)
 8008f7a:	681a      	ldr	r2, [r3, #0]
 8008f7c:	f01e 0f10 	tst.w	lr, #16
 8008f80:	bf08      	it	eq
 8008f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f8a:	6010      	str	r0, [r2, #0]
 8008f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008f90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008f94:	f380 8811 	msr	BASEPRI, r0
 8008f98:	f3bf 8f4f 	dsb	sy
 8008f9c:	f3bf 8f6f 	isb	sy
 8008fa0:	f7fe ffe2 	bl	8007f68 <vTaskSwitchContext>
 8008fa4:	f04f 0000 	mov.w	r0, #0
 8008fa8:	f380 8811 	msr	BASEPRI, r0
 8008fac:	bc09      	pop	{r0, r3}
 8008fae:	6819      	ldr	r1, [r3, #0]
 8008fb0:	6808      	ldr	r0, [r1, #0]
 8008fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb6:	f01e 0f10 	tst.w	lr, #16
 8008fba:	bf08      	it	eq
 8008fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008fc0:	f380 8809 	msr	PSP, r0
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	f3af 8000 	nop.w

08008fd0 <pxCurrentTCBConst>:
 8008fd0:	200008ec 	.word	0x200008ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop

08008fd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b082      	sub	sp, #8
 8008fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8008fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fe2:	f383 8811 	msr	BASEPRI, r3
 8008fe6:	f3bf 8f6f 	isb	sy
 8008fea:	f3bf 8f4f 	dsb	sy
 8008fee:	607b      	str	r3, [r7, #4]
}
 8008ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ff2:	f7fe feff 	bl	8007df4 <xTaskIncrementTick>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d003      	beq.n	8009004 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008ffc:	4b06      	ldr	r3, [pc, #24]	@ (8009018 <SysTick_Handler+0x40>)
 8008ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009002:	601a      	str	r2, [r3, #0]
 8009004:	2300      	movs	r3, #0
 8009006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	f383 8811 	msr	BASEPRI, r3
}
 800900e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009010:	bf00      	nop
 8009012:	3708      	adds	r7, #8
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}
 8009018:	e000ed04 	.word	0xe000ed04

0800901c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800901c:	b480      	push	{r7}
 800901e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009020:	4b0b      	ldr	r3, [pc, #44]	@ (8009050 <vPortSetupTimerInterrupt+0x34>)
 8009022:	2200      	movs	r2, #0
 8009024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009026:	4b0b      	ldr	r3, [pc, #44]	@ (8009054 <vPortSetupTimerInterrupt+0x38>)
 8009028:	2200      	movs	r2, #0
 800902a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800902c:	4b0a      	ldr	r3, [pc, #40]	@ (8009058 <vPortSetupTimerInterrupt+0x3c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a0a      	ldr	r2, [pc, #40]	@ (800905c <vPortSetupTimerInterrupt+0x40>)
 8009032:	fba2 2303 	umull	r2, r3, r2, r3
 8009036:	099b      	lsrs	r3, r3, #6
 8009038:	4a09      	ldr	r2, [pc, #36]	@ (8009060 <vPortSetupTimerInterrupt+0x44>)
 800903a:	3b01      	subs	r3, #1
 800903c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800903e:	4b04      	ldr	r3, [pc, #16]	@ (8009050 <vPortSetupTimerInterrupt+0x34>)
 8009040:	2207      	movs	r2, #7
 8009042:	601a      	str	r2, [r3, #0]
}
 8009044:	bf00      	nop
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	e000e010 	.word	0xe000e010
 8009054:	e000e018 	.word	0xe000e018
 8009058:	20000004 	.word	0x20000004
 800905c:	10624dd3 	.word	0x10624dd3
 8009060:	e000e014 	.word	0xe000e014

08009064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009064:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009074 <vPortEnableVFP+0x10>
 8009068:	6801      	ldr	r1, [r0, #0]
 800906a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800906e:	6001      	str	r1, [r0, #0]
 8009070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009072:	bf00      	nop
 8009074:	e000ed88 	.word	0xe000ed88

08009078 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800907e:	f3ef 8305 	mrs	r3, IPSR
 8009082:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2b0f      	cmp	r3, #15
 8009088:	d915      	bls.n	80090b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800908a:	4a18      	ldr	r2, [pc, #96]	@ (80090ec <vPortValidateInterruptPriority+0x74>)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	4413      	add	r3, r2
 8009090:	781b      	ldrb	r3, [r3, #0]
 8009092:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009094:	4b16      	ldr	r3, [pc, #88]	@ (80090f0 <vPortValidateInterruptPriority+0x78>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	7afa      	ldrb	r2, [r7, #11]
 800909a:	429a      	cmp	r2, r3
 800909c:	d20b      	bcs.n	80090b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	607b      	str	r3, [r7, #4]
}
 80090b0:	bf00      	nop
 80090b2:	bf00      	nop
 80090b4:	e7fd      	b.n	80090b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80090b6:	4b0f      	ldr	r3, [pc, #60]	@ (80090f4 <vPortValidateInterruptPriority+0x7c>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80090be:	4b0e      	ldr	r3, [pc, #56]	@ (80090f8 <vPortValidateInterruptPriority+0x80>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d90b      	bls.n	80090de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80090c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090ca:	f383 8811 	msr	BASEPRI, r3
 80090ce:	f3bf 8f6f 	isb	sy
 80090d2:	f3bf 8f4f 	dsb	sy
 80090d6:	603b      	str	r3, [r7, #0]
}
 80090d8:	bf00      	nop
 80090da:	bf00      	nop
 80090dc:	e7fd      	b.n	80090da <vPortValidateInterruptPriority+0x62>
	}
 80090de:	bf00      	nop
 80090e0:	3714      	adds	r7, #20
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	e000e3f0 	.word	0xe000e3f0
 80090f0:	20000a2c 	.word	0x20000a2c
 80090f4:	e000ed0c 	.word	0xe000ed0c
 80090f8:	20000a30 	.word	0x20000a30

080090fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b08a      	sub	sp, #40	@ 0x28
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009104:	2300      	movs	r3, #0
 8009106:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009108:	f7fe fdb8 	bl	8007c7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800910c:	4b5a      	ldr	r3, [pc, #360]	@ (8009278 <pvPortMalloc+0x17c>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d101      	bne.n	8009118 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009114:	f000 f916 	bl	8009344 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009118:	4b58      	ldr	r3, [pc, #352]	@ (800927c <pvPortMalloc+0x180>)
 800911a:	681a      	ldr	r2, [r3, #0]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	4013      	ands	r3, r2
 8009120:	2b00      	cmp	r3, #0
 8009122:	f040 8090 	bne.w	8009246 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d01e      	beq.n	800916a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800912c:	2208      	movs	r2, #8
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	4413      	add	r3, r2
 8009132:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f003 0307 	and.w	r3, r3, #7
 800913a:	2b00      	cmp	r3, #0
 800913c:	d015      	beq.n	800916a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f023 0307 	bic.w	r3, r3, #7
 8009144:	3308      	adds	r3, #8
 8009146:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f003 0307 	and.w	r3, r3, #7
 800914e:	2b00      	cmp	r3, #0
 8009150:	d00b      	beq.n	800916a <pvPortMalloc+0x6e>
	__asm volatile
 8009152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	617b      	str	r3, [r7, #20]
}
 8009164:	bf00      	nop
 8009166:	bf00      	nop
 8009168:	e7fd      	b.n	8009166 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d06a      	beq.n	8009246 <pvPortMalloc+0x14a>
 8009170:	4b43      	ldr	r3, [pc, #268]	@ (8009280 <pvPortMalloc+0x184>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	429a      	cmp	r2, r3
 8009178:	d865      	bhi.n	8009246 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800917a:	4b42      	ldr	r3, [pc, #264]	@ (8009284 <pvPortMalloc+0x188>)
 800917c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800917e:	4b41      	ldr	r3, [pc, #260]	@ (8009284 <pvPortMalloc+0x188>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009184:	e004      	b.n	8009190 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009188:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800918a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	429a      	cmp	r2, r3
 8009198:	d903      	bls.n	80091a2 <pvPortMalloc+0xa6>
 800919a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1f1      	bne.n	8009186 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091a2:	4b35      	ldr	r3, [pc, #212]	@ (8009278 <pvPortMalloc+0x17c>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091a8:	429a      	cmp	r2, r3
 80091aa:	d04c      	beq.n	8009246 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80091ac:	6a3b      	ldr	r3, [r7, #32]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2208      	movs	r2, #8
 80091b2:	4413      	add	r3, r2
 80091b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80091b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091b8:	681a      	ldr	r2, [r3, #0]
 80091ba:	6a3b      	ldr	r3, [r7, #32]
 80091bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80091be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c0:	685a      	ldr	r2, [r3, #4]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	1ad2      	subs	r2, r2, r3
 80091c6:	2308      	movs	r3, #8
 80091c8:	005b      	lsls	r3, r3, #1
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d920      	bls.n	8009210 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80091ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4413      	add	r3, r2
 80091d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091d6:	69bb      	ldr	r3, [r7, #24]
 80091d8:	f003 0307 	and.w	r3, r3, #7
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00b      	beq.n	80091f8 <pvPortMalloc+0xfc>
	__asm volatile
 80091e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091e4:	f383 8811 	msr	BASEPRI, r3
 80091e8:	f3bf 8f6f 	isb	sy
 80091ec:	f3bf 8f4f 	dsb	sy
 80091f0:	613b      	str	r3, [r7, #16]
}
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	e7fd      	b.n	80091f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80091f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	1ad2      	subs	r2, r2, r3
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009206:	687a      	ldr	r2, [r7, #4]
 8009208:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800920a:	69b8      	ldr	r0, [r7, #24]
 800920c:	f000 f8fc 	bl	8009408 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009210:	4b1b      	ldr	r3, [pc, #108]	@ (8009280 <pvPortMalloc+0x184>)
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	4a19      	ldr	r2, [pc, #100]	@ (8009280 <pvPortMalloc+0x184>)
 800921c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800921e:	4b18      	ldr	r3, [pc, #96]	@ (8009280 <pvPortMalloc+0x184>)
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	4b19      	ldr	r3, [pc, #100]	@ (8009288 <pvPortMalloc+0x18c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	429a      	cmp	r2, r3
 8009228:	d203      	bcs.n	8009232 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800922a:	4b15      	ldr	r3, [pc, #84]	@ (8009280 <pvPortMalloc+0x184>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	4a16      	ldr	r2, [pc, #88]	@ (8009288 <pvPortMalloc+0x18c>)
 8009230:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009234:	685a      	ldr	r2, [r3, #4]
 8009236:	4b11      	ldr	r3, [pc, #68]	@ (800927c <pvPortMalloc+0x180>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	431a      	orrs	r2, r3
 800923c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009242:	2200      	movs	r2, #0
 8009244:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009246:	f7fe fd27 	bl	8007c98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	f003 0307 	and.w	r3, r3, #7
 8009250:	2b00      	cmp	r3, #0
 8009252:	d00b      	beq.n	800926c <pvPortMalloc+0x170>
	__asm volatile
 8009254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009258:	f383 8811 	msr	BASEPRI, r3
 800925c:	f3bf 8f6f 	isb	sy
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	60fb      	str	r3, [r7, #12]
}
 8009266:	bf00      	nop
 8009268:	bf00      	nop
 800926a:	e7fd      	b.n	8009268 <pvPortMalloc+0x16c>
	return pvReturn;
 800926c:	69fb      	ldr	r3, [r7, #28]
}
 800926e:	4618      	mov	r0, r3
 8009270:	3728      	adds	r7, #40	@ 0x28
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
 8009276:	bf00      	nop
 8009278:	2001363c 	.word	0x2001363c
 800927c:	20013648 	.word	0x20013648
 8009280:	20013640 	.word	0x20013640
 8009284:	20013634 	.word	0x20013634
 8009288:	20013644 	.word	0x20013644

0800928c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b086      	sub	sp, #24
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d04a      	beq.n	8009334 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800929e:	2308      	movs	r3, #8
 80092a0:	425b      	negs	r3, r3
 80092a2:	697a      	ldr	r2, [r7, #20]
 80092a4:	4413      	add	r3, r2
 80092a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092a8:	697b      	ldr	r3, [r7, #20]
 80092aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092ac:	693b      	ldr	r3, [r7, #16]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	4b22      	ldr	r3, [pc, #136]	@ (800933c <vPortFree+0xb0>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	4013      	ands	r3, r2
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10b      	bne.n	80092d2 <vPortFree+0x46>
	__asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	60fb      	str	r3, [r7, #12]
}
 80092cc:	bf00      	nop
 80092ce:	bf00      	nop
 80092d0:	e7fd      	b.n	80092ce <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d00b      	beq.n	80092f2 <vPortFree+0x66>
	__asm volatile
 80092da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092de:	f383 8811 	msr	BASEPRI, r3
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	f3bf 8f4f 	dsb	sy
 80092ea:	60bb      	str	r3, [r7, #8]
}
 80092ec:	bf00      	nop
 80092ee:	bf00      	nop
 80092f0:	e7fd      	b.n	80092ee <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	4b11      	ldr	r3, [pc, #68]	@ (800933c <vPortFree+0xb0>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4013      	ands	r3, r2
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d019      	beq.n	8009334 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d115      	bne.n	8009334 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	685a      	ldr	r2, [r3, #4]
 800930c:	4b0b      	ldr	r3, [pc, #44]	@ (800933c <vPortFree+0xb0>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	43db      	mvns	r3, r3
 8009312:	401a      	ands	r2, r3
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009318:	f7fe fcb0 	bl	8007c7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	685a      	ldr	r2, [r3, #4]
 8009320:	4b07      	ldr	r3, [pc, #28]	@ (8009340 <vPortFree+0xb4>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4413      	add	r3, r2
 8009326:	4a06      	ldr	r2, [pc, #24]	@ (8009340 <vPortFree+0xb4>)
 8009328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800932a:	6938      	ldr	r0, [r7, #16]
 800932c:	f000 f86c 	bl	8009408 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009330:	f7fe fcb2 	bl	8007c98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009334:	bf00      	nop
 8009336:	3718      	adds	r7, #24
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20013648 	.word	0x20013648
 8009340:	20013640 	.word	0x20013640

08009344 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800934a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800934e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009350:	4b27      	ldr	r3, [pc, #156]	@ (80093f0 <prvHeapInit+0xac>)
 8009352:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	f003 0307 	and.w	r3, r3, #7
 800935a:	2b00      	cmp	r3, #0
 800935c:	d00c      	beq.n	8009378 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	3307      	adds	r3, #7
 8009362:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f023 0307 	bic.w	r3, r3, #7
 800936a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	1ad3      	subs	r3, r2, r3
 8009372:	4a1f      	ldr	r2, [pc, #124]	@ (80093f0 <prvHeapInit+0xac>)
 8009374:	4413      	add	r3, r2
 8009376:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800937c:	4a1d      	ldr	r2, [pc, #116]	@ (80093f4 <prvHeapInit+0xb0>)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009382:	4b1c      	ldr	r3, [pc, #112]	@ (80093f4 <prvHeapInit+0xb0>)
 8009384:	2200      	movs	r2, #0
 8009386:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	4413      	add	r3, r2
 800938e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009390:	2208      	movs	r2, #8
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	1a9b      	subs	r3, r3, r2
 8009396:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0307 	bic.w	r3, r3, #7
 800939e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4a15      	ldr	r2, [pc, #84]	@ (80093f8 <prvHeapInit+0xb4>)
 80093a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80093a6:	4b14      	ldr	r3, [pc, #80]	@ (80093f8 <prvHeapInit+0xb4>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2200      	movs	r2, #0
 80093ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093ae:	4b12      	ldr	r3, [pc, #72]	@ (80093f8 <prvHeapInit+0xb4>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	1ad2      	subs	r2, r2, r3
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093c4:	4b0c      	ldr	r3, [pc, #48]	@ (80093f8 <prvHeapInit+0xb4>)
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	4a0a      	ldr	r2, [pc, #40]	@ (80093fc <prvHeapInit+0xb8>)
 80093d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	4a09      	ldr	r2, [pc, #36]	@ (8009400 <prvHeapInit+0xbc>)
 80093da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093dc:	4b09      	ldr	r3, [pc, #36]	@ (8009404 <prvHeapInit+0xc0>)
 80093de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80093e2:	601a      	str	r2, [r3, #0]
}
 80093e4:	bf00      	nop
 80093e6:	3714      	adds	r7, #20
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	20000a34 	.word	0x20000a34
 80093f4:	20013634 	.word	0x20013634
 80093f8:	2001363c 	.word	0x2001363c
 80093fc:	20013644 	.word	0x20013644
 8009400:	20013640 	.word	0x20013640
 8009404:	20013648 	.word	0x20013648

08009408 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009410:	4b28      	ldr	r3, [pc, #160]	@ (80094b4 <prvInsertBlockIntoFreeList+0xac>)
 8009412:	60fb      	str	r3, [r7, #12]
 8009414:	e002      	b.n	800941c <prvInsertBlockIntoFreeList+0x14>
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	60fb      	str	r3, [r7, #12]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	429a      	cmp	r2, r3
 8009424:	d8f7      	bhi.n	8009416 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	4413      	add	r3, r2
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	429a      	cmp	r2, r3
 8009436:	d108      	bne.n	800944a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	441a      	add	r2, r3
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	441a      	add	r2, r3
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	429a      	cmp	r2, r3
 800945c:	d118      	bne.n	8009490 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681a      	ldr	r2, [r3, #0]
 8009462:	4b15      	ldr	r3, [pc, #84]	@ (80094b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	429a      	cmp	r2, r3
 8009468:	d00d      	beq.n	8009486 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685a      	ldr	r2, [r3, #4]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	685b      	ldr	r3, [r3, #4]
 8009474:	441a      	add	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	681a      	ldr	r2, [r3, #0]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	601a      	str	r2, [r3, #0]
 8009484:	e008      	b.n	8009498 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009486:	4b0c      	ldr	r3, [pc, #48]	@ (80094b8 <prvInsertBlockIntoFreeList+0xb0>)
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	601a      	str	r2, [r3, #0]
 800948e:	e003      	b.n	8009498 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	429a      	cmp	r2, r3
 800949e:	d002      	beq.n	80094a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	687a      	ldr	r2, [r7, #4]
 80094a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094a6:	bf00      	nop
 80094a8:	3714      	adds	r7, #20
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	20013634 	.word	0x20013634
 80094b8:	2001363c 	.word	0x2001363c

080094bc <_scanf_float>:
 80094bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c0:	b087      	sub	sp, #28
 80094c2:	4617      	mov	r7, r2
 80094c4:	9303      	str	r3, [sp, #12]
 80094c6:	688b      	ldr	r3, [r1, #8]
 80094c8:	1e5a      	subs	r2, r3, #1
 80094ca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80094ce:	bf81      	itttt	hi
 80094d0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80094d4:	eb03 0b05 	addhi.w	fp, r3, r5
 80094d8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80094dc:	608b      	strhi	r3, [r1, #8]
 80094de:	680b      	ldr	r3, [r1, #0]
 80094e0:	460a      	mov	r2, r1
 80094e2:	f04f 0500 	mov.w	r5, #0
 80094e6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80094ea:	f842 3b1c 	str.w	r3, [r2], #28
 80094ee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80094f2:	4680      	mov	r8, r0
 80094f4:	460c      	mov	r4, r1
 80094f6:	bf98      	it	ls
 80094f8:	f04f 0b00 	movls.w	fp, #0
 80094fc:	9201      	str	r2, [sp, #4]
 80094fe:	4616      	mov	r6, r2
 8009500:	46aa      	mov	sl, r5
 8009502:	46a9      	mov	r9, r5
 8009504:	9502      	str	r5, [sp, #8]
 8009506:	68a2      	ldr	r2, [r4, #8]
 8009508:	b152      	cbz	r2, 8009520 <_scanf_float+0x64>
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	2b4e      	cmp	r3, #78	@ 0x4e
 8009510:	d864      	bhi.n	80095dc <_scanf_float+0x120>
 8009512:	2b40      	cmp	r3, #64	@ 0x40
 8009514:	d83c      	bhi.n	8009590 <_scanf_float+0xd4>
 8009516:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800951a:	b2c8      	uxtb	r0, r1
 800951c:	280e      	cmp	r0, #14
 800951e:	d93a      	bls.n	8009596 <_scanf_float+0xda>
 8009520:	f1b9 0f00 	cmp.w	r9, #0
 8009524:	d003      	beq.n	800952e <_scanf_float+0x72>
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800952c:	6023      	str	r3, [r4, #0]
 800952e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009532:	f1ba 0f01 	cmp.w	sl, #1
 8009536:	f200 8117 	bhi.w	8009768 <_scanf_float+0x2ac>
 800953a:	9b01      	ldr	r3, [sp, #4]
 800953c:	429e      	cmp	r6, r3
 800953e:	f200 8108 	bhi.w	8009752 <_scanf_float+0x296>
 8009542:	2001      	movs	r0, #1
 8009544:	b007      	add	sp, #28
 8009546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800954e:	2a0d      	cmp	r2, #13
 8009550:	d8e6      	bhi.n	8009520 <_scanf_float+0x64>
 8009552:	a101      	add	r1, pc, #4	@ (adr r1, 8009558 <_scanf_float+0x9c>)
 8009554:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009558:	0800969f 	.word	0x0800969f
 800955c:	08009521 	.word	0x08009521
 8009560:	08009521 	.word	0x08009521
 8009564:	08009521 	.word	0x08009521
 8009568:	080096ff 	.word	0x080096ff
 800956c:	080096d7 	.word	0x080096d7
 8009570:	08009521 	.word	0x08009521
 8009574:	08009521 	.word	0x08009521
 8009578:	080096ad 	.word	0x080096ad
 800957c:	08009521 	.word	0x08009521
 8009580:	08009521 	.word	0x08009521
 8009584:	08009521 	.word	0x08009521
 8009588:	08009521 	.word	0x08009521
 800958c:	08009665 	.word	0x08009665
 8009590:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8009594:	e7db      	b.n	800954e <_scanf_float+0x92>
 8009596:	290e      	cmp	r1, #14
 8009598:	d8c2      	bhi.n	8009520 <_scanf_float+0x64>
 800959a:	a001      	add	r0, pc, #4	@ (adr r0, 80095a0 <_scanf_float+0xe4>)
 800959c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80095a0:	08009655 	.word	0x08009655
 80095a4:	08009521 	.word	0x08009521
 80095a8:	08009655 	.word	0x08009655
 80095ac:	080096eb 	.word	0x080096eb
 80095b0:	08009521 	.word	0x08009521
 80095b4:	080095fd 	.word	0x080095fd
 80095b8:	0800963b 	.word	0x0800963b
 80095bc:	0800963b 	.word	0x0800963b
 80095c0:	0800963b 	.word	0x0800963b
 80095c4:	0800963b 	.word	0x0800963b
 80095c8:	0800963b 	.word	0x0800963b
 80095cc:	0800963b 	.word	0x0800963b
 80095d0:	0800963b 	.word	0x0800963b
 80095d4:	0800963b 	.word	0x0800963b
 80095d8:	0800963b 	.word	0x0800963b
 80095dc:	2b6e      	cmp	r3, #110	@ 0x6e
 80095de:	d809      	bhi.n	80095f4 <_scanf_float+0x138>
 80095e0:	2b60      	cmp	r3, #96	@ 0x60
 80095e2:	d8b2      	bhi.n	800954a <_scanf_float+0x8e>
 80095e4:	2b54      	cmp	r3, #84	@ 0x54
 80095e6:	d07b      	beq.n	80096e0 <_scanf_float+0x224>
 80095e8:	2b59      	cmp	r3, #89	@ 0x59
 80095ea:	d199      	bne.n	8009520 <_scanf_float+0x64>
 80095ec:	2d07      	cmp	r5, #7
 80095ee:	d197      	bne.n	8009520 <_scanf_float+0x64>
 80095f0:	2508      	movs	r5, #8
 80095f2:	e02c      	b.n	800964e <_scanf_float+0x192>
 80095f4:	2b74      	cmp	r3, #116	@ 0x74
 80095f6:	d073      	beq.n	80096e0 <_scanf_float+0x224>
 80095f8:	2b79      	cmp	r3, #121	@ 0x79
 80095fa:	e7f6      	b.n	80095ea <_scanf_float+0x12e>
 80095fc:	6821      	ldr	r1, [r4, #0]
 80095fe:	05c8      	lsls	r0, r1, #23
 8009600:	d51b      	bpl.n	800963a <_scanf_float+0x17e>
 8009602:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009606:	6021      	str	r1, [r4, #0]
 8009608:	f109 0901 	add.w	r9, r9, #1
 800960c:	f1bb 0f00 	cmp.w	fp, #0
 8009610:	d003      	beq.n	800961a <_scanf_float+0x15e>
 8009612:	3201      	adds	r2, #1
 8009614:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009618:	60a2      	str	r2, [r4, #8]
 800961a:	68a3      	ldr	r3, [r4, #8]
 800961c:	3b01      	subs	r3, #1
 800961e:	60a3      	str	r3, [r4, #8]
 8009620:	6923      	ldr	r3, [r4, #16]
 8009622:	3301      	adds	r3, #1
 8009624:	6123      	str	r3, [r4, #16]
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	3b01      	subs	r3, #1
 800962a:	2b00      	cmp	r3, #0
 800962c:	607b      	str	r3, [r7, #4]
 800962e:	f340 8087 	ble.w	8009740 <_scanf_float+0x284>
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	3301      	adds	r3, #1
 8009636:	603b      	str	r3, [r7, #0]
 8009638:	e765      	b.n	8009506 <_scanf_float+0x4a>
 800963a:	eb1a 0105 	adds.w	r1, sl, r5
 800963e:	f47f af6f 	bne.w	8009520 <_scanf_float+0x64>
 8009642:	6822      	ldr	r2, [r4, #0]
 8009644:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009648:	6022      	str	r2, [r4, #0]
 800964a:	460d      	mov	r5, r1
 800964c:	468a      	mov	sl, r1
 800964e:	f806 3b01 	strb.w	r3, [r6], #1
 8009652:	e7e2      	b.n	800961a <_scanf_float+0x15e>
 8009654:	6822      	ldr	r2, [r4, #0]
 8009656:	0610      	lsls	r0, r2, #24
 8009658:	f57f af62 	bpl.w	8009520 <_scanf_float+0x64>
 800965c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009660:	6022      	str	r2, [r4, #0]
 8009662:	e7f4      	b.n	800964e <_scanf_float+0x192>
 8009664:	f1ba 0f00 	cmp.w	sl, #0
 8009668:	d10e      	bne.n	8009688 <_scanf_float+0x1cc>
 800966a:	f1b9 0f00 	cmp.w	r9, #0
 800966e:	d10e      	bne.n	800968e <_scanf_float+0x1d2>
 8009670:	6822      	ldr	r2, [r4, #0]
 8009672:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009676:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800967a:	d108      	bne.n	800968e <_scanf_float+0x1d2>
 800967c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009680:	6022      	str	r2, [r4, #0]
 8009682:	f04f 0a01 	mov.w	sl, #1
 8009686:	e7e2      	b.n	800964e <_scanf_float+0x192>
 8009688:	f1ba 0f02 	cmp.w	sl, #2
 800968c:	d055      	beq.n	800973a <_scanf_float+0x27e>
 800968e:	2d01      	cmp	r5, #1
 8009690:	d002      	beq.n	8009698 <_scanf_float+0x1dc>
 8009692:	2d04      	cmp	r5, #4
 8009694:	f47f af44 	bne.w	8009520 <_scanf_float+0x64>
 8009698:	3501      	adds	r5, #1
 800969a:	b2ed      	uxtb	r5, r5
 800969c:	e7d7      	b.n	800964e <_scanf_float+0x192>
 800969e:	f1ba 0f01 	cmp.w	sl, #1
 80096a2:	f47f af3d 	bne.w	8009520 <_scanf_float+0x64>
 80096a6:	f04f 0a02 	mov.w	sl, #2
 80096aa:	e7d0      	b.n	800964e <_scanf_float+0x192>
 80096ac:	b97d      	cbnz	r5, 80096ce <_scanf_float+0x212>
 80096ae:	f1b9 0f00 	cmp.w	r9, #0
 80096b2:	f47f af38 	bne.w	8009526 <_scanf_float+0x6a>
 80096b6:	6822      	ldr	r2, [r4, #0]
 80096b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80096bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80096c0:	f040 8108 	bne.w	80098d4 <_scanf_float+0x418>
 80096c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80096c8:	6022      	str	r2, [r4, #0]
 80096ca:	2501      	movs	r5, #1
 80096cc:	e7bf      	b.n	800964e <_scanf_float+0x192>
 80096ce:	2d03      	cmp	r5, #3
 80096d0:	d0e2      	beq.n	8009698 <_scanf_float+0x1dc>
 80096d2:	2d05      	cmp	r5, #5
 80096d4:	e7de      	b.n	8009694 <_scanf_float+0x1d8>
 80096d6:	2d02      	cmp	r5, #2
 80096d8:	f47f af22 	bne.w	8009520 <_scanf_float+0x64>
 80096dc:	2503      	movs	r5, #3
 80096de:	e7b6      	b.n	800964e <_scanf_float+0x192>
 80096e0:	2d06      	cmp	r5, #6
 80096e2:	f47f af1d 	bne.w	8009520 <_scanf_float+0x64>
 80096e6:	2507      	movs	r5, #7
 80096e8:	e7b1      	b.n	800964e <_scanf_float+0x192>
 80096ea:	6822      	ldr	r2, [r4, #0]
 80096ec:	0591      	lsls	r1, r2, #22
 80096ee:	f57f af17 	bpl.w	8009520 <_scanf_float+0x64>
 80096f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80096f6:	6022      	str	r2, [r4, #0]
 80096f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80096fc:	e7a7      	b.n	800964e <_scanf_float+0x192>
 80096fe:	6822      	ldr	r2, [r4, #0]
 8009700:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009704:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009708:	d006      	beq.n	8009718 <_scanf_float+0x25c>
 800970a:	0550      	lsls	r0, r2, #21
 800970c:	f57f af08 	bpl.w	8009520 <_scanf_float+0x64>
 8009710:	f1b9 0f00 	cmp.w	r9, #0
 8009714:	f000 80de 	beq.w	80098d4 <_scanf_float+0x418>
 8009718:	0591      	lsls	r1, r2, #22
 800971a:	bf58      	it	pl
 800971c:	9902      	ldrpl	r1, [sp, #8]
 800971e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8009722:	bf58      	it	pl
 8009724:	eba9 0101 	subpl.w	r1, r9, r1
 8009728:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800972c:	bf58      	it	pl
 800972e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009732:	6022      	str	r2, [r4, #0]
 8009734:	f04f 0900 	mov.w	r9, #0
 8009738:	e789      	b.n	800964e <_scanf_float+0x192>
 800973a:	f04f 0a03 	mov.w	sl, #3
 800973e:	e786      	b.n	800964e <_scanf_float+0x192>
 8009740:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009744:	4639      	mov	r1, r7
 8009746:	4640      	mov	r0, r8
 8009748:	4798      	blx	r3
 800974a:	2800      	cmp	r0, #0
 800974c:	f43f aedb 	beq.w	8009506 <_scanf_float+0x4a>
 8009750:	e6e6      	b.n	8009520 <_scanf_float+0x64>
 8009752:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009756:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800975a:	463a      	mov	r2, r7
 800975c:	4640      	mov	r0, r8
 800975e:	4798      	blx	r3
 8009760:	6923      	ldr	r3, [r4, #16]
 8009762:	3b01      	subs	r3, #1
 8009764:	6123      	str	r3, [r4, #16]
 8009766:	e6e8      	b.n	800953a <_scanf_float+0x7e>
 8009768:	1e6b      	subs	r3, r5, #1
 800976a:	2b06      	cmp	r3, #6
 800976c:	d824      	bhi.n	80097b8 <_scanf_float+0x2fc>
 800976e:	2d02      	cmp	r5, #2
 8009770:	d836      	bhi.n	80097e0 <_scanf_float+0x324>
 8009772:	9b01      	ldr	r3, [sp, #4]
 8009774:	429e      	cmp	r6, r3
 8009776:	f67f aee4 	bls.w	8009542 <_scanf_float+0x86>
 800977a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800977e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009782:	463a      	mov	r2, r7
 8009784:	4640      	mov	r0, r8
 8009786:	4798      	blx	r3
 8009788:	6923      	ldr	r3, [r4, #16]
 800978a:	3b01      	subs	r3, #1
 800978c:	6123      	str	r3, [r4, #16]
 800978e:	e7f0      	b.n	8009772 <_scanf_float+0x2b6>
 8009790:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009794:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009798:	463a      	mov	r2, r7
 800979a:	4640      	mov	r0, r8
 800979c:	4798      	blx	r3
 800979e:	6923      	ldr	r3, [r4, #16]
 80097a0:	3b01      	subs	r3, #1
 80097a2:	6123      	str	r3, [r4, #16]
 80097a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097a8:	fa5f fa8a 	uxtb.w	sl, sl
 80097ac:	f1ba 0f02 	cmp.w	sl, #2
 80097b0:	d1ee      	bne.n	8009790 <_scanf_float+0x2d4>
 80097b2:	3d03      	subs	r5, #3
 80097b4:	b2ed      	uxtb	r5, r5
 80097b6:	1b76      	subs	r6, r6, r5
 80097b8:	6823      	ldr	r3, [r4, #0]
 80097ba:	05da      	lsls	r2, r3, #23
 80097bc:	d530      	bpl.n	8009820 <_scanf_float+0x364>
 80097be:	055b      	lsls	r3, r3, #21
 80097c0:	d511      	bpl.n	80097e6 <_scanf_float+0x32a>
 80097c2:	9b01      	ldr	r3, [sp, #4]
 80097c4:	429e      	cmp	r6, r3
 80097c6:	f67f aebc 	bls.w	8009542 <_scanf_float+0x86>
 80097ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80097ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80097d2:	463a      	mov	r2, r7
 80097d4:	4640      	mov	r0, r8
 80097d6:	4798      	blx	r3
 80097d8:	6923      	ldr	r3, [r4, #16]
 80097da:	3b01      	subs	r3, #1
 80097dc:	6123      	str	r3, [r4, #16]
 80097de:	e7f0      	b.n	80097c2 <_scanf_float+0x306>
 80097e0:	46aa      	mov	sl, r5
 80097e2:	46b3      	mov	fp, r6
 80097e4:	e7de      	b.n	80097a4 <_scanf_float+0x2e8>
 80097e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80097ea:	6923      	ldr	r3, [r4, #16]
 80097ec:	2965      	cmp	r1, #101	@ 0x65
 80097ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80097f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80097f6:	6123      	str	r3, [r4, #16]
 80097f8:	d00c      	beq.n	8009814 <_scanf_float+0x358>
 80097fa:	2945      	cmp	r1, #69	@ 0x45
 80097fc:	d00a      	beq.n	8009814 <_scanf_float+0x358>
 80097fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009802:	463a      	mov	r2, r7
 8009804:	4640      	mov	r0, r8
 8009806:	4798      	blx	r3
 8009808:	6923      	ldr	r3, [r4, #16]
 800980a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800980e:	3b01      	subs	r3, #1
 8009810:	1eb5      	subs	r5, r6, #2
 8009812:	6123      	str	r3, [r4, #16]
 8009814:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009818:	463a      	mov	r2, r7
 800981a:	4640      	mov	r0, r8
 800981c:	4798      	blx	r3
 800981e:	462e      	mov	r6, r5
 8009820:	6822      	ldr	r2, [r4, #0]
 8009822:	f012 0210 	ands.w	r2, r2, #16
 8009826:	d001      	beq.n	800982c <_scanf_float+0x370>
 8009828:	2000      	movs	r0, #0
 800982a:	e68b      	b.n	8009544 <_scanf_float+0x88>
 800982c:	7032      	strb	r2, [r6, #0]
 800982e:	6823      	ldr	r3, [r4, #0]
 8009830:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009834:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009838:	d11c      	bne.n	8009874 <_scanf_float+0x3b8>
 800983a:	9b02      	ldr	r3, [sp, #8]
 800983c:	454b      	cmp	r3, r9
 800983e:	eba3 0209 	sub.w	r2, r3, r9
 8009842:	d123      	bne.n	800988c <_scanf_float+0x3d0>
 8009844:	9901      	ldr	r1, [sp, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	4640      	mov	r0, r8
 800984a:	f001 f99d 	bl	800ab88 <_strtod_r>
 800984e:	9b03      	ldr	r3, [sp, #12]
 8009850:	6821      	ldr	r1, [r4, #0]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	f011 0f02 	tst.w	r1, #2
 8009858:	ec57 6b10 	vmov	r6, r7, d0
 800985c:	f103 0204 	add.w	r2, r3, #4
 8009860:	d01f      	beq.n	80098a2 <_scanf_float+0x3e6>
 8009862:	9903      	ldr	r1, [sp, #12]
 8009864:	600a      	str	r2, [r1, #0]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	e9c3 6700 	strd	r6, r7, [r3]
 800986c:	68e3      	ldr	r3, [r4, #12]
 800986e:	3301      	adds	r3, #1
 8009870:	60e3      	str	r3, [r4, #12]
 8009872:	e7d9      	b.n	8009828 <_scanf_float+0x36c>
 8009874:	9b04      	ldr	r3, [sp, #16]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d0e4      	beq.n	8009844 <_scanf_float+0x388>
 800987a:	9905      	ldr	r1, [sp, #20]
 800987c:	230a      	movs	r3, #10
 800987e:	3101      	adds	r1, #1
 8009880:	4640      	mov	r0, r8
 8009882:	f001 fa01 	bl	800ac88 <_strtol_r>
 8009886:	9b04      	ldr	r3, [sp, #16]
 8009888:	9e05      	ldr	r6, [sp, #20]
 800988a:	1ac2      	subs	r2, r0, r3
 800988c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8009890:	429e      	cmp	r6, r3
 8009892:	bf28      	it	cs
 8009894:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009898:	4910      	ldr	r1, [pc, #64]	@ (80098dc <_scanf_float+0x420>)
 800989a:	4630      	mov	r0, r6
 800989c:	f000 f8e4 	bl	8009a68 <siprintf>
 80098a0:	e7d0      	b.n	8009844 <_scanf_float+0x388>
 80098a2:	f011 0f04 	tst.w	r1, #4
 80098a6:	9903      	ldr	r1, [sp, #12]
 80098a8:	600a      	str	r2, [r1, #0]
 80098aa:	d1dc      	bne.n	8009866 <_scanf_float+0x3aa>
 80098ac:	681d      	ldr	r5, [r3, #0]
 80098ae:	4632      	mov	r2, r6
 80098b0:	463b      	mov	r3, r7
 80098b2:	4630      	mov	r0, r6
 80098b4:	4639      	mov	r1, r7
 80098b6:	f7f7 f939 	bl	8000b2c <__aeabi_dcmpun>
 80098ba:	b128      	cbz	r0, 80098c8 <_scanf_float+0x40c>
 80098bc:	4808      	ldr	r0, [pc, #32]	@ (80098e0 <_scanf_float+0x424>)
 80098be:	f000 fa63 	bl	8009d88 <nanf>
 80098c2:	ed85 0a00 	vstr	s0, [r5]
 80098c6:	e7d1      	b.n	800986c <_scanf_float+0x3b0>
 80098c8:	4630      	mov	r0, r6
 80098ca:	4639      	mov	r1, r7
 80098cc:	f7f7 f964 	bl	8000b98 <__aeabi_d2f>
 80098d0:	6028      	str	r0, [r5, #0]
 80098d2:	e7cb      	b.n	800986c <_scanf_float+0x3b0>
 80098d4:	f04f 0900 	mov.w	r9, #0
 80098d8:	e629      	b.n	800952e <_scanf_float+0x72>
 80098da:	bf00      	nop
 80098dc:	0800dc48 	.word	0x0800dc48
 80098e0:	0800e023 	.word	0x0800e023

080098e4 <std>:
 80098e4:	2300      	movs	r3, #0
 80098e6:	b510      	push	{r4, lr}
 80098e8:	4604      	mov	r4, r0
 80098ea:	e9c0 3300 	strd	r3, r3, [r0]
 80098ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80098f2:	6083      	str	r3, [r0, #8]
 80098f4:	8181      	strh	r1, [r0, #12]
 80098f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80098f8:	81c2      	strh	r2, [r0, #14]
 80098fa:	6183      	str	r3, [r0, #24]
 80098fc:	4619      	mov	r1, r3
 80098fe:	2208      	movs	r2, #8
 8009900:	305c      	adds	r0, #92	@ 0x5c
 8009902:	f000 f993 	bl	8009c2c <memset>
 8009906:	4b0d      	ldr	r3, [pc, #52]	@ (800993c <std+0x58>)
 8009908:	6263      	str	r3, [r4, #36]	@ 0x24
 800990a:	4b0d      	ldr	r3, [pc, #52]	@ (8009940 <std+0x5c>)
 800990c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800990e:	4b0d      	ldr	r3, [pc, #52]	@ (8009944 <std+0x60>)
 8009910:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009912:	4b0d      	ldr	r3, [pc, #52]	@ (8009948 <std+0x64>)
 8009914:	6323      	str	r3, [r4, #48]	@ 0x30
 8009916:	4b0d      	ldr	r3, [pc, #52]	@ (800994c <std+0x68>)
 8009918:	6224      	str	r4, [r4, #32]
 800991a:	429c      	cmp	r4, r3
 800991c:	d006      	beq.n	800992c <std+0x48>
 800991e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009922:	4294      	cmp	r4, r2
 8009924:	d002      	beq.n	800992c <std+0x48>
 8009926:	33d0      	adds	r3, #208	@ 0xd0
 8009928:	429c      	cmp	r4, r3
 800992a:	d105      	bne.n	8009938 <std+0x54>
 800992c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009934:	f000 ba16 	b.w	8009d64 <__retarget_lock_init_recursive>
 8009938:	bd10      	pop	{r4, pc}
 800993a:	bf00      	nop
 800993c:	08009afd 	.word	0x08009afd
 8009940:	08009b23 	.word	0x08009b23
 8009944:	08009b5b 	.word	0x08009b5b
 8009948:	08009b7f 	.word	0x08009b7f
 800994c:	2001364c 	.word	0x2001364c

08009950 <stdio_exit_handler>:
 8009950:	4a02      	ldr	r2, [pc, #8]	@ (800995c <stdio_exit_handler+0xc>)
 8009952:	4903      	ldr	r1, [pc, #12]	@ (8009960 <stdio_exit_handler+0x10>)
 8009954:	4803      	ldr	r0, [pc, #12]	@ (8009964 <stdio_exit_handler+0x14>)
 8009956:	f000 b869 	b.w	8009a2c <_fwalk_sglue>
 800995a:	bf00      	nop
 800995c:	20000014 	.word	0x20000014
 8009960:	0800b995 	.word	0x0800b995
 8009964:	20000024 	.word	0x20000024

08009968 <cleanup_stdio>:
 8009968:	6841      	ldr	r1, [r0, #4]
 800996a:	4b0c      	ldr	r3, [pc, #48]	@ (800999c <cleanup_stdio+0x34>)
 800996c:	4299      	cmp	r1, r3
 800996e:	b510      	push	{r4, lr}
 8009970:	4604      	mov	r4, r0
 8009972:	d001      	beq.n	8009978 <cleanup_stdio+0x10>
 8009974:	f002 f80e 	bl	800b994 <_fflush_r>
 8009978:	68a1      	ldr	r1, [r4, #8]
 800997a:	4b09      	ldr	r3, [pc, #36]	@ (80099a0 <cleanup_stdio+0x38>)
 800997c:	4299      	cmp	r1, r3
 800997e:	d002      	beq.n	8009986 <cleanup_stdio+0x1e>
 8009980:	4620      	mov	r0, r4
 8009982:	f002 f807 	bl	800b994 <_fflush_r>
 8009986:	68e1      	ldr	r1, [r4, #12]
 8009988:	4b06      	ldr	r3, [pc, #24]	@ (80099a4 <cleanup_stdio+0x3c>)
 800998a:	4299      	cmp	r1, r3
 800998c:	d004      	beq.n	8009998 <cleanup_stdio+0x30>
 800998e:	4620      	mov	r0, r4
 8009990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009994:	f001 bffe 	b.w	800b994 <_fflush_r>
 8009998:	bd10      	pop	{r4, pc}
 800999a:	bf00      	nop
 800999c:	2001364c 	.word	0x2001364c
 80099a0:	200136b4 	.word	0x200136b4
 80099a4:	2001371c 	.word	0x2001371c

080099a8 <global_stdio_init.part.0>:
 80099a8:	b510      	push	{r4, lr}
 80099aa:	4b0b      	ldr	r3, [pc, #44]	@ (80099d8 <global_stdio_init.part.0+0x30>)
 80099ac:	4c0b      	ldr	r4, [pc, #44]	@ (80099dc <global_stdio_init.part.0+0x34>)
 80099ae:	4a0c      	ldr	r2, [pc, #48]	@ (80099e0 <global_stdio_init.part.0+0x38>)
 80099b0:	601a      	str	r2, [r3, #0]
 80099b2:	4620      	mov	r0, r4
 80099b4:	2200      	movs	r2, #0
 80099b6:	2104      	movs	r1, #4
 80099b8:	f7ff ff94 	bl	80098e4 <std>
 80099bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80099c0:	2201      	movs	r2, #1
 80099c2:	2109      	movs	r1, #9
 80099c4:	f7ff ff8e 	bl	80098e4 <std>
 80099c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80099cc:	2202      	movs	r2, #2
 80099ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099d2:	2112      	movs	r1, #18
 80099d4:	f7ff bf86 	b.w	80098e4 <std>
 80099d8:	20013784 	.word	0x20013784
 80099dc:	2001364c 	.word	0x2001364c
 80099e0:	08009951 	.word	0x08009951

080099e4 <__sfp_lock_acquire>:
 80099e4:	4801      	ldr	r0, [pc, #4]	@ (80099ec <__sfp_lock_acquire+0x8>)
 80099e6:	f000 b9be 	b.w	8009d66 <__retarget_lock_acquire_recursive>
 80099ea:	bf00      	nop
 80099ec:	2001378d 	.word	0x2001378d

080099f0 <__sfp_lock_release>:
 80099f0:	4801      	ldr	r0, [pc, #4]	@ (80099f8 <__sfp_lock_release+0x8>)
 80099f2:	f000 b9b9 	b.w	8009d68 <__retarget_lock_release_recursive>
 80099f6:	bf00      	nop
 80099f8:	2001378d 	.word	0x2001378d

080099fc <__sinit>:
 80099fc:	b510      	push	{r4, lr}
 80099fe:	4604      	mov	r4, r0
 8009a00:	f7ff fff0 	bl	80099e4 <__sfp_lock_acquire>
 8009a04:	6a23      	ldr	r3, [r4, #32]
 8009a06:	b11b      	cbz	r3, 8009a10 <__sinit+0x14>
 8009a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a0c:	f7ff bff0 	b.w	80099f0 <__sfp_lock_release>
 8009a10:	4b04      	ldr	r3, [pc, #16]	@ (8009a24 <__sinit+0x28>)
 8009a12:	6223      	str	r3, [r4, #32]
 8009a14:	4b04      	ldr	r3, [pc, #16]	@ (8009a28 <__sinit+0x2c>)
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d1f5      	bne.n	8009a08 <__sinit+0xc>
 8009a1c:	f7ff ffc4 	bl	80099a8 <global_stdio_init.part.0>
 8009a20:	e7f2      	b.n	8009a08 <__sinit+0xc>
 8009a22:	bf00      	nop
 8009a24:	08009969 	.word	0x08009969
 8009a28:	20013784 	.word	0x20013784

08009a2c <_fwalk_sglue>:
 8009a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a30:	4607      	mov	r7, r0
 8009a32:	4688      	mov	r8, r1
 8009a34:	4614      	mov	r4, r2
 8009a36:	2600      	movs	r6, #0
 8009a38:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009a3c:	f1b9 0901 	subs.w	r9, r9, #1
 8009a40:	d505      	bpl.n	8009a4e <_fwalk_sglue+0x22>
 8009a42:	6824      	ldr	r4, [r4, #0]
 8009a44:	2c00      	cmp	r4, #0
 8009a46:	d1f7      	bne.n	8009a38 <_fwalk_sglue+0xc>
 8009a48:	4630      	mov	r0, r6
 8009a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a4e:	89ab      	ldrh	r3, [r5, #12]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d907      	bls.n	8009a64 <_fwalk_sglue+0x38>
 8009a54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009a58:	3301      	adds	r3, #1
 8009a5a:	d003      	beq.n	8009a64 <_fwalk_sglue+0x38>
 8009a5c:	4629      	mov	r1, r5
 8009a5e:	4638      	mov	r0, r7
 8009a60:	47c0      	blx	r8
 8009a62:	4306      	orrs	r6, r0
 8009a64:	3568      	adds	r5, #104	@ 0x68
 8009a66:	e7e9      	b.n	8009a3c <_fwalk_sglue+0x10>

08009a68 <siprintf>:
 8009a68:	b40e      	push	{r1, r2, r3}
 8009a6a:	b500      	push	{lr}
 8009a6c:	b09c      	sub	sp, #112	@ 0x70
 8009a6e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009a70:	9002      	str	r0, [sp, #8]
 8009a72:	9006      	str	r0, [sp, #24]
 8009a74:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009a78:	4809      	ldr	r0, [pc, #36]	@ (8009aa0 <siprintf+0x38>)
 8009a7a:	9107      	str	r1, [sp, #28]
 8009a7c:	9104      	str	r1, [sp, #16]
 8009a7e:	4909      	ldr	r1, [pc, #36]	@ (8009aa4 <siprintf+0x3c>)
 8009a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a84:	9105      	str	r1, [sp, #20]
 8009a86:	6800      	ldr	r0, [r0, #0]
 8009a88:	9301      	str	r3, [sp, #4]
 8009a8a:	a902      	add	r1, sp, #8
 8009a8c:	f001 f95a 	bl	800ad44 <_svfiprintf_r>
 8009a90:	9b02      	ldr	r3, [sp, #8]
 8009a92:	2200      	movs	r2, #0
 8009a94:	701a      	strb	r2, [r3, #0]
 8009a96:	b01c      	add	sp, #112	@ 0x70
 8009a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a9c:	b003      	add	sp, #12
 8009a9e:	4770      	bx	lr
 8009aa0:	20000020 	.word	0x20000020
 8009aa4:	ffff0208 	.word	0xffff0208

08009aa8 <siscanf>:
 8009aa8:	b40e      	push	{r1, r2, r3}
 8009aaa:	b530      	push	{r4, r5, lr}
 8009aac:	b09c      	sub	sp, #112	@ 0x70
 8009aae:	ac1f      	add	r4, sp, #124	@ 0x7c
 8009ab0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8009ab4:	f854 5b04 	ldr.w	r5, [r4], #4
 8009ab8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8009abc:	9002      	str	r0, [sp, #8]
 8009abe:	9006      	str	r0, [sp, #24]
 8009ac0:	f7f6 fb86 	bl	80001d0 <strlen>
 8009ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8009af4 <siscanf+0x4c>)
 8009ac6:	9003      	str	r0, [sp, #12]
 8009ac8:	9007      	str	r0, [sp, #28]
 8009aca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009acc:	480a      	ldr	r0, [pc, #40]	@ (8009af8 <siscanf+0x50>)
 8009ace:	9401      	str	r4, [sp, #4]
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009ad4:	9314      	str	r3, [sp, #80]	@ 0x50
 8009ad6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009ada:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009ade:	462a      	mov	r2, r5
 8009ae0:	4623      	mov	r3, r4
 8009ae2:	a902      	add	r1, sp, #8
 8009ae4:	6800      	ldr	r0, [r0, #0]
 8009ae6:	f001 fa81 	bl	800afec <__ssvfiscanf_r>
 8009aea:	b01c      	add	sp, #112	@ 0x70
 8009aec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009af0:	b003      	add	sp, #12
 8009af2:	4770      	bx	lr
 8009af4:	08009b1f 	.word	0x08009b1f
 8009af8:	20000020 	.word	0x20000020

08009afc <__sread>:
 8009afc:	b510      	push	{r4, lr}
 8009afe:	460c      	mov	r4, r1
 8009b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b04:	f000 f8e0 	bl	8009cc8 <_read_r>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	bfab      	itete	ge
 8009b0c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8009b10:	181b      	addge	r3, r3, r0
 8009b12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009b16:	bfac      	ite	ge
 8009b18:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009b1a:	81a3      	strhlt	r3, [r4, #12]
 8009b1c:	bd10      	pop	{r4, pc}

08009b1e <__seofread>:
 8009b1e:	2000      	movs	r0, #0
 8009b20:	4770      	bx	lr

08009b22 <__swrite>:
 8009b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b26:	461f      	mov	r7, r3
 8009b28:	898b      	ldrh	r3, [r1, #12]
 8009b2a:	05db      	lsls	r3, r3, #23
 8009b2c:	4605      	mov	r5, r0
 8009b2e:	460c      	mov	r4, r1
 8009b30:	4616      	mov	r6, r2
 8009b32:	d505      	bpl.n	8009b40 <__swrite+0x1e>
 8009b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b38:	2302      	movs	r3, #2
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f000 f8b2 	bl	8009ca4 <_lseek_r>
 8009b40:	89a3      	ldrh	r3, [r4, #12]
 8009b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009b4a:	81a3      	strh	r3, [r4, #12]
 8009b4c:	4632      	mov	r2, r6
 8009b4e:	463b      	mov	r3, r7
 8009b50:	4628      	mov	r0, r5
 8009b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b56:	f000 b8c9 	b.w	8009cec <_write_r>

08009b5a <__sseek>:
 8009b5a:	b510      	push	{r4, lr}
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b62:	f000 f89f 	bl	8009ca4 <_lseek_r>
 8009b66:	1c43      	adds	r3, r0, #1
 8009b68:	89a3      	ldrh	r3, [r4, #12]
 8009b6a:	bf15      	itete	ne
 8009b6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009b6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009b72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009b76:	81a3      	strheq	r3, [r4, #12]
 8009b78:	bf18      	it	ne
 8009b7a:	81a3      	strhne	r3, [r4, #12]
 8009b7c:	bd10      	pop	{r4, pc}

08009b7e <__sclose>:
 8009b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b82:	f000 b87f 	b.w	8009c84 <_close_r>

08009b86 <_vsniprintf_r>:
 8009b86:	b530      	push	{r4, r5, lr}
 8009b88:	4614      	mov	r4, r2
 8009b8a:	2c00      	cmp	r4, #0
 8009b8c:	b09b      	sub	sp, #108	@ 0x6c
 8009b8e:	4605      	mov	r5, r0
 8009b90:	461a      	mov	r2, r3
 8009b92:	da05      	bge.n	8009ba0 <_vsniprintf_r+0x1a>
 8009b94:	238b      	movs	r3, #139	@ 0x8b
 8009b96:	6003      	str	r3, [r0, #0]
 8009b98:	f04f 30ff 	mov.w	r0, #4294967295
 8009b9c:	b01b      	add	sp, #108	@ 0x6c
 8009b9e:	bd30      	pop	{r4, r5, pc}
 8009ba0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009ba4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8009ba8:	bf14      	ite	ne
 8009baa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009bae:	4623      	moveq	r3, r4
 8009bb0:	9302      	str	r3, [sp, #8]
 8009bb2:	9305      	str	r3, [sp, #20]
 8009bb4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009bb8:	9100      	str	r1, [sp, #0]
 8009bba:	9104      	str	r1, [sp, #16]
 8009bbc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8009bc0:	4669      	mov	r1, sp
 8009bc2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8009bc4:	f001 f8be 	bl	800ad44 <_svfiprintf_r>
 8009bc8:	1c43      	adds	r3, r0, #1
 8009bca:	bfbc      	itt	lt
 8009bcc:	238b      	movlt	r3, #139	@ 0x8b
 8009bce:	602b      	strlt	r3, [r5, #0]
 8009bd0:	2c00      	cmp	r4, #0
 8009bd2:	d0e3      	beq.n	8009b9c <_vsniprintf_r+0x16>
 8009bd4:	9b00      	ldr	r3, [sp, #0]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	701a      	strb	r2, [r3, #0]
 8009bda:	e7df      	b.n	8009b9c <_vsniprintf_r+0x16>

08009bdc <vsniprintf>:
 8009bdc:	b507      	push	{r0, r1, r2, lr}
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	4613      	mov	r3, r2
 8009be2:	460a      	mov	r2, r1
 8009be4:	4601      	mov	r1, r0
 8009be6:	4803      	ldr	r0, [pc, #12]	@ (8009bf4 <vsniprintf+0x18>)
 8009be8:	6800      	ldr	r0, [r0, #0]
 8009bea:	f7ff ffcc 	bl	8009b86 <_vsniprintf_r>
 8009bee:	b003      	add	sp, #12
 8009bf0:	f85d fb04 	ldr.w	pc, [sp], #4
 8009bf4:	20000020 	.word	0x20000020

08009bf8 <memmove>:
 8009bf8:	4288      	cmp	r0, r1
 8009bfa:	b510      	push	{r4, lr}
 8009bfc:	eb01 0402 	add.w	r4, r1, r2
 8009c00:	d902      	bls.n	8009c08 <memmove+0x10>
 8009c02:	4284      	cmp	r4, r0
 8009c04:	4623      	mov	r3, r4
 8009c06:	d807      	bhi.n	8009c18 <memmove+0x20>
 8009c08:	1e43      	subs	r3, r0, #1
 8009c0a:	42a1      	cmp	r1, r4
 8009c0c:	d008      	beq.n	8009c20 <memmove+0x28>
 8009c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c16:	e7f8      	b.n	8009c0a <memmove+0x12>
 8009c18:	4402      	add	r2, r0
 8009c1a:	4601      	mov	r1, r0
 8009c1c:	428a      	cmp	r2, r1
 8009c1e:	d100      	bne.n	8009c22 <memmove+0x2a>
 8009c20:	bd10      	pop	{r4, pc}
 8009c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c2a:	e7f7      	b.n	8009c1c <memmove+0x24>

08009c2c <memset>:
 8009c2c:	4402      	add	r2, r0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d100      	bne.n	8009c36 <memset+0xa>
 8009c34:	4770      	bx	lr
 8009c36:	f803 1b01 	strb.w	r1, [r3], #1
 8009c3a:	e7f9      	b.n	8009c30 <memset+0x4>

08009c3c <strchr>:
 8009c3c:	b2c9      	uxtb	r1, r1
 8009c3e:	4603      	mov	r3, r0
 8009c40:	4618      	mov	r0, r3
 8009c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c46:	b112      	cbz	r2, 8009c4e <strchr+0x12>
 8009c48:	428a      	cmp	r2, r1
 8009c4a:	d1f9      	bne.n	8009c40 <strchr+0x4>
 8009c4c:	4770      	bx	lr
 8009c4e:	2900      	cmp	r1, #0
 8009c50:	bf18      	it	ne
 8009c52:	2000      	movne	r0, #0
 8009c54:	4770      	bx	lr

08009c56 <strstr>:
 8009c56:	780a      	ldrb	r2, [r1, #0]
 8009c58:	b570      	push	{r4, r5, r6, lr}
 8009c5a:	b96a      	cbnz	r2, 8009c78 <strstr+0x22>
 8009c5c:	bd70      	pop	{r4, r5, r6, pc}
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d109      	bne.n	8009c76 <strstr+0x20>
 8009c62:	460c      	mov	r4, r1
 8009c64:	4605      	mov	r5, r0
 8009c66:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d0f6      	beq.n	8009c5c <strstr+0x6>
 8009c6e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8009c72:	429e      	cmp	r6, r3
 8009c74:	d0f7      	beq.n	8009c66 <strstr+0x10>
 8009c76:	3001      	adds	r0, #1
 8009c78:	7803      	ldrb	r3, [r0, #0]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1ef      	bne.n	8009c5e <strstr+0x8>
 8009c7e:	4618      	mov	r0, r3
 8009c80:	e7ec      	b.n	8009c5c <strstr+0x6>
	...

08009c84 <_close_r>:
 8009c84:	b538      	push	{r3, r4, r5, lr}
 8009c86:	4d06      	ldr	r5, [pc, #24]	@ (8009ca0 <_close_r+0x1c>)
 8009c88:	2300      	movs	r3, #0
 8009c8a:	4604      	mov	r4, r0
 8009c8c:	4608      	mov	r0, r1
 8009c8e:	602b      	str	r3, [r5, #0]
 8009c90:	f7f9 f934 	bl	8002efc <_close>
 8009c94:	1c43      	adds	r3, r0, #1
 8009c96:	d102      	bne.n	8009c9e <_close_r+0x1a>
 8009c98:	682b      	ldr	r3, [r5, #0]
 8009c9a:	b103      	cbz	r3, 8009c9e <_close_r+0x1a>
 8009c9c:	6023      	str	r3, [r4, #0]
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	20013788 	.word	0x20013788

08009ca4 <_lseek_r>:
 8009ca4:	b538      	push	{r3, r4, r5, lr}
 8009ca6:	4d07      	ldr	r5, [pc, #28]	@ (8009cc4 <_lseek_r+0x20>)
 8009ca8:	4604      	mov	r4, r0
 8009caa:	4608      	mov	r0, r1
 8009cac:	4611      	mov	r1, r2
 8009cae:	2200      	movs	r2, #0
 8009cb0:	602a      	str	r2, [r5, #0]
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	f7f9 f949 	bl	8002f4a <_lseek>
 8009cb8:	1c43      	adds	r3, r0, #1
 8009cba:	d102      	bne.n	8009cc2 <_lseek_r+0x1e>
 8009cbc:	682b      	ldr	r3, [r5, #0]
 8009cbe:	b103      	cbz	r3, 8009cc2 <_lseek_r+0x1e>
 8009cc0:	6023      	str	r3, [r4, #0]
 8009cc2:	bd38      	pop	{r3, r4, r5, pc}
 8009cc4:	20013788 	.word	0x20013788

08009cc8 <_read_r>:
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	4d07      	ldr	r5, [pc, #28]	@ (8009ce8 <_read_r+0x20>)
 8009ccc:	4604      	mov	r4, r0
 8009cce:	4608      	mov	r0, r1
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	602a      	str	r2, [r5, #0]
 8009cd6:	461a      	mov	r2, r3
 8009cd8:	f7f9 f8d7 	bl	8002e8a <_read>
 8009cdc:	1c43      	adds	r3, r0, #1
 8009cde:	d102      	bne.n	8009ce6 <_read_r+0x1e>
 8009ce0:	682b      	ldr	r3, [r5, #0]
 8009ce2:	b103      	cbz	r3, 8009ce6 <_read_r+0x1e>
 8009ce4:	6023      	str	r3, [r4, #0]
 8009ce6:	bd38      	pop	{r3, r4, r5, pc}
 8009ce8:	20013788 	.word	0x20013788

08009cec <_write_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	4d07      	ldr	r5, [pc, #28]	@ (8009d0c <_write_r+0x20>)
 8009cf0:	4604      	mov	r4, r0
 8009cf2:	4608      	mov	r0, r1
 8009cf4:	4611      	mov	r1, r2
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	602a      	str	r2, [r5, #0]
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	f7f9 f8e2 	bl	8002ec4 <_write>
 8009d00:	1c43      	adds	r3, r0, #1
 8009d02:	d102      	bne.n	8009d0a <_write_r+0x1e>
 8009d04:	682b      	ldr	r3, [r5, #0]
 8009d06:	b103      	cbz	r3, 8009d0a <_write_r+0x1e>
 8009d08:	6023      	str	r3, [r4, #0]
 8009d0a:	bd38      	pop	{r3, r4, r5, pc}
 8009d0c:	20013788 	.word	0x20013788

08009d10 <__errno>:
 8009d10:	4b01      	ldr	r3, [pc, #4]	@ (8009d18 <__errno+0x8>)
 8009d12:	6818      	ldr	r0, [r3, #0]
 8009d14:	4770      	bx	lr
 8009d16:	bf00      	nop
 8009d18:	20000020 	.word	0x20000020

08009d1c <__libc_init_array>:
 8009d1c:	b570      	push	{r4, r5, r6, lr}
 8009d1e:	4d0d      	ldr	r5, [pc, #52]	@ (8009d54 <__libc_init_array+0x38>)
 8009d20:	4c0d      	ldr	r4, [pc, #52]	@ (8009d58 <__libc_init_array+0x3c>)
 8009d22:	1b64      	subs	r4, r4, r5
 8009d24:	10a4      	asrs	r4, r4, #2
 8009d26:	2600      	movs	r6, #0
 8009d28:	42a6      	cmp	r6, r4
 8009d2a:	d109      	bne.n	8009d40 <__libc_init_array+0x24>
 8009d2c:	4d0b      	ldr	r5, [pc, #44]	@ (8009d5c <__libc_init_array+0x40>)
 8009d2e:	4c0c      	ldr	r4, [pc, #48]	@ (8009d60 <__libc_init_array+0x44>)
 8009d30:	f003 fa98 	bl	800d264 <_init>
 8009d34:	1b64      	subs	r4, r4, r5
 8009d36:	10a4      	asrs	r4, r4, #2
 8009d38:	2600      	movs	r6, #0
 8009d3a:	42a6      	cmp	r6, r4
 8009d3c:	d105      	bne.n	8009d4a <__libc_init_array+0x2e>
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
 8009d40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d44:	4798      	blx	r3
 8009d46:	3601      	adds	r6, #1
 8009d48:	e7ee      	b.n	8009d28 <__libc_init_array+0xc>
 8009d4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d4e:	4798      	blx	r3
 8009d50:	3601      	adds	r6, #1
 8009d52:	e7f2      	b.n	8009d3a <__libc_init_array+0x1e>
 8009d54:	0800e02c 	.word	0x0800e02c
 8009d58:	0800e02c 	.word	0x0800e02c
 8009d5c:	0800e02c 	.word	0x0800e02c
 8009d60:	0800e030 	.word	0x0800e030

08009d64 <__retarget_lock_init_recursive>:
 8009d64:	4770      	bx	lr

08009d66 <__retarget_lock_acquire_recursive>:
 8009d66:	4770      	bx	lr

08009d68 <__retarget_lock_release_recursive>:
 8009d68:	4770      	bx	lr

08009d6a <memcpy>:
 8009d6a:	440a      	add	r2, r1
 8009d6c:	4291      	cmp	r1, r2
 8009d6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d72:	d100      	bne.n	8009d76 <memcpy+0xc>
 8009d74:	4770      	bx	lr
 8009d76:	b510      	push	{r4, lr}
 8009d78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d80:	4291      	cmp	r1, r2
 8009d82:	d1f9      	bne.n	8009d78 <memcpy+0xe>
 8009d84:	bd10      	pop	{r4, pc}
	...

08009d88 <nanf>:
 8009d88:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009d90 <nanf+0x8>
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	7fc00000 	.word	0x7fc00000

08009d94 <_free_r>:
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	4605      	mov	r5, r0
 8009d98:	2900      	cmp	r1, #0
 8009d9a:	d041      	beq.n	8009e20 <_free_r+0x8c>
 8009d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009da0:	1f0c      	subs	r4, r1, #4
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	bfb8      	it	lt
 8009da6:	18e4      	addlt	r4, r4, r3
 8009da8:	f000 f8e0 	bl	8009f6c <__malloc_lock>
 8009dac:	4a1d      	ldr	r2, [pc, #116]	@ (8009e24 <_free_r+0x90>)
 8009dae:	6813      	ldr	r3, [r2, #0]
 8009db0:	b933      	cbnz	r3, 8009dc0 <_free_r+0x2c>
 8009db2:	6063      	str	r3, [r4, #4]
 8009db4:	6014      	str	r4, [r2, #0]
 8009db6:	4628      	mov	r0, r5
 8009db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dbc:	f000 b8dc 	b.w	8009f78 <__malloc_unlock>
 8009dc0:	42a3      	cmp	r3, r4
 8009dc2:	d908      	bls.n	8009dd6 <_free_r+0x42>
 8009dc4:	6820      	ldr	r0, [r4, #0]
 8009dc6:	1821      	adds	r1, r4, r0
 8009dc8:	428b      	cmp	r3, r1
 8009dca:	bf01      	itttt	eq
 8009dcc:	6819      	ldreq	r1, [r3, #0]
 8009dce:	685b      	ldreq	r3, [r3, #4]
 8009dd0:	1809      	addeq	r1, r1, r0
 8009dd2:	6021      	streq	r1, [r4, #0]
 8009dd4:	e7ed      	b.n	8009db2 <_free_r+0x1e>
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	b10b      	cbz	r3, 8009de0 <_free_r+0x4c>
 8009ddc:	42a3      	cmp	r3, r4
 8009dde:	d9fa      	bls.n	8009dd6 <_free_r+0x42>
 8009de0:	6811      	ldr	r1, [r2, #0]
 8009de2:	1850      	adds	r0, r2, r1
 8009de4:	42a0      	cmp	r0, r4
 8009de6:	d10b      	bne.n	8009e00 <_free_r+0x6c>
 8009de8:	6820      	ldr	r0, [r4, #0]
 8009dea:	4401      	add	r1, r0
 8009dec:	1850      	adds	r0, r2, r1
 8009dee:	4283      	cmp	r3, r0
 8009df0:	6011      	str	r1, [r2, #0]
 8009df2:	d1e0      	bne.n	8009db6 <_free_r+0x22>
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	6053      	str	r3, [r2, #4]
 8009dfa:	4408      	add	r0, r1
 8009dfc:	6010      	str	r0, [r2, #0]
 8009dfe:	e7da      	b.n	8009db6 <_free_r+0x22>
 8009e00:	d902      	bls.n	8009e08 <_free_r+0x74>
 8009e02:	230c      	movs	r3, #12
 8009e04:	602b      	str	r3, [r5, #0]
 8009e06:	e7d6      	b.n	8009db6 <_free_r+0x22>
 8009e08:	6820      	ldr	r0, [r4, #0]
 8009e0a:	1821      	adds	r1, r4, r0
 8009e0c:	428b      	cmp	r3, r1
 8009e0e:	bf04      	itt	eq
 8009e10:	6819      	ldreq	r1, [r3, #0]
 8009e12:	685b      	ldreq	r3, [r3, #4]
 8009e14:	6063      	str	r3, [r4, #4]
 8009e16:	bf04      	itt	eq
 8009e18:	1809      	addeq	r1, r1, r0
 8009e1a:	6021      	streq	r1, [r4, #0]
 8009e1c:	6054      	str	r4, [r2, #4]
 8009e1e:	e7ca      	b.n	8009db6 <_free_r+0x22>
 8009e20:	bd38      	pop	{r3, r4, r5, pc}
 8009e22:	bf00      	nop
 8009e24:	20013794 	.word	0x20013794

08009e28 <sbrk_aligned>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	4e0f      	ldr	r6, [pc, #60]	@ (8009e68 <sbrk_aligned+0x40>)
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	6831      	ldr	r1, [r6, #0]
 8009e30:	4605      	mov	r5, r0
 8009e32:	b911      	cbnz	r1, 8009e3a <sbrk_aligned+0x12>
 8009e34:	f001 fe5c 	bl	800baf0 <_sbrk_r>
 8009e38:	6030      	str	r0, [r6, #0]
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	f001 fe57 	bl	800baf0 <_sbrk_r>
 8009e42:	1c43      	adds	r3, r0, #1
 8009e44:	d103      	bne.n	8009e4e <sbrk_aligned+0x26>
 8009e46:	f04f 34ff 	mov.w	r4, #4294967295
 8009e4a:	4620      	mov	r0, r4
 8009e4c:	bd70      	pop	{r4, r5, r6, pc}
 8009e4e:	1cc4      	adds	r4, r0, #3
 8009e50:	f024 0403 	bic.w	r4, r4, #3
 8009e54:	42a0      	cmp	r0, r4
 8009e56:	d0f8      	beq.n	8009e4a <sbrk_aligned+0x22>
 8009e58:	1a21      	subs	r1, r4, r0
 8009e5a:	4628      	mov	r0, r5
 8009e5c:	f001 fe48 	bl	800baf0 <_sbrk_r>
 8009e60:	3001      	adds	r0, #1
 8009e62:	d1f2      	bne.n	8009e4a <sbrk_aligned+0x22>
 8009e64:	e7ef      	b.n	8009e46 <sbrk_aligned+0x1e>
 8009e66:	bf00      	nop
 8009e68:	20013790 	.word	0x20013790

08009e6c <_malloc_r>:
 8009e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e70:	1ccd      	adds	r5, r1, #3
 8009e72:	f025 0503 	bic.w	r5, r5, #3
 8009e76:	3508      	adds	r5, #8
 8009e78:	2d0c      	cmp	r5, #12
 8009e7a:	bf38      	it	cc
 8009e7c:	250c      	movcc	r5, #12
 8009e7e:	2d00      	cmp	r5, #0
 8009e80:	4606      	mov	r6, r0
 8009e82:	db01      	blt.n	8009e88 <_malloc_r+0x1c>
 8009e84:	42a9      	cmp	r1, r5
 8009e86:	d904      	bls.n	8009e92 <_malloc_r+0x26>
 8009e88:	230c      	movs	r3, #12
 8009e8a:	6033      	str	r3, [r6, #0]
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009f68 <_malloc_r+0xfc>
 8009e96:	f000 f869 	bl	8009f6c <__malloc_lock>
 8009e9a:	f8d8 3000 	ldr.w	r3, [r8]
 8009e9e:	461c      	mov	r4, r3
 8009ea0:	bb44      	cbnz	r4, 8009ef4 <_malloc_r+0x88>
 8009ea2:	4629      	mov	r1, r5
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	f7ff ffbf 	bl	8009e28 <sbrk_aligned>
 8009eaa:	1c43      	adds	r3, r0, #1
 8009eac:	4604      	mov	r4, r0
 8009eae:	d158      	bne.n	8009f62 <_malloc_r+0xf6>
 8009eb0:	f8d8 4000 	ldr.w	r4, [r8]
 8009eb4:	4627      	mov	r7, r4
 8009eb6:	2f00      	cmp	r7, #0
 8009eb8:	d143      	bne.n	8009f42 <_malloc_r+0xd6>
 8009eba:	2c00      	cmp	r4, #0
 8009ebc:	d04b      	beq.n	8009f56 <_malloc_r+0xea>
 8009ebe:	6823      	ldr	r3, [r4, #0]
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	eb04 0903 	add.w	r9, r4, r3
 8009ec8:	f001 fe12 	bl	800baf0 <_sbrk_r>
 8009ecc:	4581      	cmp	r9, r0
 8009ece:	d142      	bne.n	8009f56 <_malloc_r+0xea>
 8009ed0:	6821      	ldr	r1, [r4, #0]
 8009ed2:	1a6d      	subs	r5, r5, r1
 8009ed4:	4629      	mov	r1, r5
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f7ff ffa6 	bl	8009e28 <sbrk_aligned>
 8009edc:	3001      	adds	r0, #1
 8009ede:	d03a      	beq.n	8009f56 <_malloc_r+0xea>
 8009ee0:	6823      	ldr	r3, [r4, #0]
 8009ee2:	442b      	add	r3, r5
 8009ee4:	6023      	str	r3, [r4, #0]
 8009ee6:	f8d8 3000 	ldr.w	r3, [r8]
 8009eea:	685a      	ldr	r2, [r3, #4]
 8009eec:	bb62      	cbnz	r2, 8009f48 <_malloc_r+0xdc>
 8009eee:	f8c8 7000 	str.w	r7, [r8]
 8009ef2:	e00f      	b.n	8009f14 <_malloc_r+0xa8>
 8009ef4:	6822      	ldr	r2, [r4, #0]
 8009ef6:	1b52      	subs	r2, r2, r5
 8009ef8:	d420      	bmi.n	8009f3c <_malloc_r+0xd0>
 8009efa:	2a0b      	cmp	r2, #11
 8009efc:	d917      	bls.n	8009f2e <_malloc_r+0xc2>
 8009efe:	1961      	adds	r1, r4, r5
 8009f00:	42a3      	cmp	r3, r4
 8009f02:	6025      	str	r5, [r4, #0]
 8009f04:	bf18      	it	ne
 8009f06:	6059      	strne	r1, [r3, #4]
 8009f08:	6863      	ldr	r3, [r4, #4]
 8009f0a:	bf08      	it	eq
 8009f0c:	f8c8 1000 	streq.w	r1, [r8]
 8009f10:	5162      	str	r2, [r4, r5]
 8009f12:	604b      	str	r3, [r1, #4]
 8009f14:	4630      	mov	r0, r6
 8009f16:	f000 f82f 	bl	8009f78 <__malloc_unlock>
 8009f1a:	f104 000b 	add.w	r0, r4, #11
 8009f1e:	1d23      	adds	r3, r4, #4
 8009f20:	f020 0007 	bic.w	r0, r0, #7
 8009f24:	1ac2      	subs	r2, r0, r3
 8009f26:	bf1c      	itt	ne
 8009f28:	1a1b      	subne	r3, r3, r0
 8009f2a:	50a3      	strne	r3, [r4, r2]
 8009f2c:	e7af      	b.n	8009e8e <_malloc_r+0x22>
 8009f2e:	6862      	ldr	r2, [r4, #4]
 8009f30:	42a3      	cmp	r3, r4
 8009f32:	bf0c      	ite	eq
 8009f34:	f8c8 2000 	streq.w	r2, [r8]
 8009f38:	605a      	strne	r2, [r3, #4]
 8009f3a:	e7eb      	b.n	8009f14 <_malloc_r+0xa8>
 8009f3c:	4623      	mov	r3, r4
 8009f3e:	6864      	ldr	r4, [r4, #4]
 8009f40:	e7ae      	b.n	8009ea0 <_malloc_r+0x34>
 8009f42:	463c      	mov	r4, r7
 8009f44:	687f      	ldr	r7, [r7, #4]
 8009f46:	e7b6      	b.n	8009eb6 <_malloc_r+0x4a>
 8009f48:	461a      	mov	r2, r3
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	d1fb      	bne.n	8009f48 <_malloc_r+0xdc>
 8009f50:	2300      	movs	r3, #0
 8009f52:	6053      	str	r3, [r2, #4]
 8009f54:	e7de      	b.n	8009f14 <_malloc_r+0xa8>
 8009f56:	230c      	movs	r3, #12
 8009f58:	6033      	str	r3, [r6, #0]
 8009f5a:	4630      	mov	r0, r6
 8009f5c:	f000 f80c 	bl	8009f78 <__malloc_unlock>
 8009f60:	e794      	b.n	8009e8c <_malloc_r+0x20>
 8009f62:	6005      	str	r5, [r0, #0]
 8009f64:	e7d6      	b.n	8009f14 <_malloc_r+0xa8>
 8009f66:	bf00      	nop
 8009f68:	20013794 	.word	0x20013794

08009f6c <__malloc_lock>:
 8009f6c:	4801      	ldr	r0, [pc, #4]	@ (8009f74 <__malloc_lock+0x8>)
 8009f6e:	f7ff befa 	b.w	8009d66 <__retarget_lock_acquire_recursive>
 8009f72:	bf00      	nop
 8009f74:	2001378c 	.word	0x2001378c

08009f78 <__malloc_unlock>:
 8009f78:	4801      	ldr	r0, [pc, #4]	@ (8009f80 <__malloc_unlock+0x8>)
 8009f7a:	f7ff bef5 	b.w	8009d68 <__retarget_lock_release_recursive>
 8009f7e:	bf00      	nop
 8009f80:	2001378c 	.word	0x2001378c

08009f84 <sulp>:
 8009f84:	b570      	push	{r4, r5, r6, lr}
 8009f86:	4604      	mov	r4, r0
 8009f88:	460d      	mov	r5, r1
 8009f8a:	ec45 4b10 	vmov	d0, r4, r5
 8009f8e:	4616      	mov	r6, r2
 8009f90:	f002 fc86 	bl	800c8a0 <__ulp>
 8009f94:	ec51 0b10 	vmov	r0, r1, d0
 8009f98:	b17e      	cbz	r6, 8009fba <sulp+0x36>
 8009f9a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009f9e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	dd09      	ble.n	8009fba <sulp+0x36>
 8009fa6:	051b      	lsls	r3, r3, #20
 8009fa8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009fac:	2400      	movs	r4, #0
 8009fae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009fb2:	4622      	mov	r2, r4
 8009fb4:	462b      	mov	r3, r5
 8009fb6:	f7f6 fb1f 	bl	80005f8 <__aeabi_dmul>
 8009fba:	ec41 0b10 	vmov	d0, r0, r1
 8009fbe:	bd70      	pop	{r4, r5, r6, pc}

08009fc0 <_strtod_l>:
 8009fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc4:	b09f      	sub	sp, #124	@ 0x7c
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009fca:	2200      	movs	r2, #0
 8009fcc:	921a      	str	r2, [sp, #104]	@ 0x68
 8009fce:	9005      	str	r0, [sp, #20]
 8009fd0:	f04f 0a00 	mov.w	sl, #0
 8009fd4:	f04f 0b00 	mov.w	fp, #0
 8009fd8:	460a      	mov	r2, r1
 8009fda:	9219      	str	r2, [sp, #100]	@ 0x64
 8009fdc:	7811      	ldrb	r1, [r2, #0]
 8009fde:	292b      	cmp	r1, #43	@ 0x2b
 8009fe0:	d04a      	beq.n	800a078 <_strtod_l+0xb8>
 8009fe2:	d838      	bhi.n	800a056 <_strtod_l+0x96>
 8009fe4:	290d      	cmp	r1, #13
 8009fe6:	d832      	bhi.n	800a04e <_strtod_l+0x8e>
 8009fe8:	2908      	cmp	r1, #8
 8009fea:	d832      	bhi.n	800a052 <_strtod_l+0x92>
 8009fec:	2900      	cmp	r1, #0
 8009fee:	d03b      	beq.n	800a068 <_strtod_l+0xa8>
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009ff4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009ff6:	782a      	ldrb	r2, [r5, #0]
 8009ff8:	2a30      	cmp	r2, #48	@ 0x30
 8009ffa:	f040 80b3 	bne.w	800a164 <_strtod_l+0x1a4>
 8009ffe:	786a      	ldrb	r2, [r5, #1]
 800a000:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a004:	2a58      	cmp	r2, #88	@ 0x58
 800a006:	d16e      	bne.n	800a0e6 <_strtod_l+0x126>
 800a008:	9302      	str	r3, [sp, #8]
 800a00a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a00c:	9301      	str	r3, [sp, #4]
 800a00e:	ab1a      	add	r3, sp, #104	@ 0x68
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	4a8e      	ldr	r2, [pc, #568]	@ (800a24c <_strtod_l+0x28c>)
 800a014:	9805      	ldr	r0, [sp, #20]
 800a016:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a018:	a919      	add	r1, sp, #100	@ 0x64
 800a01a:	f001 fde9 	bl	800bbf0 <__gethex>
 800a01e:	f010 060f 	ands.w	r6, r0, #15
 800a022:	4604      	mov	r4, r0
 800a024:	d005      	beq.n	800a032 <_strtod_l+0x72>
 800a026:	2e06      	cmp	r6, #6
 800a028:	d128      	bne.n	800a07c <_strtod_l+0xbc>
 800a02a:	3501      	adds	r5, #1
 800a02c:	2300      	movs	r3, #0
 800a02e:	9519      	str	r5, [sp, #100]	@ 0x64
 800a030:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a032:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a034:	2b00      	cmp	r3, #0
 800a036:	f040 858e 	bne.w	800ab56 <_strtod_l+0xb96>
 800a03a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a03c:	b1cb      	cbz	r3, 800a072 <_strtod_l+0xb2>
 800a03e:	4652      	mov	r2, sl
 800a040:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800a044:	ec43 2b10 	vmov	d0, r2, r3
 800a048:	b01f      	add	sp, #124	@ 0x7c
 800a04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a04e:	2920      	cmp	r1, #32
 800a050:	d1ce      	bne.n	8009ff0 <_strtod_l+0x30>
 800a052:	3201      	adds	r2, #1
 800a054:	e7c1      	b.n	8009fda <_strtod_l+0x1a>
 800a056:	292d      	cmp	r1, #45	@ 0x2d
 800a058:	d1ca      	bne.n	8009ff0 <_strtod_l+0x30>
 800a05a:	2101      	movs	r1, #1
 800a05c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a05e:	1c51      	adds	r1, r2, #1
 800a060:	9119      	str	r1, [sp, #100]	@ 0x64
 800a062:	7852      	ldrb	r2, [r2, #1]
 800a064:	2a00      	cmp	r2, #0
 800a066:	d1c5      	bne.n	8009ff4 <_strtod_l+0x34>
 800a068:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a06a:	9419      	str	r4, [sp, #100]	@ 0x64
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	f040 8570 	bne.w	800ab52 <_strtod_l+0xb92>
 800a072:	4652      	mov	r2, sl
 800a074:	465b      	mov	r3, fp
 800a076:	e7e5      	b.n	800a044 <_strtod_l+0x84>
 800a078:	2100      	movs	r1, #0
 800a07a:	e7ef      	b.n	800a05c <_strtod_l+0x9c>
 800a07c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a07e:	b13a      	cbz	r2, 800a090 <_strtod_l+0xd0>
 800a080:	2135      	movs	r1, #53	@ 0x35
 800a082:	a81c      	add	r0, sp, #112	@ 0x70
 800a084:	f002 fd06 	bl	800ca94 <__copybits>
 800a088:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a08a:	9805      	ldr	r0, [sp, #20]
 800a08c:	f002 f8d4 	bl	800c238 <_Bfree>
 800a090:	3e01      	subs	r6, #1
 800a092:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a094:	2e04      	cmp	r6, #4
 800a096:	d806      	bhi.n	800a0a6 <_strtod_l+0xe6>
 800a098:	e8df f006 	tbb	[pc, r6]
 800a09c:	201d0314 	.word	0x201d0314
 800a0a0:	14          	.byte	0x14
 800a0a1:	00          	.byte	0x00
 800a0a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a0a6:	05e1      	lsls	r1, r4, #23
 800a0a8:	bf48      	it	mi
 800a0aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a0ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a0b2:	0d1b      	lsrs	r3, r3, #20
 800a0b4:	051b      	lsls	r3, r3, #20
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d1bb      	bne.n	800a032 <_strtod_l+0x72>
 800a0ba:	f7ff fe29 	bl	8009d10 <__errno>
 800a0be:	2322      	movs	r3, #34	@ 0x22
 800a0c0:	6003      	str	r3, [r0, #0]
 800a0c2:	e7b6      	b.n	800a032 <_strtod_l+0x72>
 800a0c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a0c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a0cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a0d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a0d4:	e7e7      	b.n	800a0a6 <_strtod_l+0xe6>
 800a0d6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800a254 <_strtod_l+0x294>
 800a0da:	e7e4      	b.n	800a0a6 <_strtod_l+0xe6>
 800a0dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a0e0:	f04f 3aff 	mov.w	sl, #4294967295
 800a0e4:	e7df      	b.n	800a0a6 <_strtod_l+0xe6>
 800a0e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0e8:	1c5a      	adds	r2, r3, #1
 800a0ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800a0ec:	785b      	ldrb	r3, [r3, #1]
 800a0ee:	2b30      	cmp	r3, #48	@ 0x30
 800a0f0:	d0f9      	beq.n	800a0e6 <_strtod_l+0x126>
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d09d      	beq.n	800a032 <_strtod_l+0x72>
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a0fc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a0fe:	2300      	movs	r3, #0
 800a100:	9308      	str	r3, [sp, #32]
 800a102:	930a      	str	r3, [sp, #40]	@ 0x28
 800a104:	461f      	mov	r7, r3
 800a106:	220a      	movs	r2, #10
 800a108:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a10a:	7805      	ldrb	r5, [r0, #0]
 800a10c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a110:	b2d9      	uxtb	r1, r3
 800a112:	2909      	cmp	r1, #9
 800a114:	d928      	bls.n	800a168 <_strtod_l+0x1a8>
 800a116:	494e      	ldr	r1, [pc, #312]	@ (800a250 <_strtod_l+0x290>)
 800a118:	2201      	movs	r2, #1
 800a11a:	f001 fcd6 	bl	800baca <strncmp>
 800a11e:	2800      	cmp	r0, #0
 800a120:	d032      	beq.n	800a188 <_strtod_l+0x1c8>
 800a122:	2000      	movs	r0, #0
 800a124:	462a      	mov	r2, r5
 800a126:	4681      	mov	r9, r0
 800a128:	463d      	mov	r5, r7
 800a12a:	4603      	mov	r3, r0
 800a12c:	2a65      	cmp	r2, #101	@ 0x65
 800a12e:	d001      	beq.n	800a134 <_strtod_l+0x174>
 800a130:	2a45      	cmp	r2, #69	@ 0x45
 800a132:	d114      	bne.n	800a15e <_strtod_l+0x19e>
 800a134:	b91d      	cbnz	r5, 800a13e <_strtod_l+0x17e>
 800a136:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a138:	4302      	orrs	r2, r0
 800a13a:	d095      	beq.n	800a068 <_strtod_l+0xa8>
 800a13c:	2500      	movs	r5, #0
 800a13e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a140:	1c62      	adds	r2, r4, #1
 800a142:	9219      	str	r2, [sp, #100]	@ 0x64
 800a144:	7862      	ldrb	r2, [r4, #1]
 800a146:	2a2b      	cmp	r2, #43	@ 0x2b
 800a148:	d077      	beq.n	800a23a <_strtod_l+0x27a>
 800a14a:	2a2d      	cmp	r2, #45	@ 0x2d
 800a14c:	d07b      	beq.n	800a246 <_strtod_l+0x286>
 800a14e:	f04f 0c00 	mov.w	ip, #0
 800a152:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a156:	2909      	cmp	r1, #9
 800a158:	f240 8082 	bls.w	800a260 <_strtod_l+0x2a0>
 800a15c:	9419      	str	r4, [sp, #100]	@ 0x64
 800a15e:	f04f 0800 	mov.w	r8, #0
 800a162:	e0a2      	b.n	800a2aa <_strtod_l+0x2ea>
 800a164:	2300      	movs	r3, #0
 800a166:	e7c7      	b.n	800a0f8 <_strtod_l+0x138>
 800a168:	2f08      	cmp	r7, #8
 800a16a:	bfd5      	itete	le
 800a16c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a16e:	9908      	ldrgt	r1, [sp, #32]
 800a170:	fb02 3301 	mlale	r3, r2, r1, r3
 800a174:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a178:	f100 0001 	add.w	r0, r0, #1
 800a17c:	bfd4      	ite	le
 800a17e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a180:	9308      	strgt	r3, [sp, #32]
 800a182:	3701      	adds	r7, #1
 800a184:	9019      	str	r0, [sp, #100]	@ 0x64
 800a186:	e7bf      	b.n	800a108 <_strtod_l+0x148>
 800a188:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a18a:	1c5a      	adds	r2, r3, #1
 800a18c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a18e:	785a      	ldrb	r2, [r3, #1]
 800a190:	b37f      	cbz	r7, 800a1f2 <_strtod_l+0x232>
 800a192:	4681      	mov	r9, r0
 800a194:	463d      	mov	r5, r7
 800a196:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a19a:	2b09      	cmp	r3, #9
 800a19c:	d912      	bls.n	800a1c4 <_strtod_l+0x204>
 800a19e:	2301      	movs	r3, #1
 800a1a0:	e7c4      	b.n	800a12c <_strtod_l+0x16c>
 800a1a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1a4:	1c5a      	adds	r2, r3, #1
 800a1a6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a1a8:	785a      	ldrb	r2, [r3, #1]
 800a1aa:	3001      	adds	r0, #1
 800a1ac:	2a30      	cmp	r2, #48	@ 0x30
 800a1ae:	d0f8      	beq.n	800a1a2 <_strtod_l+0x1e2>
 800a1b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a1b4:	2b08      	cmp	r3, #8
 800a1b6:	f200 84d3 	bhi.w	800ab60 <_strtod_l+0xba0>
 800a1ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a1bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800a1be:	4681      	mov	r9, r0
 800a1c0:	2000      	movs	r0, #0
 800a1c2:	4605      	mov	r5, r0
 800a1c4:	3a30      	subs	r2, #48	@ 0x30
 800a1c6:	f100 0301 	add.w	r3, r0, #1
 800a1ca:	d02a      	beq.n	800a222 <_strtod_l+0x262>
 800a1cc:	4499      	add	r9, r3
 800a1ce:	eb00 0c05 	add.w	ip, r0, r5
 800a1d2:	462b      	mov	r3, r5
 800a1d4:	210a      	movs	r1, #10
 800a1d6:	4563      	cmp	r3, ip
 800a1d8:	d10d      	bne.n	800a1f6 <_strtod_l+0x236>
 800a1da:	1c69      	adds	r1, r5, #1
 800a1dc:	4401      	add	r1, r0
 800a1de:	4428      	add	r0, r5
 800a1e0:	2808      	cmp	r0, #8
 800a1e2:	dc16      	bgt.n	800a212 <_strtod_l+0x252>
 800a1e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a1e6:	230a      	movs	r3, #10
 800a1e8:	fb03 2300 	mla	r3, r3, r0, r2
 800a1ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	e018      	b.n	800a224 <_strtod_l+0x264>
 800a1f2:	4638      	mov	r0, r7
 800a1f4:	e7da      	b.n	800a1ac <_strtod_l+0x1ec>
 800a1f6:	2b08      	cmp	r3, #8
 800a1f8:	f103 0301 	add.w	r3, r3, #1
 800a1fc:	dc03      	bgt.n	800a206 <_strtod_l+0x246>
 800a1fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a200:	434e      	muls	r6, r1
 800a202:	960a      	str	r6, [sp, #40]	@ 0x28
 800a204:	e7e7      	b.n	800a1d6 <_strtod_l+0x216>
 800a206:	2b10      	cmp	r3, #16
 800a208:	bfde      	ittt	le
 800a20a:	9e08      	ldrle	r6, [sp, #32]
 800a20c:	434e      	mulle	r6, r1
 800a20e:	9608      	strle	r6, [sp, #32]
 800a210:	e7e1      	b.n	800a1d6 <_strtod_l+0x216>
 800a212:	280f      	cmp	r0, #15
 800a214:	dceb      	bgt.n	800a1ee <_strtod_l+0x22e>
 800a216:	9808      	ldr	r0, [sp, #32]
 800a218:	230a      	movs	r3, #10
 800a21a:	fb03 2300 	mla	r3, r3, r0, r2
 800a21e:	9308      	str	r3, [sp, #32]
 800a220:	e7e5      	b.n	800a1ee <_strtod_l+0x22e>
 800a222:	4629      	mov	r1, r5
 800a224:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a226:	1c50      	adds	r0, r2, #1
 800a228:	9019      	str	r0, [sp, #100]	@ 0x64
 800a22a:	7852      	ldrb	r2, [r2, #1]
 800a22c:	4618      	mov	r0, r3
 800a22e:	460d      	mov	r5, r1
 800a230:	e7b1      	b.n	800a196 <_strtod_l+0x1d6>
 800a232:	f04f 0900 	mov.w	r9, #0
 800a236:	2301      	movs	r3, #1
 800a238:	e77d      	b.n	800a136 <_strtod_l+0x176>
 800a23a:	f04f 0c00 	mov.w	ip, #0
 800a23e:	1ca2      	adds	r2, r4, #2
 800a240:	9219      	str	r2, [sp, #100]	@ 0x64
 800a242:	78a2      	ldrb	r2, [r4, #2]
 800a244:	e785      	b.n	800a152 <_strtod_l+0x192>
 800a246:	f04f 0c01 	mov.w	ip, #1
 800a24a:	e7f8      	b.n	800a23e <_strtod_l+0x27e>
 800a24c:	0800dc70 	.word	0x0800dc70
 800a250:	0800dc4d 	.word	0x0800dc4d
 800a254:	7ff00000 	.word	0x7ff00000
 800a258:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a25a:	1c51      	adds	r1, r2, #1
 800a25c:	9119      	str	r1, [sp, #100]	@ 0x64
 800a25e:	7852      	ldrb	r2, [r2, #1]
 800a260:	2a30      	cmp	r2, #48	@ 0x30
 800a262:	d0f9      	beq.n	800a258 <_strtod_l+0x298>
 800a264:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a268:	2908      	cmp	r1, #8
 800a26a:	f63f af78 	bhi.w	800a15e <_strtod_l+0x19e>
 800a26e:	3a30      	subs	r2, #48	@ 0x30
 800a270:	920e      	str	r2, [sp, #56]	@ 0x38
 800a272:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a274:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a276:	f04f 080a 	mov.w	r8, #10
 800a27a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a27c:	1c56      	adds	r6, r2, #1
 800a27e:	9619      	str	r6, [sp, #100]	@ 0x64
 800a280:	7852      	ldrb	r2, [r2, #1]
 800a282:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a286:	f1be 0f09 	cmp.w	lr, #9
 800a28a:	d939      	bls.n	800a300 <_strtod_l+0x340>
 800a28c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a28e:	1a76      	subs	r6, r6, r1
 800a290:	2e08      	cmp	r6, #8
 800a292:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a296:	dc03      	bgt.n	800a2a0 <_strtod_l+0x2e0>
 800a298:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a29a:	4588      	cmp	r8, r1
 800a29c:	bfa8      	it	ge
 800a29e:	4688      	movge	r8, r1
 800a2a0:	f1bc 0f00 	cmp.w	ip, #0
 800a2a4:	d001      	beq.n	800a2aa <_strtod_l+0x2ea>
 800a2a6:	f1c8 0800 	rsb	r8, r8, #0
 800a2aa:	2d00      	cmp	r5, #0
 800a2ac:	d14e      	bne.n	800a34c <_strtod_l+0x38c>
 800a2ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a2b0:	4308      	orrs	r0, r1
 800a2b2:	f47f aebe 	bne.w	800a032 <_strtod_l+0x72>
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	f47f aed6 	bne.w	800a068 <_strtod_l+0xa8>
 800a2bc:	2a69      	cmp	r2, #105	@ 0x69
 800a2be:	d028      	beq.n	800a312 <_strtod_l+0x352>
 800a2c0:	dc25      	bgt.n	800a30e <_strtod_l+0x34e>
 800a2c2:	2a49      	cmp	r2, #73	@ 0x49
 800a2c4:	d025      	beq.n	800a312 <_strtod_l+0x352>
 800a2c6:	2a4e      	cmp	r2, #78	@ 0x4e
 800a2c8:	f47f aece 	bne.w	800a068 <_strtod_l+0xa8>
 800a2cc:	499b      	ldr	r1, [pc, #620]	@ (800a53c <_strtod_l+0x57c>)
 800a2ce:	a819      	add	r0, sp, #100	@ 0x64
 800a2d0:	f001 feb0 	bl	800c034 <__match>
 800a2d4:	2800      	cmp	r0, #0
 800a2d6:	f43f aec7 	beq.w	800a068 <_strtod_l+0xa8>
 800a2da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	2b28      	cmp	r3, #40	@ 0x28
 800a2e0:	d12e      	bne.n	800a340 <_strtod_l+0x380>
 800a2e2:	4997      	ldr	r1, [pc, #604]	@ (800a540 <_strtod_l+0x580>)
 800a2e4:	aa1c      	add	r2, sp, #112	@ 0x70
 800a2e6:	a819      	add	r0, sp, #100	@ 0x64
 800a2e8:	f001 feb8 	bl	800c05c <__hexnan>
 800a2ec:	2805      	cmp	r0, #5
 800a2ee:	d127      	bne.n	800a340 <_strtod_l+0x380>
 800a2f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a2f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a2f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a2fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a2fe:	e698      	b.n	800a032 <_strtod_l+0x72>
 800a300:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a302:	fb08 2101 	mla	r1, r8, r1, r2
 800a306:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a30a:	920e      	str	r2, [sp, #56]	@ 0x38
 800a30c:	e7b5      	b.n	800a27a <_strtod_l+0x2ba>
 800a30e:	2a6e      	cmp	r2, #110	@ 0x6e
 800a310:	e7da      	b.n	800a2c8 <_strtod_l+0x308>
 800a312:	498c      	ldr	r1, [pc, #560]	@ (800a544 <_strtod_l+0x584>)
 800a314:	a819      	add	r0, sp, #100	@ 0x64
 800a316:	f001 fe8d 	bl	800c034 <__match>
 800a31a:	2800      	cmp	r0, #0
 800a31c:	f43f aea4 	beq.w	800a068 <_strtod_l+0xa8>
 800a320:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a322:	4989      	ldr	r1, [pc, #548]	@ (800a548 <_strtod_l+0x588>)
 800a324:	3b01      	subs	r3, #1
 800a326:	a819      	add	r0, sp, #100	@ 0x64
 800a328:	9319      	str	r3, [sp, #100]	@ 0x64
 800a32a:	f001 fe83 	bl	800c034 <__match>
 800a32e:	b910      	cbnz	r0, 800a336 <_strtod_l+0x376>
 800a330:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a332:	3301      	adds	r3, #1
 800a334:	9319      	str	r3, [sp, #100]	@ 0x64
 800a336:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800a558 <_strtod_l+0x598>
 800a33a:	f04f 0a00 	mov.w	sl, #0
 800a33e:	e678      	b.n	800a032 <_strtod_l+0x72>
 800a340:	4882      	ldr	r0, [pc, #520]	@ (800a54c <_strtod_l+0x58c>)
 800a342:	f001 fbe5 	bl	800bb10 <nan>
 800a346:	ec5b ab10 	vmov	sl, fp, d0
 800a34a:	e672      	b.n	800a032 <_strtod_l+0x72>
 800a34c:	eba8 0309 	sub.w	r3, r8, r9
 800a350:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a352:	9309      	str	r3, [sp, #36]	@ 0x24
 800a354:	2f00      	cmp	r7, #0
 800a356:	bf08      	it	eq
 800a358:	462f      	moveq	r7, r5
 800a35a:	2d10      	cmp	r5, #16
 800a35c:	462c      	mov	r4, r5
 800a35e:	bfa8      	it	ge
 800a360:	2410      	movge	r4, #16
 800a362:	f7f6 f8cf 	bl	8000504 <__aeabi_ui2d>
 800a366:	2d09      	cmp	r5, #9
 800a368:	4682      	mov	sl, r0
 800a36a:	468b      	mov	fp, r1
 800a36c:	dc13      	bgt.n	800a396 <_strtod_l+0x3d6>
 800a36e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a370:	2b00      	cmp	r3, #0
 800a372:	f43f ae5e 	beq.w	800a032 <_strtod_l+0x72>
 800a376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a378:	dd78      	ble.n	800a46c <_strtod_l+0x4ac>
 800a37a:	2b16      	cmp	r3, #22
 800a37c:	dc5f      	bgt.n	800a43e <_strtod_l+0x47e>
 800a37e:	4974      	ldr	r1, [pc, #464]	@ (800a550 <_strtod_l+0x590>)
 800a380:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a384:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a388:	4652      	mov	r2, sl
 800a38a:	465b      	mov	r3, fp
 800a38c:	f7f6 f934 	bl	80005f8 <__aeabi_dmul>
 800a390:	4682      	mov	sl, r0
 800a392:	468b      	mov	fp, r1
 800a394:	e64d      	b.n	800a032 <_strtod_l+0x72>
 800a396:	4b6e      	ldr	r3, [pc, #440]	@ (800a550 <_strtod_l+0x590>)
 800a398:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a39c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a3a0:	f7f6 f92a 	bl	80005f8 <__aeabi_dmul>
 800a3a4:	4682      	mov	sl, r0
 800a3a6:	9808      	ldr	r0, [sp, #32]
 800a3a8:	468b      	mov	fp, r1
 800a3aa:	f7f6 f8ab 	bl	8000504 <__aeabi_ui2d>
 800a3ae:	4602      	mov	r2, r0
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	4650      	mov	r0, sl
 800a3b4:	4659      	mov	r1, fp
 800a3b6:	f7f5 ff69 	bl	800028c <__adddf3>
 800a3ba:	2d0f      	cmp	r5, #15
 800a3bc:	4682      	mov	sl, r0
 800a3be:	468b      	mov	fp, r1
 800a3c0:	ddd5      	ble.n	800a36e <_strtod_l+0x3ae>
 800a3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3c4:	1b2c      	subs	r4, r5, r4
 800a3c6:	441c      	add	r4, r3
 800a3c8:	2c00      	cmp	r4, #0
 800a3ca:	f340 8096 	ble.w	800a4fa <_strtod_l+0x53a>
 800a3ce:	f014 030f 	ands.w	r3, r4, #15
 800a3d2:	d00a      	beq.n	800a3ea <_strtod_l+0x42a>
 800a3d4:	495e      	ldr	r1, [pc, #376]	@ (800a550 <_strtod_l+0x590>)
 800a3d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a3da:	4652      	mov	r2, sl
 800a3dc:	465b      	mov	r3, fp
 800a3de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3e2:	f7f6 f909 	bl	80005f8 <__aeabi_dmul>
 800a3e6:	4682      	mov	sl, r0
 800a3e8:	468b      	mov	fp, r1
 800a3ea:	f034 040f 	bics.w	r4, r4, #15
 800a3ee:	d073      	beq.n	800a4d8 <_strtod_l+0x518>
 800a3f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a3f4:	dd48      	ble.n	800a488 <_strtod_l+0x4c8>
 800a3f6:	2400      	movs	r4, #0
 800a3f8:	46a0      	mov	r8, r4
 800a3fa:	940a      	str	r4, [sp, #40]	@ 0x28
 800a3fc:	46a1      	mov	r9, r4
 800a3fe:	9a05      	ldr	r2, [sp, #20]
 800a400:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800a558 <_strtod_l+0x598>
 800a404:	2322      	movs	r3, #34	@ 0x22
 800a406:	6013      	str	r3, [r2, #0]
 800a408:	f04f 0a00 	mov.w	sl, #0
 800a40c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f43f ae0f 	beq.w	800a032 <_strtod_l+0x72>
 800a414:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a416:	9805      	ldr	r0, [sp, #20]
 800a418:	f001 ff0e 	bl	800c238 <_Bfree>
 800a41c:	9805      	ldr	r0, [sp, #20]
 800a41e:	4649      	mov	r1, r9
 800a420:	f001 ff0a 	bl	800c238 <_Bfree>
 800a424:	9805      	ldr	r0, [sp, #20]
 800a426:	4641      	mov	r1, r8
 800a428:	f001 ff06 	bl	800c238 <_Bfree>
 800a42c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a42e:	9805      	ldr	r0, [sp, #20]
 800a430:	f001 ff02 	bl	800c238 <_Bfree>
 800a434:	9805      	ldr	r0, [sp, #20]
 800a436:	4621      	mov	r1, r4
 800a438:	f001 fefe 	bl	800c238 <_Bfree>
 800a43c:	e5f9      	b.n	800a032 <_strtod_l+0x72>
 800a43e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a440:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a444:	4293      	cmp	r3, r2
 800a446:	dbbc      	blt.n	800a3c2 <_strtod_l+0x402>
 800a448:	4c41      	ldr	r4, [pc, #260]	@ (800a550 <_strtod_l+0x590>)
 800a44a:	f1c5 050f 	rsb	r5, r5, #15
 800a44e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a452:	4652      	mov	r2, sl
 800a454:	465b      	mov	r3, fp
 800a456:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a45a:	f7f6 f8cd 	bl	80005f8 <__aeabi_dmul>
 800a45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a460:	1b5d      	subs	r5, r3, r5
 800a462:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a466:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a46a:	e78f      	b.n	800a38c <_strtod_l+0x3cc>
 800a46c:	3316      	adds	r3, #22
 800a46e:	dba8      	blt.n	800a3c2 <_strtod_l+0x402>
 800a470:	4b37      	ldr	r3, [pc, #220]	@ (800a550 <_strtod_l+0x590>)
 800a472:	eba9 0808 	sub.w	r8, r9, r8
 800a476:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a47a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a47e:	4650      	mov	r0, sl
 800a480:	4659      	mov	r1, fp
 800a482:	f7f6 f9e3 	bl	800084c <__aeabi_ddiv>
 800a486:	e783      	b.n	800a390 <_strtod_l+0x3d0>
 800a488:	4b32      	ldr	r3, [pc, #200]	@ (800a554 <_strtod_l+0x594>)
 800a48a:	9308      	str	r3, [sp, #32]
 800a48c:	2300      	movs	r3, #0
 800a48e:	1124      	asrs	r4, r4, #4
 800a490:	4650      	mov	r0, sl
 800a492:	4659      	mov	r1, fp
 800a494:	461e      	mov	r6, r3
 800a496:	2c01      	cmp	r4, #1
 800a498:	dc21      	bgt.n	800a4de <_strtod_l+0x51e>
 800a49a:	b10b      	cbz	r3, 800a4a0 <_strtod_l+0x4e0>
 800a49c:	4682      	mov	sl, r0
 800a49e:	468b      	mov	fp, r1
 800a4a0:	492c      	ldr	r1, [pc, #176]	@ (800a554 <_strtod_l+0x594>)
 800a4a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a4a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a4aa:	4652      	mov	r2, sl
 800a4ac:	465b      	mov	r3, fp
 800a4ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4b2:	f7f6 f8a1 	bl	80005f8 <__aeabi_dmul>
 800a4b6:	4b28      	ldr	r3, [pc, #160]	@ (800a558 <_strtod_l+0x598>)
 800a4b8:	460a      	mov	r2, r1
 800a4ba:	400b      	ands	r3, r1
 800a4bc:	4927      	ldr	r1, [pc, #156]	@ (800a55c <_strtod_l+0x59c>)
 800a4be:	428b      	cmp	r3, r1
 800a4c0:	4682      	mov	sl, r0
 800a4c2:	d898      	bhi.n	800a3f6 <_strtod_l+0x436>
 800a4c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a4c8:	428b      	cmp	r3, r1
 800a4ca:	bf86      	itte	hi
 800a4cc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800a560 <_strtod_l+0x5a0>
 800a4d0:	f04f 3aff 	movhi.w	sl, #4294967295
 800a4d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a4d8:	2300      	movs	r3, #0
 800a4da:	9308      	str	r3, [sp, #32]
 800a4dc:	e07a      	b.n	800a5d4 <_strtod_l+0x614>
 800a4de:	07e2      	lsls	r2, r4, #31
 800a4e0:	d505      	bpl.n	800a4ee <_strtod_l+0x52e>
 800a4e2:	9b08      	ldr	r3, [sp, #32]
 800a4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e8:	f7f6 f886 	bl	80005f8 <__aeabi_dmul>
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	9a08      	ldr	r2, [sp, #32]
 800a4f0:	3208      	adds	r2, #8
 800a4f2:	3601      	adds	r6, #1
 800a4f4:	1064      	asrs	r4, r4, #1
 800a4f6:	9208      	str	r2, [sp, #32]
 800a4f8:	e7cd      	b.n	800a496 <_strtod_l+0x4d6>
 800a4fa:	d0ed      	beq.n	800a4d8 <_strtod_l+0x518>
 800a4fc:	4264      	negs	r4, r4
 800a4fe:	f014 020f 	ands.w	r2, r4, #15
 800a502:	d00a      	beq.n	800a51a <_strtod_l+0x55a>
 800a504:	4b12      	ldr	r3, [pc, #72]	@ (800a550 <_strtod_l+0x590>)
 800a506:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a50a:	4650      	mov	r0, sl
 800a50c:	4659      	mov	r1, fp
 800a50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a512:	f7f6 f99b 	bl	800084c <__aeabi_ddiv>
 800a516:	4682      	mov	sl, r0
 800a518:	468b      	mov	fp, r1
 800a51a:	1124      	asrs	r4, r4, #4
 800a51c:	d0dc      	beq.n	800a4d8 <_strtod_l+0x518>
 800a51e:	2c1f      	cmp	r4, #31
 800a520:	dd20      	ble.n	800a564 <_strtod_l+0x5a4>
 800a522:	2400      	movs	r4, #0
 800a524:	46a0      	mov	r8, r4
 800a526:	940a      	str	r4, [sp, #40]	@ 0x28
 800a528:	46a1      	mov	r9, r4
 800a52a:	9a05      	ldr	r2, [sp, #20]
 800a52c:	2322      	movs	r3, #34	@ 0x22
 800a52e:	f04f 0a00 	mov.w	sl, #0
 800a532:	f04f 0b00 	mov.w	fp, #0
 800a536:	6013      	str	r3, [r2, #0]
 800a538:	e768      	b.n	800a40c <_strtod_l+0x44c>
 800a53a:	bf00      	nop
 800a53c:	0800dc58 	.word	0x0800dc58
 800a540:	0800dc5c 	.word	0x0800dc5c
 800a544:	0800dc4f 	.word	0x0800dc4f
 800a548:	0800dc52 	.word	0x0800dc52
 800a54c:	0800e023 	.word	0x0800e023
 800a550:	0800df20 	.word	0x0800df20
 800a554:	0800def8 	.word	0x0800def8
 800a558:	7ff00000 	.word	0x7ff00000
 800a55c:	7ca00000 	.word	0x7ca00000
 800a560:	7fefffff 	.word	0x7fefffff
 800a564:	f014 0310 	ands.w	r3, r4, #16
 800a568:	bf18      	it	ne
 800a56a:	236a      	movne	r3, #106	@ 0x6a
 800a56c:	4ea9      	ldr	r6, [pc, #676]	@ (800a814 <_strtod_l+0x854>)
 800a56e:	9308      	str	r3, [sp, #32]
 800a570:	4650      	mov	r0, sl
 800a572:	4659      	mov	r1, fp
 800a574:	2300      	movs	r3, #0
 800a576:	07e2      	lsls	r2, r4, #31
 800a578:	d504      	bpl.n	800a584 <_strtod_l+0x5c4>
 800a57a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a57e:	f7f6 f83b 	bl	80005f8 <__aeabi_dmul>
 800a582:	2301      	movs	r3, #1
 800a584:	1064      	asrs	r4, r4, #1
 800a586:	f106 0608 	add.w	r6, r6, #8
 800a58a:	d1f4      	bne.n	800a576 <_strtod_l+0x5b6>
 800a58c:	b10b      	cbz	r3, 800a592 <_strtod_l+0x5d2>
 800a58e:	4682      	mov	sl, r0
 800a590:	468b      	mov	fp, r1
 800a592:	9b08      	ldr	r3, [sp, #32]
 800a594:	b1b3      	cbz	r3, 800a5c4 <_strtod_l+0x604>
 800a596:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a59a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	4659      	mov	r1, fp
 800a5a2:	dd0f      	ble.n	800a5c4 <_strtod_l+0x604>
 800a5a4:	2b1f      	cmp	r3, #31
 800a5a6:	dd55      	ble.n	800a654 <_strtod_l+0x694>
 800a5a8:	2b34      	cmp	r3, #52	@ 0x34
 800a5aa:	bfde      	ittt	le
 800a5ac:	f04f 33ff 	movle.w	r3, #4294967295
 800a5b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a5b4:	4093      	lslle	r3, r2
 800a5b6:	f04f 0a00 	mov.w	sl, #0
 800a5ba:	bfcc      	ite	gt
 800a5bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a5c0:	ea03 0b01 	andle.w	fp, r3, r1
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	4650      	mov	r0, sl
 800a5ca:	4659      	mov	r1, fp
 800a5cc:	f7f6 fa7c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5d0:	2800      	cmp	r0, #0
 800a5d2:	d1a6      	bne.n	800a522 <_strtod_l+0x562>
 800a5d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5d6:	9300      	str	r3, [sp, #0]
 800a5d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a5da:	9805      	ldr	r0, [sp, #20]
 800a5dc:	462b      	mov	r3, r5
 800a5de:	463a      	mov	r2, r7
 800a5e0:	f001 fe92 	bl	800c308 <__s2b>
 800a5e4:	900a      	str	r0, [sp, #40]	@ 0x28
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	f43f af05 	beq.w	800a3f6 <_strtod_l+0x436>
 800a5ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5ee:	2a00      	cmp	r2, #0
 800a5f0:	eba9 0308 	sub.w	r3, r9, r8
 800a5f4:	bfa8      	it	ge
 800a5f6:	2300      	movge	r3, #0
 800a5f8:	9312      	str	r3, [sp, #72]	@ 0x48
 800a5fa:	2400      	movs	r4, #0
 800a5fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a600:	9316      	str	r3, [sp, #88]	@ 0x58
 800a602:	46a0      	mov	r8, r4
 800a604:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a606:	9805      	ldr	r0, [sp, #20]
 800a608:	6859      	ldr	r1, [r3, #4]
 800a60a:	f001 fdd5 	bl	800c1b8 <_Balloc>
 800a60e:	4681      	mov	r9, r0
 800a610:	2800      	cmp	r0, #0
 800a612:	f43f aef4 	beq.w	800a3fe <_strtod_l+0x43e>
 800a616:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a618:	691a      	ldr	r2, [r3, #16]
 800a61a:	3202      	adds	r2, #2
 800a61c:	f103 010c 	add.w	r1, r3, #12
 800a620:	0092      	lsls	r2, r2, #2
 800a622:	300c      	adds	r0, #12
 800a624:	f7ff fba1 	bl	8009d6a <memcpy>
 800a628:	ec4b ab10 	vmov	d0, sl, fp
 800a62c:	9805      	ldr	r0, [sp, #20]
 800a62e:	aa1c      	add	r2, sp, #112	@ 0x70
 800a630:	a91b      	add	r1, sp, #108	@ 0x6c
 800a632:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a636:	f002 f9a3 	bl	800c980 <__d2b>
 800a63a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a63c:	2800      	cmp	r0, #0
 800a63e:	f43f aede 	beq.w	800a3fe <_strtod_l+0x43e>
 800a642:	9805      	ldr	r0, [sp, #20]
 800a644:	2101      	movs	r1, #1
 800a646:	f001 fef5 	bl	800c434 <__i2b>
 800a64a:	4680      	mov	r8, r0
 800a64c:	b948      	cbnz	r0, 800a662 <_strtod_l+0x6a2>
 800a64e:	f04f 0800 	mov.w	r8, #0
 800a652:	e6d4      	b.n	800a3fe <_strtod_l+0x43e>
 800a654:	f04f 32ff 	mov.w	r2, #4294967295
 800a658:	fa02 f303 	lsl.w	r3, r2, r3
 800a65c:	ea03 0a0a 	and.w	sl, r3, sl
 800a660:	e7b0      	b.n	800a5c4 <_strtod_l+0x604>
 800a662:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a664:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a666:	2d00      	cmp	r5, #0
 800a668:	bfab      	itete	ge
 800a66a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a66c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a66e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a670:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a672:	bfac      	ite	ge
 800a674:	18ef      	addge	r7, r5, r3
 800a676:	1b5e      	sublt	r6, r3, r5
 800a678:	9b08      	ldr	r3, [sp, #32]
 800a67a:	1aed      	subs	r5, r5, r3
 800a67c:	4415      	add	r5, r2
 800a67e:	4b66      	ldr	r3, [pc, #408]	@ (800a818 <_strtod_l+0x858>)
 800a680:	3d01      	subs	r5, #1
 800a682:	429d      	cmp	r5, r3
 800a684:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a688:	da50      	bge.n	800a72c <_strtod_l+0x76c>
 800a68a:	1b5b      	subs	r3, r3, r5
 800a68c:	2b1f      	cmp	r3, #31
 800a68e:	eba2 0203 	sub.w	r2, r2, r3
 800a692:	f04f 0101 	mov.w	r1, #1
 800a696:	dc3d      	bgt.n	800a714 <_strtod_l+0x754>
 800a698:	fa01 f303 	lsl.w	r3, r1, r3
 800a69c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a69e:	2300      	movs	r3, #0
 800a6a0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a6a2:	18bd      	adds	r5, r7, r2
 800a6a4:	9b08      	ldr	r3, [sp, #32]
 800a6a6:	42af      	cmp	r7, r5
 800a6a8:	4416      	add	r6, r2
 800a6aa:	441e      	add	r6, r3
 800a6ac:	463b      	mov	r3, r7
 800a6ae:	bfa8      	it	ge
 800a6b0:	462b      	movge	r3, r5
 800a6b2:	42b3      	cmp	r3, r6
 800a6b4:	bfa8      	it	ge
 800a6b6:	4633      	movge	r3, r6
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	bfc2      	ittt	gt
 800a6bc:	1aed      	subgt	r5, r5, r3
 800a6be:	1af6      	subgt	r6, r6, r3
 800a6c0:	1aff      	subgt	r7, r7, r3
 800a6c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	dd16      	ble.n	800a6f6 <_strtod_l+0x736>
 800a6c8:	4641      	mov	r1, r8
 800a6ca:	9805      	ldr	r0, [sp, #20]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	f001 ff71 	bl	800c5b4 <__pow5mult>
 800a6d2:	4680      	mov	r8, r0
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	d0ba      	beq.n	800a64e <_strtod_l+0x68e>
 800a6d8:	4601      	mov	r1, r0
 800a6da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a6dc:	9805      	ldr	r0, [sp, #20]
 800a6de:	f001 febf 	bl	800c460 <__multiply>
 800a6e2:	900e      	str	r0, [sp, #56]	@ 0x38
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	f43f ae8a 	beq.w	800a3fe <_strtod_l+0x43e>
 800a6ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a6ec:	9805      	ldr	r0, [sp, #20]
 800a6ee:	f001 fda3 	bl	800c238 <_Bfree>
 800a6f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a6f4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a6f6:	2d00      	cmp	r5, #0
 800a6f8:	dc1d      	bgt.n	800a736 <_strtod_l+0x776>
 800a6fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	dd23      	ble.n	800a748 <_strtod_l+0x788>
 800a700:	4649      	mov	r1, r9
 800a702:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a704:	9805      	ldr	r0, [sp, #20]
 800a706:	f001 ff55 	bl	800c5b4 <__pow5mult>
 800a70a:	4681      	mov	r9, r0
 800a70c:	b9e0      	cbnz	r0, 800a748 <_strtod_l+0x788>
 800a70e:	f04f 0900 	mov.w	r9, #0
 800a712:	e674      	b.n	800a3fe <_strtod_l+0x43e>
 800a714:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a718:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a71c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a720:	35e2      	adds	r5, #226	@ 0xe2
 800a722:	fa01 f305 	lsl.w	r3, r1, r5
 800a726:	9310      	str	r3, [sp, #64]	@ 0x40
 800a728:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a72a:	e7ba      	b.n	800a6a2 <_strtod_l+0x6e2>
 800a72c:	2300      	movs	r3, #0
 800a72e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a730:	2301      	movs	r3, #1
 800a732:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a734:	e7b5      	b.n	800a6a2 <_strtod_l+0x6e2>
 800a736:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a738:	9805      	ldr	r0, [sp, #20]
 800a73a:	462a      	mov	r2, r5
 800a73c:	f001 ff94 	bl	800c668 <__lshift>
 800a740:	901a      	str	r0, [sp, #104]	@ 0x68
 800a742:	2800      	cmp	r0, #0
 800a744:	d1d9      	bne.n	800a6fa <_strtod_l+0x73a>
 800a746:	e65a      	b.n	800a3fe <_strtod_l+0x43e>
 800a748:	2e00      	cmp	r6, #0
 800a74a:	dd07      	ble.n	800a75c <_strtod_l+0x79c>
 800a74c:	4649      	mov	r1, r9
 800a74e:	9805      	ldr	r0, [sp, #20]
 800a750:	4632      	mov	r2, r6
 800a752:	f001 ff89 	bl	800c668 <__lshift>
 800a756:	4681      	mov	r9, r0
 800a758:	2800      	cmp	r0, #0
 800a75a:	d0d8      	beq.n	800a70e <_strtod_l+0x74e>
 800a75c:	2f00      	cmp	r7, #0
 800a75e:	dd08      	ble.n	800a772 <_strtod_l+0x7b2>
 800a760:	4641      	mov	r1, r8
 800a762:	9805      	ldr	r0, [sp, #20]
 800a764:	463a      	mov	r2, r7
 800a766:	f001 ff7f 	bl	800c668 <__lshift>
 800a76a:	4680      	mov	r8, r0
 800a76c:	2800      	cmp	r0, #0
 800a76e:	f43f ae46 	beq.w	800a3fe <_strtod_l+0x43e>
 800a772:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a774:	9805      	ldr	r0, [sp, #20]
 800a776:	464a      	mov	r2, r9
 800a778:	f001 fffe 	bl	800c778 <__mdiff>
 800a77c:	4604      	mov	r4, r0
 800a77e:	2800      	cmp	r0, #0
 800a780:	f43f ae3d 	beq.w	800a3fe <_strtod_l+0x43e>
 800a784:	68c3      	ldr	r3, [r0, #12]
 800a786:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a788:	2300      	movs	r3, #0
 800a78a:	60c3      	str	r3, [r0, #12]
 800a78c:	4641      	mov	r1, r8
 800a78e:	f001 ffd7 	bl	800c740 <__mcmp>
 800a792:	2800      	cmp	r0, #0
 800a794:	da46      	bge.n	800a824 <_strtod_l+0x864>
 800a796:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a798:	ea53 030a 	orrs.w	r3, r3, sl
 800a79c:	d16c      	bne.n	800a878 <_strtod_l+0x8b8>
 800a79e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d168      	bne.n	800a878 <_strtod_l+0x8b8>
 800a7a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a7aa:	0d1b      	lsrs	r3, r3, #20
 800a7ac:	051b      	lsls	r3, r3, #20
 800a7ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a7b2:	d961      	bls.n	800a878 <_strtod_l+0x8b8>
 800a7b4:	6963      	ldr	r3, [r4, #20]
 800a7b6:	b913      	cbnz	r3, 800a7be <_strtod_l+0x7fe>
 800a7b8:	6923      	ldr	r3, [r4, #16]
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	dd5c      	ble.n	800a878 <_strtod_l+0x8b8>
 800a7be:	4621      	mov	r1, r4
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	9805      	ldr	r0, [sp, #20]
 800a7c4:	f001 ff50 	bl	800c668 <__lshift>
 800a7c8:	4641      	mov	r1, r8
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	f001 ffb8 	bl	800c740 <__mcmp>
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	dd51      	ble.n	800a878 <_strtod_l+0x8b8>
 800a7d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a7d8:	9a08      	ldr	r2, [sp, #32]
 800a7da:	0d1b      	lsrs	r3, r3, #20
 800a7dc:	051b      	lsls	r3, r3, #20
 800a7de:	2a00      	cmp	r2, #0
 800a7e0:	d06b      	beq.n	800a8ba <_strtod_l+0x8fa>
 800a7e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a7e6:	d868      	bhi.n	800a8ba <_strtod_l+0x8fa>
 800a7e8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a7ec:	f67f ae9d 	bls.w	800a52a <_strtod_l+0x56a>
 800a7f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a81c <_strtod_l+0x85c>)
 800a7f2:	4650      	mov	r0, sl
 800a7f4:	4659      	mov	r1, fp
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f7f5 fefe 	bl	80005f8 <__aeabi_dmul>
 800a7fc:	4b08      	ldr	r3, [pc, #32]	@ (800a820 <_strtod_l+0x860>)
 800a7fe:	400b      	ands	r3, r1
 800a800:	4682      	mov	sl, r0
 800a802:	468b      	mov	fp, r1
 800a804:	2b00      	cmp	r3, #0
 800a806:	f47f ae05 	bne.w	800a414 <_strtod_l+0x454>
 800a80a:	9a05      	ldr	r2, [sp, #20]
 800a80c:	2322      	movs	r3, #34	@ 0x22
 800a80e:	6013      	str	r3, [r2, #0]
 800a810:	e600      	b.n	800a414 <_strtod_l+0x454>
 800a812:	bf00      	nop
 800a814:	0800dc88 	.word	0x0800dc88
 800a818:	fffffc02 	.word	0xfffffc02
 800a81c:	39500000 	.word	0x39500000
 800a820:	7ff00000 	.word	0x7ff00000
 800a824:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a828:	d165      	bne.n	800a8f6 <_strtod_l+0x936>
 800a82a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a82c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a830:	b35a      	cbz	r2, 800a88a <_strtod_l+0x8ca>
 800a832:	4a9f      	ldr	r2, [pc, #636]	@ (800aab0 <_strtod_l+0xaf0>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d12b      	bne.n	800a890 <_strtod_l+0x8d0>
 800a838:	9b08      	ldr	r3, [sp, #32]
 800a83a:	4651      	mov	r1, sl
 800a83c:	b303      	cbz	r3, 800a880 <_strtod_l+0x8c0>
 800a83e:	4b9d      	ldr	r3, [pc, #628]	@ (800aab4 <_strtod_l+0xaf4>)
 800a840:	465a      	mov	r2, fp
 800a842:	4013      	ands	r3, r2
 800a844:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a848:	f04f 32ff 	mov.w	r2, #4294967295
 800a84c:	d81b      	bhi.n	800a886 <_strtod_l+0x8c6>
 800a84e:	0d1b      	lsrs	r3, r3, #20
 800a850:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a854:	fa02 f303 	lsl.w	r3, r2, r3
 800a858:	4299      	cmp	r1, r3
 800a85a:	d119      	bne.n	800a890 <_strtod_l+0x8d0>
 800a85c:	4b96      	ldr	r3, [pc, #600]	@ (800aab8 <_strtod_l+0xaf8>)
 800a85e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a860:	429a      	cmp	r2, r3
 800a862:	d102      	bne.n	800a86a <_strtod_l+0x8aa>
 800a864:	3101      	adds	r1, #1
 800a866:	f43f adca 	beq.w	800a3fe <_strtod_l+0x43e>
 800a86a:	4b92      	ldr	r3, [pc, #584]	@ (800aab4 <_strtod_l+0xaf4>)
 800a86c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a86e:	401a      	ands	r2, r3
 800a870:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a874:	f04f 0a00 	mov.w	sl, #0
 800a878:	9b08      	ldr	r3, [sp, #32]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d1b8      	bne.n	800a7f0 <_strtod_l+0x830>
 800a87e:	e5c9      	b.n	800a414 <_strtod_l+0x454>
 800a880:	f04f 33ff 	mov.w	r3, #4294967295
 800a884:	e7e8      	b.n	800a858 <_strtod_l+0x898>
 800a886:	4613      	mov	r3, r2
 800a888:	e7e6      	b.n	800a858 <_strtod_l+0x898>
 800a88a:	ea53 030a 	orrs.w	r3, r3, sl
 800a88e:	d0a1      	beq.n	800a7d4 <_strtod_l+0x814>
 800a890:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a892:	b1db      	cbz	r3, 800a8cc <_strtod_l+0x90c>
 800a894:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a896:	4213      	tst	r3, r2
 800a898:	d0ee      	beq.n	800a878 <_strtod_l+0x8b8>
 800a89a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a89c:	9a08      	ldr	r2, [sp, #32]
 800a89e:	4650      	mov	r0, sl
 800a8a0:	4659      	mov	r1, fp
 800a8a2:	b1bb      	cbz	r3, 800a8d4 <_strtod_l+0x914>
 800a8a4:	f7ff fb6e 	bl	8009f84 <sulp>
 800a8a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8ac:	ec53 2b10 	vmov	r2, r3, d0
 800a8b0:	f7f5 fcec 	bl	800028c <__adddf3>
 800a8b4:	4682      	mov	sl, r0
 800a8b6:	468b      	mov	fp, r1
 800a8b8:	e7de      	b.n	800a878 <_strtod_l+0x8b8>
 800a8ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a8be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a8c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a8c6:	f04f 3aff 	mov.w	sl, #4294967295
 800a8ca:	e7d5      	b.n	800a878 <_strtod_l+0x8b8>
 800a8cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a8ce:	ea13 0f0a 	tst.w	r3, sl
 800a8d2:	e7e1      	b.n	800a898 <_strtod_l+0x8d8>
 800a8d4:	f7ff fb56 	bl	8009f84 <sulp>
 800a8d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a8dc:	ec53 2b10 	vmov	r2, r3, d0
 800a8e0:	f7f5 fcd2 	bl	8000288 <__aeabi_dsub>
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	4682      	mov	sl, r0
 800a8ea:	468b      	mov	fp, r1
 800a8ec:	f7f6 f8ec 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d0c1      	beq.n	800a878 <_strtod_l+0x8b8>
 800a8f4:	e619      	b.n	800a52a <_strtod_l+0x56a>
 800a8f6:	4641      	mov	r1, r8
 800a8f8:	4620      	mov	r0, r4
 800a8fa:	f002 f899 	bl	800ca30 <__ratio>
 800a8fe:	ec57 6b10 	vmov	r6, r7, d0
 800a902:	2200      	movs	r2, #0
 800a904:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a908:	4630      	mov	r0, r6
 800a90a:	4639      	mov	r1, r7
 800a90c:	f7f6 f8f0 	bl	8000af0 <__aeabi_dcmple>
 800a910:	2800      	cmp	r0, #0
 800a912:	d06f      	beq.n	800a9f4 <_strtod_l+0xa34>
 800a914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a916:	2b00      	cmp	r3, #0
 800a918:	d17a      	bne.n	800aa10 <_strtod_l+0xa50>
 800a91a:	f1ba 0f00 	cmp.w	sl, #0
 800a91e:	d158      	bne.n	800a9d2 <_strtod_l+0xa12>
 800a920:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a922:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a926:	2b00      	cmp	r3, #0
 800a928:	d15a      	bne.n	800a9e0 <_strtod_l+0xa20>
 800a92a:	4b64      	ldr	r3, [pc, #400]	@ (800aabc <_strtod_l+0xafc>)
 800a92c:	2200      	movs	r2, #0
 800a92e:	4630      	mov	r0, r6
 800a930:	4639      	mov	r1, r7
 800a932:	f7f6 f8d3 	bl	8000adc <__aeabi_dcmplt>
 800a936:	2800      	cmp	r0, #0
 800a938:	d159      	bne.n	800a9ee <_strtod_l+0xa2e>
 800a93a:	4630      	mov	r0, r6
 800a93c:	4639      	mov	r1, r7
 800a93e:	4b60      	ldr	r3, [pc, #384]	@ (800aac0 <_strtod_l+0xb00>)
 800a940:	2200      	movs	r2, #0
 800a942:	f7f5 fe59 	bl	80005f8 <__aeabi_dmul>
 800a946:	4606      	mov	r6, r0
 800a948:	460f      	mov	r7, r1
 800a94a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a94e:	9606      	str	r6, [sp, #24]
 800a950:	9307      	str	r3, [sp, #28]
 800a952:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a956:	4d57      	ldr	r5, [pc, #348]	@ (800aab4 <_strtod_l+0xaf4>)
 800a958:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a95c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a95e:	401d      	ands	r5, r3
 800a960:	4b58      	ldr	r3, [pc, #352]	@ (800aac4 <_strtod_l+0xb04>)
 800a962:	429d      	cmp	r5, r3
 800a964:	f040 80b2 	bne.w	800aacc <_strtod_l+0xb0c>
 800a968:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a96a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a96e:	ec4b ab10 	vmov	d0, sl, fp
 800a972:	f001 ff95 	bl	800c8a0 <__ulp>
 800a976:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a97a:	ec51 0b10 	vmov	r0, r1, d0
 800a97e:	f7f5 fe3b 	bl	80005f8 <__aeabi_dmul>
 800a982:	4652      	mov	r2, sl
 800a984:	465b      	mov	r3, fp
 800a986:	f7f5 fc81 	bl	800028c <__adddf3>
 800a98a:	460b      	mov	r3, r1
 800a98c:	4949      	ldr	r1, [pc, #292]	@ (800aab4 <_strtod_l+0xaf4>)
 800a98e:	4a4e      	ldr	r2, [pc, #312]	@ (800aac8 <_strtod_l+0xb08>)
 800a990:	4019      	ands	r1, r3
 800a992:	4291      	cmp	r1, r2
 800a994:	4682      	mov	sl, r0
 800a996:	d942      	bls.n	800aa1e <_strtod_l+0xa5e>
 800a998:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a99a:	4b47      	ldr	r3, [pc, #284]	@ (800aab8 <_strtod_l+0xaf8>)
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d103      	bne.n	800a9a8 <_strtod_l+0x9e8>
 800a9a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a9a2:	3301      	adds	r3, #1
 800a9a4:	f43f ad2b 	beq.w	800a3fe <_strtod_l+0x43e>
 800a9a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800aab8 <_strtod_l+0xaf8>
 800a9ac:	f04f 3aff 	mov.w	sl, #4294967295
 800a9b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a9b2:	9805      	ldr	r0, [sp, #20]
 800a9b4:	f001 fc40 	bl	800c238 <_Bfree>
 800a9b8:	9805      	ldr	r0, [sp, #20]
 800a9ba:	4649      	mov	r1, r9
 800a9bc:	f001 fc3c 	bl	800c238 <_Bfree>
 800a9c0:	9805      	ldr	r0, [sp, #20]
 800a9c2:	4641      	mov	r1, r8
 800a9c4:	f001 fc38 	bl	800c238 <_Bfree>
 800a9c8:	9805      	ldr	r0, [sp, #20]
 800a9ca:	4621      	mov	r1, r4
 800a9cc:	f001 fc34 	bl	800c238 <_Bfree>
 800a9d0:	e618      	b.n	800a604 <_strtod_l+0x644>
 800a9d2:	f1ba 0f01 	cmp.w	sl, #1
 800a9d6:	d103      	bne.n	800a9e0 <_strtod_l+0xa20>
 800a9d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f43f ada5 	beq.w	800a52a <_strtod_l+0x56a>
 800a9e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800aa90 <_strtod_l+0xad0>
 800a9e4:	4f35      	ldr	r7, [pc, #212]	@ (800aabc <_strtod_l+0xafc>)
 800a9e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9ea:	2600      	movs	r6, #0
 800a9ec:	e7b1      	b.n	800a952 <_strtod_l+0x992>
 800a9ee:	4f34      	ldr	r7, [pc, #208]	@ (800aac0 <_strtod_l+0xb00>)
 800a9f0:	2600      	movs	r6, #0
 800a9f2:	e7aa      	b.n	800a94a <_strtod_l+0x98a>
 800a9f4:	4b32      	ldr	r3, [pc, #200]	@ (800aac0 <_strtod_l+0xb00>)
 800a9f6:	4630      	mov	r0, r6
 800a9f8:	4639      	mov	r1, r7
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f7f5 fdfc 	bl	80005f8 <__aeabi_dmul>
 800aa00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa02:	4606      	mov	r6, r0
 800aa04:	460f      	mov	r7, r1
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d09f      	beq.n	800a94a <_strtod_l+0x98a>
 800aa0a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800aa0e:	e7a0      	b.n	800a952 <_strtod_l+0x992>
 800aa10:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800aa98 <_strtod_l+0xad8>
 800aa14:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aa18:	ec57 6b17 	vmov	r6, r7, d7
 800aa1c:	e799      	b.n	800a952 <_strtod_l+0x992>
 800aa1e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800aa22:	9b08      	ldr	r3, [sp, #32]
 800aa24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1c1      	bne.n	800a9b0 <_strtod_l+0x9f0>
 800aa2c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800aa30:	0d1b      	lsrs	r3, r3, #20
 800aa32:	051b      	lsls	r3, r3, #20
 800aa34:	429d      	cmp	r5, r3
 800aa36:	d1bb      	bne.n	800a9b0 <_strtod_l+0x9f0>
 800aa38:	4630      	mov	r0, r6
 800aa3a:	4639      	mov	r1, r7
 800aa3c:	f7f6 f914 	bl	8000c68 <__aeabi_d2lz>
 800aa40:	f7f5 fdac 	bl	800059c <__aeabi_l2d>
 800aa44:	4602      	mov	r2, r0
 800aa46:	460b      	mov	r3, r1
 800aa48:	4630      	mov	r0, r6
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	f7f5 fc1c 	bl	8000288 <__aeabi_dsub>
 800aa50:	460b      	mov	r3, r1
 800aa52:	4602      	mov	r2, r0
 800aa54:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800aa58:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800aa5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa5e:	ea46 060a 	orr.w	r6, r6, sl
 800aa62:	431e      	orrs	r6, r3
 800aa64:	d06f      	beq.n	800ab46 <_strtod_l+0xb86>
 800aa66:	a30e      	add	r3, pc, #56	@ (adr r3, 800aaa0 <_strtod_l+0xae0>)
 800aa68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6c:	f7f6 f836 	bl	8000adc <__aeabi_dcmplt>
 800aa70:	2800      	cmp	r0, #0
 800aa72:	f47f accf 	bne.w	800a414 <_strtod_l+0x454>
 800aa76:	a30c      	add	r3, pc, #48	@ (adr r3, 800aaa8 <_strtod_l+0xae8>)
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa80:	f7f6 f84a 	bl	8000b18 <__aeabi_dcmpgt>
 800aa84:	2800      	cmp	r0, #0
 800aa86:	d093      	beq.n	800a9b0 <_strtod_l+0x9f0>
 800aa88:	e4c4      	b.n	800a414 <_strtod_l+0x454>
 800aa8a:	bf00      	nop
 800aa8c:	f3af 8000 	nop.w
 800aa90:	00000000 	.word	0x00000000
 800aa94:	bff00000 	.word	0xbff00000
 800aa98:	00000000 	.word	0x00000000
 800aa9c:	3ff00000 	.word	0x3ff00000
 800aaa0:	94a03595 	.word	0x94a03595
 800aaa4:	3fdfffff 	.word	0x3fdfffff
 800aaa8:	35afe535 	.word	0x35afe535
 800aaac:	3fe00000 	.word	0x3fe00000
 800aab0:	000fffff 	.word	0x000fffff
 800aab4:	7ff00000 	.word	0x7ff00000
 800aab8:	7fefffff 	.word	0x7fefffff
 800aabc:	3ff00000 	.word	0x3ff00000
 800aac0:	3fe00000 	.word	0x3fe00000
 800aac4:	7fe00000 	.word	0x7fe00000
 800aac8:	7c9fffff 	.word	0x7c9fffff
 800aacc:	9b08      	ldr	r3, [sp, #32]
 800aace:	b323      	cbz	r3, 800ab1a <_strtod_l+0xb5a>
 800aad0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800aad4:	d821      	bhi.n	800ab1a <_strtod_l+0xb5a>
 800aad6:	a328      	add	r3, pc, #160	@ (adr r3, 800ab78 <_strtod_l+0xbb8>)
 800aad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aadc:	4630      	mov	r0, r6
 800aade:	4639      	mov	r1, r7
 800aae0:	f7f6 f806 	bl	8000af0 <__aeabi_dcmple>
 800aae4:	b1a0      	cbz	r0, 800ab10 <_strtod_l+0xb50>
 800aae6:	4639      	mov	r1, r7
 800aae8:	4630      	mov	r0, r6
 800aaea:	f7f6 f835 	bl	8000b58 <__aeabi_d2uiz>
 800aaee:	2801      	cmp	r0, #1
 800aaf0:	bf38      	it	cc
 800aaf2:	2001      	movcc	r0, #1
 800aaf4:	f7f5 fd06 	bl	8000504 <__aeabi_ui2d>
 800aaf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aafa:	4606      	mov	r6, r0
 800aafc:	460f      	mov	r7, r1
 800aafe:	b9fb      	cbnz	r3, 800ab40 <_strtod_l+0xb80>
 800ab00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ab04:	9014      	str	r0, [sp, #80]	@ 0x50
 800ab06:	9315      	str	r3, [sp, #84]	@ 0x54
 800ab08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ab0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ab10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ab12:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ab16:	1b5b      	subs	r3, r3, r5
 800ab18:	9311      	str	r3, [sp, #68]	@ 0x44
 800ab1a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ab1e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800ab22:	f001 febd 	bl	800c8a0 <__ulp>
 800ab26:	4650      	mov	r0, sl
 800ab28:	ec53 2b10 	vmov	r2, r3, d0
 800ab2c:	4659      	mov	r1, fp
 800ab2e:	f7f5 fd63 	bl	80005f8 <__aeabi_dmul>
 800ab32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ab36:	f7f5 fba9 	bl	800028c <__adddf3>
 800ab3a:	4682      	mov	sl, r0
 800ab3c:	468b      	mov	fp, r1
 800ab3e:	e770      	b.n	800aa22 <_strtod_l+0xa62>
 800ab40:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800ab44:	e7e0      	b.n	800ab08 <_strtod_l+0xb48>
 800ab46:	a30e      	add	r3, pc, #56	@ (adr r3, 800ab80 <_strtod_l+0xbc0>)
 800ab48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4c:	f7f5 ffc6 	bl	8000adc <__aeabi_dcmplt>
 800ab50:	e798      	b.n	800aa84 <_strtod_l+0xac4>
 800ab52:	2300      	movs	r3, #0
 800ab54:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ab56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800ab58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ab5a:	6013      	str	r3, [r2, #0]
 800ab5c:	f7ff ba6d 	b.w	800a03a <_strtod_l+0x7a>
 800ab60:	2a65      	cmp	r2, #101	@ 0x65
 800ab62:	f43f ab66 	beq.w	800a232 <_strtod_l+0x272>
 800ab66:	2a45      	cmp	r2, #69	@ 0x45
 800ab68:	f43f ab63 	beq.w	800a232 <_strtod_l+0x272>
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	f7ff bb9e 	b.w	800a2ae <_strtod_l+0x2ee>
 800ab72:	bf00      	nop
 800ab74:	f3af 8000 	nop.w
 800ab78:	ffc00000 	.word	0xffc00000
 800ab7c:	41dfffff 	.word	0x41dfffff
 800ab80:	94a03595 	.word	0x94a03595
 800ab84:	3fcfffff 	.word	0x3fcfffff

0800ab88 <_strtod_r>:
 800ab88:	4b01      	ldr	r3, [pc, #4]	@ (800ab90 <_strtod_r+0x8>)
 800ab8a:	f7ff ba19 	b.w	8009fc0 <_strtod_l>
 800ab8e:	bf00      	nop
 800ab90:	20000070 	.word	0x20000070

0800ab94 <_strtol_l.constprop.0>:
 800ab94:	2b24      	cmp	r3, #36	@ 0x24
 800ab96:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab9a:	4686      	mov	lr, r0
 800ab9c:	4690      	mov	r8, r2
 800ab9e:	d801      	bhi.n	800aba4 <_strtol_l.constprop.0+0x10>
 800aba0:	2b01      	cmp	r3, #1
 800aba2:	d106      	bne.n	800abb2 <_strtol_l.constprop.0+0x1e>
 800aba4:	f7ff f8b4 	bl	8009d10 <__errno>
 800aba8:	2316      	movs	r3, #22
 800abaa:	6003      	str	r3, [r0, #0]
 800abac:	2000      	movs	r0, #0
 800abae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb2:	4834      	ldr	r0, [pc, #208]	@ (800ac84 <_strtol_l.constprop.0+0xf0>)
 800abb4:	460d      	mov	r5, r1
 800abb6:	462a      	mov	r2, r5
 800abb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abbc:	5d06      	ldrb	r6, [r0, r4]
 800abbe:	f016 0608 	ands.w	r6, r6, #8
 800abc2:	d1f8      	bne.n	800abb6 <_strtol_l.constprop.0+0x22>
 800abc4:	2c2d      	cmp	r4, #45	@ 0x2d
 800abc6:	d12d      	bne.n	800ac24 <_strtol_l.constprop.0+0x90>
 800abc8:	782c      	ldrb	r4, [r5, #0]
 800abca:	2601      	movs	r6, #1
 800abcc:	1c95      	adds	r5, r2, #2
 800abce:	f033 0210 	bics.w	r2, r3, #16
 800abd2:	d109      	bne.n	800abe8 <_strtol_l.constprop.0+0x54>
 800abd4:	2c30      	cmp	r4, #48	@ 0x30
 800abd6:	d12a      	bne.n	800ac2e <_strtol_l.constprop.0+0x9a>
 800abd8:	782a      	ldrb	r2, [r5, #0]
 800abda:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800abde:	2a58      	cmp	r2, #88	@ 0x58
 800abe0:	d125      	bne.n	800ac2e <_strtol_l.constprop.0+0x9a>
 800abe2:	786c      	ldrb	r4, [r5, #1]
 800abe4:	2310      	movs	r3, #16
 800abe6:	3502      	adds	r5, #2
 800abe8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800abec:	f10c 3cff 	add.w	ip, ip, #4294967295
 800abf0:	2200      	movs	r2, #0
 800abf2:	fbbc f9f3 	udiv	r9, ip, r3
 800abf6:	4610      	mov	r0, r2
 800abf8:	fb03 ca19 	mls	sl, r3, r9, ip
 800abfc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ac00:	2f09      	cmp	r7, #9
 800ac02:	d81b      	bhi.n	800ac3c <_strtol_l.constprop.0+0xa8>
 800ac04:	463c      	mov	r4, r7
 800ac06:	42a3      	cmp	r3, r4
 800ac08:	dd27      	ble.n	800ac5a <_strtol_l.constprop.0+0xc6>
 800ac0a:	1c57      	adds	r7, r2, #1
 800ac0c:	d007      	beq.n	800ac1e <_strtol_l.constprop.0+0x8a>
 800ac0e:	4581      	cmp	r9, r0
 800ac10:	d320      	bcc.n	800ac54 <_strtol_l.constprop.0+0xc0>
 800ac12:	d101      	bne.n	800ac18 <_strtol_l.constprop.0+0x84>
 800ac14:	45a2      	cmp	sl, r4
 800ac16:	db1d      	blt.n	800ac54 <_strtol_l.constprop.0+0xc0>
 800ac18:	fb00 4003 	mla	r0, r0, r3, r4
 800ac1c:	2201      	movs	r2, #1
 800ac1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac22:	e7eb      	b.n	800abfc <_strtol_l.constprop.0+0x68>
 800ac24:	2c2b      	cmp	r4, #43	@ 0x2b
 800ac26:	bf04      	itt	eq
 800ac28:	782c      	ldrbeq	r4, [r5, #0]
 800ac2a:	1c95      	addeq	r5, r2, #2
 800ac2c:	e7cf      	b.n	800abce <_strtol_l.constprop.0+0x3a>
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1da      	bne.n	800abe8 <_strtol_l.constprop.0+0x54>
 800ac32:	2c30      	cmp	r4, #48	@ 0x30
 800ac34:	bf0c      	ite	eq
 800ac36:	2308      	moveq	r3, #8
 800ac38:	230a      	movne	r3, #10
 800ac3a:	e7d5      	b.n	800abe8 <_strtol_l.constprop.0+0x54>
 800ac3c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ac40:	2f19      	cmp	r7, #25
 800ac42:	d801      	bhi.n	800ac48 <_strtol_l.constprop.0+0xb4>
 800ac44:	3c37      	subs	r4, #55	@ 0x37
 800ac46:	e7de      	b.n	800ac06 <_strtol_l.constprop.0+0x72>
 800ac48:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ac4c:	2f19      	cmp	r7, #25
 800ac4e:	d804      	bhi.n	800ac5a <_strtol_l.constprop.0+0xc6>
 800ac50:	3c57      	subs	r4, #87	@ 0x57
 800ac52:	e7d8      	b.n	800ac06 <_strtol_l.constprop.0+0x72>
 800ac54:	f04f 32ff 	mov.w	r2, #4294967295
 800ac58:	e7e1      	b.n	800ac1e <_strtol_l.constprop.0+0x8a>
 800ac5a:	1c53      	adds	r3, r2, #1
 800ac5c:	d108      	bne.n	800ac70 <_strtol_l.constprop.0+0xdc>
 800ac5e:	2322      	movs	r3, #34	@ 0x22
 800ac60:	f8ce 3000 	str.w	r3, [lr]
 800ac64:	4660      	mov	r0, ip
 800ac66:	f1b8 0f00 	cmp.w	r8, #0
 800ac6a:	d0a0      	beq.n	800abae <_strtol_l.constprop.0+0x1a>
 800ac6c:	1e69      	subs	r1, r5, #1
 800ac6e:	e006      	b.n	800ac7e <_strtol_l.constprop.0+0xea>
 800ac70:	b106      	cbz	r6, 800ac74 <_strtol_l.constprop.0+0xe0>
 800ac72:	4240      	negs	r0, r0
 800ac74:	f1b8 0f00 	cmp.w	r8, #0
 800ac78:	d099      	beq.n	800abae <_strtol_l.constprop.0+0x1a>
 800ac7a:	2a00      	cmp	r2, #0
 800ac7c:	d1f6      	bne.n	800ac6c <_strtol_l.constprop.0+0xd8>
 800ac7e:	f8c8 1000 	str.w	r1, [r8]
 800ac82:	e794      	b.n	800abae <_strtol_l.constprop.0+0x1a>
 800ac84:	0800dcb1 	.word	0x0800dcb1

0800ac88 <_strtol_r>:
 800ac88:	f7ff bf84 	b.w	800ab94 <_strtol_l.constprop.0>

0800ac8c <__ssputs_r>:
 800ac8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac90:	688e      	ldr	r6, [r1, #8]
 800ac92:	461f      	mov	r7, r3
 800ac94:	42be      	cmp	r6, r7
 800ac96:	680b      	ldr	r3, [r1, #0]
 800ac98:	4682      	mov	sl, r0
 800ac9a:	460c      	mov	r4, r1
 800ac9c:	4690      	mov	r8, r2
 800ac9e:	d82d      	bhi.n	800acfc <__ssputs_r+0x70>
 800aca0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800aca4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800aca8:	d026      	beq.n	800acf8 <__ssputs_r+0x6c>
 800acaa:	6965      	ldr	r5, [r4, #20]
 800acac:	6909      	ldr	r1, [r1, #16]
 800acae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acb2:	eba3 0901 	sub.w	r9, r3, r1
 800acb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acba:	1c7b      	adds	r3, r7, #1
 800acbc:	444b      	add	r3, r9
 800acbe:	106d      	asrs	r5, r5, #1
 800acc0:	429d      	cmp	r5, r3
 800acc2:	bf38      	it	cc
 800acc4:	461d      	movcc	r5, r3
 800acc6:	0553      	lsls	r3, r2, #21
 800acc8:	d527      	bpl.n	800ad1a <__ssputs_r+0x8e>
 800acca:	4629      	mov	r1, r5
 800accc:	f7ff f8ce 	bl	8009e6c <_malloc_r>
 800acd0:	4606      	mov	r6, r0
 800acd2:	b360      	cbz	r0, 800ad2e <__ssputs_r+0xa2>
 800acd4:	6921      	ldr	r1, [r4, #16]
 800acd6:	464a      	mov	r2, r9
 800acd8:	f7ff f847 	bl	8009d6a <memcpy>
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ace2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ace6:	81a3      	strh	r3, [r4, #12]
 800ace8:	6126      	str	r6, [r4, #16]
 800acea:	6165      	str	r5, [r4, #20]
 800acec:	444e      	add	r6, r9
 800acee:	eba5 0509 	sub.w	r5, r5, r9
 800acf2:	6026      	str	r6, [r4, #0]
 800acf4:	60a5      	str	r5, [r4, #8]
 800acf6:	463e      	mov	r6, r7
 800acf8:	42be      	cmp	r6, r7
 800acfa:	d900      	bls.n	800acfe <__ssputs_r+0x72>
 800acfc:	463e      	mov	r6, r7
 800acfe:	6820      	ldr	r0, [r4, #0]
 800ad00:	4632      	mov	r2, r6
 800ad02:	4641      	mov	r1, r8
 800ad04:	f7fe ff78 	bl	8009bf8 <memmove>
 800ad08:	68a3      	ldr	r3, [r4, #8]
 800ad0a:	1b9b      	subs	r3, r3, r6
 800ad0c:	60a3      	str	r3, [r4, #8]
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	4433      	add	r3, r6
 800ad12:	6023      	str	r3, [r4, #0]
 800ad14:	2000      	movs	r0, #0
 800ad16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad1a:	462a      	mov	r2, r5
 800ad1c:	f001 fefe 	bl	800cb1c <_realloc_r>
 800ad20:	4606      	mov	r6, r0
 800ad22:	2800      	cmp	r0, #0
 800ad24:	d1e0      	bne.n	800ace8 <__ssputs_r+0x5c>
 800ad26:	6921      	ldr	r1, [r4, #16]
 800ad28:	4650      	mov	r0, sl
 800ad2a:	f7ff f833 	bl	8009d94 <_free_r>
 800ad2e:	230c      	movs	r3, #12
 800ad30:	f8ca 3000 	str.w	r3, [sl]
 800ad34:	89a3      	ldrh	r3, [r4, #12]
 800ad36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad3a:	81a3      	strh	r3, [r4, #12]
 800ad3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad40:	e7e9      	b.n	800ad16 <__ssputs_r+0x8a>
	...

0800ad44 <_svfiprintf_r>:
 800ad44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad48:	4698      	mov	r8, r3
 800ad4a:	898b      	ldrh	r3, [r1, #12]
 800ad4c:	061b      	lsls	r3, r3, #24
 800ad4e:	b09d      	sub	sp, #116	@ 0x74
 800ad50:	4607      	mov	r7, r0
 800ad52:	460d      	mov	r5, r1
 800ad54:	4614      	mov	r4, r2
 800ad56:	d510      	bpl.n	800ad7a <_svfiprintf_r+0x36>
 800ad58:	690b      	ldr	r3, [r1, #16]
 800ad5a:	b973      	cbnz	r3, 800ad7a <_svfiprintf_r+0x36>
 800ad5c:	2140      	movs	r1, #64	@ 0x40
 800ad5e:	f7ff f885 	bl	8009e6c <_malloc_r>
 800ad62:	6028      	str	r0, [r5, #0]
 800ad64:	6128      	str	r0, [r5, #16]
 800ad66:	b930      	cbnz	r0, 800ad76 <_svfiprintf_r+0x32>
 800ad68:	230c      	movs	r3, #12
 800ad6a:	603b      	str	r3, [r7, #0]
 800ad6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad70:	b01d      	add	sp, #116	@ 0x74
 800ad72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad76:	2340      	movs	r3, #64	@ 0x40
 800ad78:	616b      	str	r3, [r5, #20]
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad7e:	2320      	movs	r3, #32
 800ad80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ad84:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad88:	2330      	movs	r3, #48	@ 0x30
 800ad8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af28 <_svfiprintf_r+0x1e4>
 800ad8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ad92:	f04f 0901 	mov.w	r9, #1
 800ad96:	4623      	mov	r3, r4
 800ad98:	469a      	mov	sl, r3
 800ad9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad9e:	b10a      	cbz	r2, 800ada4 <_svfiprintf_r+0x60>
 800ada0:	2a25      	cmp	r2, #37	@ 0x25
 800ada2:	d1f9      	bne.n	800ad98 <_svfiprintf_r+0x54>
 800ada4:	ebba 0b04 	subs.w	fp, sl, r4
 800ada8:	d00b      	beq.n	800adc2 <_svfiprintf_r+0x7e>
 800adaa:	465b      	mov	r3, fp
 800adac:	4622      	mov	r2, r4
 800adae:	4629      	mov	r1, r5
 800adb0:	4638      	mov	r0, r7
 800adb2:	f7ff ff6b 	bl	800ac8c <__ssputs_r>
 800adb6:	3001      	adds	r0, #1
 800adb8:	f000 80a7 	beq.w	800af0a <_svfiprintf_r+0x1c6>
 800adbc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800adbe:	445a      	add	r2, fp
 800adc0:	9209      	str	r2, [sp, #36]	@ 0x24
 800adc2:	f89a 3000 	ldrb.w	r3, [sl]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 809f 	beq.w	800af0a <_svfiprintf_r+0x1c6>
 800adcc:	2300      	movs	r3, #0
 800adce:	f04f 32ff 	mov.w	r2, #4294967295
 800add2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800add6:	f10a 0a01 	add.w	sl, sl, #1
 800adda:	9304      	str	r3, [sp, #16]
 800addc:	9307      	str	r3, [sp, #28]
 800adde:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ade2:	931a      	str	r3, [sp, #104]	@ 0x68
 800ade4:	4654      	mov	r4, sl
 800ade6:	2205      	movs	r2, #5
 800ade8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adec:	484e      	ldr	r0, [pc, #312]	@ (800af28 <_svfiprintf_r+0x1e4>)
 800adee:	f7f5 f9f7 	bl	80001e0 <memchr>
 800adf2:	9a04      	ldr	r2, [sp, #16]
 800adf4:	b9d8      	cbnz	r0, 800ae2e <_svfiprintf_r+0xea>
 800adf6:	06d0      	lsls	r0, r2, #27
 800adf8:	bf44      	itt	mi
 800adfa:	2320      	movmi	r3, #32
 800adfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae00:	0711      	lsls	r1, r2, #28
 800ae02:	bf44      	itt	mi
 800ae04:	232b      	movmi	r3, #43	@ 0x2b
 800ae06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae10:	d015      	beq.n	800ae3e <_svfiprintf_r+0xfa>
 800ae12:	9a07      	ldr	r2, [sp, #28]
 800ae14:	4654      	mov	r4, sl
 800ae16:	2000      	movs	r0, #0
 800ae18:	f04f 0c0a 	mov.w	ip, #10
 800ae1c:	4621      	mov	r1, r4
 800ae1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae22:	3b30      	subs	r3, #48	@ 0x30
 800ae24:	2b09      	cmp	r3, #9
 800ae26:	d94b      	bls.n	800aec0 <_svfiprintf_r+0x17c>
 800ae28:	b1b0      	cbz	r0, 800ae58 <_svfiprintf_r+0x114>
 800ae2a:	9207      	str	r2, [sp, #28]
 800ae2c:	e014      	b.n	800ae58 <_svfiprintf_r+0x114>
 800ae2e:	eba0 0308 	sub.w	r3, r0, r8
 800ae32:	fa09 f303 	lsl.w	r3, r9, r3
 800ae36:	4313      	orrs	r3, r2
 800ae38:	9304      	str	r3, [sp, #16]
 800ae3a:	46a2      	mov	sl, r4
 800ae3c:	e7d2      	b.n	800ade4 <_svfiprintf_r+0xa0>
 800ae3e:	9b03      	ldr	r3, [sp, #12]
 800ae40:	1d19      	adds	r1, r3, #4
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	9103      	str	r1, [sp, #12]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	bfbb      	ittet	lt
 800ae4a:	425b      	neglt	r3, r3
 800ae4c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae50:	9307      	strge	r3, [sp, #28]
 800ae52:	9307      	strlt	r3, [sp, #28]
 800ae54:	bfb8      	it	lt
 800ae56:	9204      	strlt	r2, [sp, #16]
 800ae58:	7823      	ldrb	r3, [r4, #0]
 800ae5a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae5c:	d10a      	bne.n	800ae74 <_svfiprintf_r+0x130>
 800ae5e:	7863      	ldrb	r3, [r4, #1]
 800ae60:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae62:	d132      	bne.n	800aeca <_svfiprintf_r+0x186>
 800ae64:	9b03      	ldr	r3, [sp, #12]
 800ae66:	1d1a      	adds	r2, r3, #4
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	9203      	str	r2, [sp, #12]
 800ae6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae70:	3402      	adds	r4, #2
 800ae72:	9305      	str	r3, [sp, #20]
 800ae74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af38 <_svfiprintf_r+0x1f4>
 800ae78:	7821      	ldrb	r1, [r4, #0]
 800ae7a:	2203      	movs	r2, #3
 800ae7c:	4650      	mov	r0, sl
 800ae7e:	f7f5 f9af 	bl	80001e0 <memchr>
 800ae82:	b138      	cbz	r0, 800ae94 <_svfiprintf_r+0x150>
 800ae84:	9b04      	ldr	r3, [sp, #16]
 800ae86:	eba0 000a 	sub.w	r0, r0, sl
 800ae8a:	2240      	movs	r2, #64	@ 0x40
 800ae8c:	4082      	lsls	r2, r0
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	3401      	adds	r4, #1
 800ae92:	9304      	str	r3, [sp, #16]
 800ae94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae98:	4824      	ldr	r0, [pc, #144]	@ (800af2c <_svfiprintf_r+0x1e8>)
 800ae9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ae9e:	2206      	movs	r2, #6
 800aea0:	f7f5 f99e 	bl	80001e0 <memchr>
 800aea4:	2800      	cmp	r0, #0
 800aea6:	d036      	beq.n	800af16 <_svfiprintf_r+0x1d2>
 800aea8:	4b21      	ldr	r3, [pc, #132]	@ (800af30 <_svfiprintf_r+0x1ec>)
 800aeaa:	bb1b      	cbnz	r3, 800aef4 <_svfiprintf_r+0x1b0>
 800aeac:	9b03      	ldr	r3, [sp, #12]
 800aeae:	3307      	adds	r3, #7
 800aeb0:	f023 0307 	bic.w	r3, r3, #7
 800aeb4:	3308      	adds	r3, #8
 800aeb6:	9303      	str	r3, [sp, #12]
 800aeb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeba:	4433      	add	r3, r6
 800aebc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aebe:	e76a      	b.n	800ad96 <_svfiprintf_r+0x52>
 800aec0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aec4:	460c      	mov	r4, r1
 800aec6:	2001      	movs	r0, #1
 800aec8:	e7a8      	b.n	800ae1c <_svfiprintf_r+0xd8>
 800aeca:	2300      	movs	r3, #0
 800aecc:	3401      	adds	r4, #1
 800aece:	9305      	str	r3, [sp, #20]
 800aed0:	4619      	mov	r1, r3
 800aed2:	f04f 0c0a 	mov.w	ip, #10
 800aed6:	4620      	mov	r0, r4
 800aed8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aedc:	3a30      	subs	r2, #48	@ 0x30
 800aede:	2a09      	cmp	r2, #9
 800aee0:	d903      	bls.n	800aeea <_svfiprintf_r+0x1a6>
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d0c6      	beq.n	800ae74 <_svfiprintf_r+0x130>
 800aee6:	9105      	str	r1, [sp, #20]
 800aee8:	e7c4      	b.n	800ae74 <_svfiprintf_r+0x130>
 800aeea:	fb0c 2101 	mla	r1, ip, r1, r2
 800aeee:	4604      	mov	r4, r0
 800aef0:	2301      	movs	r3, #1
 800aef2:	e7f0      	b.n	800aed6 <_svfiprintf_r+0x192>
 800aef4:	ab03      	add	r3, sp, #12
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	462a      	mov	r2, r5
 800aefa:	4b0e      	ldr	r3, [pc, #56]	@ (800af34 <_svfiprintf_r+0x1f0>)
 800aefc:	a904      	add	r1, sp, #16
 800aefe:	4638      	mov	r0, r7
 800af00:	f3af 8000 	nop.w
 800af04:	1c42      	adds	r2, r0, #1
 800af06:	4606      	mov	r6, r0
 800af08:	d1d6      	bne.n	800aeb8 <_svfiprintf_r+0x174>
 800af0a:	89ab      	ldrh	r3, [r5, #12]
 800af0c:	065b      	lsls	r3, r3, #25
 800af0e:	f53f af2d 	bmi.w	800ad6c <_svfiprintf_r+0x28>
 800af12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af14:	e72c      	b.n	800ad70 <_svfiprintf_r+0x2c>
 800af16:	ab03      	add	r3, sp, #12
 800af18:	9300      	str	r3, [sp, #0]
 800af1a:	462a      	mov	r2, r5
 800af1c:	4b05      	ldr	r3, [pc, #20]	@ (800af34 <_svfiprintf_r+0x1f0>)
 800af1e:	a904      	add	r1, sp, #16
 800af20:	4638      	mov	r0, r7
 800af22:	f000 fa45 	bl	800b3b0 <_printf_i>
 800af26:	e7ed      	b.n	800af04 <_svfiprintf_r+0x1c0>
 800af28:	0800ddb1 	.word	0x0800ddb1
 800af2c:	0800ddbb 	.word	0x0800ddbb
 800af30:	00000000 	.word	0x00000000
 800af34:	0800ac8d 	.word	0x0800ac8d
 800af38:	0800ddb7 	.word	0x0800ddb7

0800af3c <_sungetc_r>:
 800af3c:	b538      	push	{r3, r4, r5, lr}
 800af3e:	1c4b      	adds	r3, r1, #1
 800af40:	4614      	mov	r4, r2
 800af42:	d103      	bne.n	800af4c <_sungetc_r+0x10>
 800af44:	f04f 35ff 	mov.w	r5, #4294967295
 800af48:	4628      	mov	r0, r5
 800af4a:	bd38      	pop	{r3, r4, r5, pc}
 800af4c:	8993      	ldrh	r3, [r2, #12]
 800af4e:	f023 0320 	bic.w	r3, r3, #32
 800af52:	8193      	strh	r3, [r2, #12]
 800af54:	6853      	ldr	r3, [r2, #4]
 800af56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800af58:	b2cd      	uxtb	r5, r1
 800af5a:	b18a      	cbz	r2, 800af80 <_sungetc_r+0x44>
 800af5c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800af5e:	429a      	cmp	r2, r3
 800af60:	dd08      	ble.n	800af74 <_sungetc_r+0x38>
 800af62:	6823      	ldr	r3, [r4, #0]
 800af64:	1e5a      	subs	r2, r3, #1
 800af66:	6022      	str	r2, [r4, #0]
 800af68:	f803 5c01 	strb.w	r5, [r3, #-1]
 800af6c:	6863      	ldr	r3, [r4, #4]
 800af6e:	3301      	adds	r3, #1
 800af70:	6063      	str	r3, [r4, #4]
 800af72:	e7e9      	b.n	800af48 <_sungetc_r+0xc>
 800af74:	4621      	mov	r1, r4
 800af76:	f000 fd6e 	bl	800ba56 <__submore>
 800af7a:	2800      	cmp	r0, #0
 800af7c:	d0f1      	beq.n	800af62 <_sungetc_r+0x26>
 800af7e:	e7e1      	b.n	800af44 <_sungetc_r+0x8>
 800af80:	6921      	ldr	r1, [r4, #16]
 800af82:	6822      	ldr	r2, [r4, #0]
 800af84:	b141      	cbz	r1, 800af98 <_sungetc_r+0x5c>
 800af86:	4291      	cmp	r1, r2
 800af88:	d206      	bcs.n	800af98 <_sungetc_r+0x5c>
 800af8a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800af8e:	42a9      	cmp	r1, r5
 800af90:	d102      	bne.n	800af98 <_sungetc_r+0x5c>
 800af92:	3a01      	subs	r2, #1
 800af94:	6022      	str	r2, [r4, #0]
 800af96:	e7ea      	b.n	800af6e <_sungetc_r+0x32>
 800af98:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800af9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afa0:	6363      	str	r3, [r4, #52]	@ 0x34
 800afa2:	2303      	movs	r3, #3
 800afa4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800afa6:	4623      	mov	r3, r4
 800afa8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800afac:	6023      	str	r3, [r4, #0]
 800afae:	2301      	movs	r3, #1
 800afb0:	e7de      	b.n	800af70 <_sungetc_r+0x34>

0800afb2 <__ssrefill_r>:
 800afb2:	b510      	push	{r4, lr}
 800afb4:	460c      	mov	r4, r1
 800afb6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800afb8:	b169      	cbz	r1, 800afd6 <__ssrefill_r+0x24>
 800afba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afbe:	4299      	cmp	r1, r3
 800afc0:	d001      	beq.n	800afc6 <__ssrefill_r+0x14>
 800afc2:	f7fe fee7 	bl	8009d94 <_free_r>
 800afc6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800afc8:	6063      	str	r3, [r4, #4]
 800afca:	2000      	movs	r0, #0
 800afcc:	6360      	str	r0, [r4, #52]	@ 0x34
 800afce:	b113      	cbz	r3, 800afd6 <__ssrefill_r+0x24>
 800afd0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800afd2:	6023      	str	r3, [r4, #0]
 800afd4:	bd10      	pop	{r4, pc}
 800afd6:	6923      	ldr	r3, [r4, #16]
 800afd8:	6023      	str	r3, [r4, #0]
 800afda:	2300      	movs	r3, #0
 800afdc:	6063      	str	r3, [r4, #4]
 800afde:	89a3      	ldrh	r3, [r4, #12]
 800afe0:	f043 0320 	orr.w	r3, r3, #32
 800afe4:	81a3      	strh	r3, [r4, #12]
 800afe6:	f04f 30ff 	mov.w	r0, #4294967295
 800afea:	e7f3      	b.n	800afd4 <__ssrefill_r+0x22>

0800afec <__ssvfiscanf_r>:
 800afec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff0:	460c      	mov	r4, r1
 800aff2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800aff6:	2100      	movs	r1, #0
 800aff8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800affc:	49a5      	ldr	r1, [pc, #660]	@ (800b294 <__ssvfiscanf_r+0x2a8>)
 800affe:	91a0      	str	r1, [sp, #640]	@ 0x280
 800b000:	f10d 0804 	add.w	r8, sp, #4
 800b004:	49a4      	ldr	r1, [pc, #656]	@ (800b298 <__ssvfiscanf_r+0x2ac>)
 800b006:	4fa5      	ldr	r7, [pc, #660]	@ (800b29c <__ssvfiscanf_r+0x2b0>)
 800b008:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800b00c:	4606      	mov	r6, r0
 800b00e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800b010:	9300      	str	r3, [sp, #0]
 800b012:	7813      	ldrb	r3, [r2, #0]
 800b014:	2b00      	cmp	r3, #0
 800b016:	f000 8158 	beq.w	800b2ca <__ssvfiscanf_r+0x2de>
 800b01a:	5cf9      	ldrb	r1, [r7, r3]
 800b01c:	f011 0108 	ands.w	r1, r1, #8
 800b020:	f102 0501 	add.w	r5, r2, #1
 800b024:	d019      	beq.n	800b05a <__ssvfiscanf_r+0x6e>
 800b026:	6863      	ldr	r3, [r4, #4]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	dd0f      	ble.n	800b04c <__ssvfiscanf_r+0x60>
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	781a      	ldrb	r2, [r3, #0]
 800b030:	5cba      	ldrb	r2, [r7, r2]
 800b032:	0712      	lsls	r2, r2, #28
 800b034:	d401      	bmi.n	800b03a <__ssvfiscanf_r+0x4e>
 800b036:	462a      	mov	r2, r5
 800b038:	e7eb      	b.n	800b012 <__ssvfiscanf_r+0x26>
 800b03a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b03c:	3201      	adds	r2, #1
 800b03e:	9245      	str	r2, [sp, #276]	@ 0x114
 800b040:	6862      	ldr	r2, [r4, #4]
 800b042:	3301      	adds	r3, #1
 800b044:	3a01      	subs	r2, #1
 800b046:	6062      	str	r2, [r4, #4]
 800b048:	6023      	str	r3, [r4, #0]
 800b04a:	e7ec      	b.n	800b026 <__ssvfiscanf_r+0x3a>
 800b04c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b04e:	4621      	mov	r1, r4
 800b050:	4630      	mov	r0, r6
 800b052:	4798      	blx	r3
 800b054:	2800      	cmp	r0, #0
 800b056:	d0e9      	beq.n	800b02c <__ssvfiscanf_r+0x40>
 800b058:	e7ed      	b.n	800b036 <__ssvfiscanf_r+0x4a>
 800b05a:	2b25      	cmp	r3, #37	@ 0x25
 800b05c:	d012      	beq.n	800b084 <__ssvfiscanf_r+0x98>
 800b05e:	4699      	mov	r9, r3
 800b060:	6863      	ldr	r3, [r4, #4]
 800b062:	2b00      	cmp	r3, #0
 800b064:	f340 8093 	ble.w	800b18e <__ssvfiscanf_r+0x1a2>
 800b068:	6822      	ldr	r2, [r4, #0]
 800b06a:	7813      	ldrb	r3, [r2, #0]
 800b06c:	454b      	cmp	r3, r9
 800b06e:	f040 812c 	bne.w	800b2ca <__ssvfiscanf_r+0x2de>
 800b072:	6863      	ldr	r3, [r4, #4]
 800b074:	3b01      	subs	r3, #1
 800b076:	6063      	str	r3, [r4, #4]
 800b078:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800b07a:	3201      	adds	r2, #1
 800b07c:	3301      	adds	r3, #1
 800b07e:	6022      	str	r2, [r4, #0]
 800b080:	9345      	str	r3, [sp, #276]	@ 0x114
 800b082:	e7d8      	b.n	800b036 <__ssvfiscanf_r+0x4a>
 800b084:	9141      	str	r1, [sp, #260]	@ 0x104
 800b086:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b088:	7853      	ldrb	r3, [r2, #1]
 800b08a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b08c:	bf02      	ittt	eq
 800b08e:	2310      	moveq	r3, #16
 800b090:	1c95      	addeq	r5, r2, #2
 800b092:	9341      	streq	r3, [sp, #260]	@ 0x104
 800b094:	220a      	movs	r2, #10
 800b096:	46a9      	mov	r9, r5
 800b098:	f819 1b01 	ldrb.w	r1, [r9], #1
 800b09c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800b0a0:	2b09      	cmp	r3, #9
 800b0a2:	d91e      	bls.n	800b0e2 <__ssvfiscanf_r+0xf6>
 800b0a4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800b2a0 <__ssvfiscanf_r+0x2b4>
 800b0a8:	2203      	movs	r2, #3
 800b0aa:	4650      	mov	r0, sl
 800b0ac:	f7f5 f898 	bl	80001e0 <memchr>
 800b0b0:	b138      	cbz	r0, 800b0c2 <__ssvfiscanf_r+0xd6>
 800b0b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b0b4:	eba0 000a 	sub.w	r0, r0, sl
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	4083      	lsls	r3, r0
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	9341      	str	r3, [sp, #260]	@ 0x104
 800b0c0:	464d      	mov	r5, r9
 800b0c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b0c6:	2b78      	cmp	r3, #120	@ 0x78
 800b0c8:	d806      	bhi.n	800b0d8 <__ssvfiscanf_r+0xec>
 800b0ca:	2b57      	cmp	r3, #87	@ 0x57
 800b0cc:	d810      	bhi.n	800b0f0 <__ssvfiscanf_r+0x104>
 800b0ce:	2b25      	cmp	r3, #37	@ 0x25
 800b0d0:	d0c5      	beq.n	800b05e <__ssvfiscanf_r+0x72>
 800b0d2:	d857      	bhi.n	800b184 <__ssvfiscanf_r+0x198>
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d065      	beq.n	800b1a4 <__ssvfiscanf_r+0x1b8>
 800b0d8:	2303      	movs	r3, #3
 800b0da:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b0dc:	230a      	movs	r3, #10
 800b0de:	9342      	str	r3, [sp, #264]	@ 0x108
 800b0e0:	e078      	b.n	800b1d4 <__ssvfiscanf_r+0x1e8>
 800b0e2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800b0e4:	fb02 1103 	mla	r1, r2, r3, r1
 800b0e8:	3930      	subs	r1, #48	@ 0x30
 800b0ea:	9143      	str	r1, [sp, #268]	@ 0x10c
 800b0ec:	464d      	mov	r5, r9
 800b0ee:	e7d2      	b.n	800b096 <__ssvfiscanf_r+0xaa>
 800b0f0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800b0f4:	2a20      	cmp	r2, #32
 800b0f6:	d8ef      	bhi.n	800b0d8 <__ssvfiscanf_r+0xec>
 800b0f8:	a101      	add	r1, pc, #4	@ (adr r1, 800b100 <__ssvfiscanf_r+0x114>)
 800b0fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b0fe:	bf00      	nop
 800b100:	0800b1b3 	.word	0x0800b1b3
 800b104:	0800b0d9 	.word	0x0800b0d9
 800b108:	0800b0d9 	.word	0x0800b0d9
 800b10c:	0800b20d 	.word	0x0800b20d
 800b110:	0800b0d9 	.word	0x0800b0d9
 800b114:	0800b0d9 	.word	0x0800b0d9
 800b118:	0800b0d9 	.word	0x0800b0d9
 800b11c:	0800b0d9 	.word	0x0800b0d9
 800b120:	0800b0d9 	.word	0x0800b0d9
 800b124:	0800b0d9 	.word	0x0800b0d9
 800b128:	0800b0d9 	.word	0x0800b0d9
 800b12c:	0800b223 	.word	0x0800b223
 800b130:	0800b209 	.word	0x0800b209
 800b134:	0800b18b 	.word	0x0800b18b
 800b138:	0800b18b 	.word	0x0800b18b
 800b13c:	0800b18b 	.word	0x0800b18b
 800b140:	0800b0d9 	.word	0x0800b0d9
 800b144:	0800b1c5 	.word	0x0800b1c5
 800b148:	0800b0d9 	.word	0x0800b0d9
 800b14c:	0800b0d9 	.word	0x0800b0d9
 800b150:	0800b0d9 	.word	0x0800b0d9
 800b154:	0800b0d9 	.word	0x0800b0d9
 800b158:	0800b233 	.word	0x0800b233
 800b15c:	0800b1cd 	.word	0x0800b1cd
 800b160:	0800b1ab 	.word	0x0800b1ab
 800b164:	0800b0d9 	.word	0x0800b0d9
 800b168:	0800b0d9 	.word	0x0800b0d9
 800b16c:	0800b22f 	.word	0x0800b22f
 800b170:	0800b0d9 	.word	0x0800b0d9
 800b174:	0800b209 	.word	0x0800b209
 800b178:	0800b0d9 	.word	0x0800b0d9
 800b17c:	0800b0d9 	.word	0x0800b0d9
 800b180:	0800b1b3 	.word	0x0800b1b3
 800b184:	3b45      	subs	r3, #69	@ 0x45
 800b186:	2b02      	cmp	r3, #2
 800b188:	d8a6      	bhi.n	800b0d8 <__ssvfiscanf_r+0xec>
 800b18a:	2305      	movs	r3, #5
 800b18c:	e021      	b.n	800b1d2 <__ssvfiscanf_r+0x1e6>
 800b18e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b190:	4621      	mov	r1, r4
 800b192:	4630      	mov	r0, r6
 800b194:	4798      	blx	r3
 800b196:	2800      	cmp	r0, #0
 800b198:	f43f af66 	beq.w	800b068 <__ssvfiscanf_r+0x7c>
 800b19c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b19e:	2800      	cmp	r0, #0
 800b1a0:	f040 808b 	bne.w	800b2ba <__ssvfiscanf_r+0x2ce>
 800b1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b1a8:	e08b      	b.n	800b2c2 <__ssvfiscanf_r+0x2d6>
 800b1aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b1ac:	f042 0220 	orr.w	r2, r2, #32
 800b1b0:	9241      	str	r2, [sp, #260]	@ 0x104
 800b1b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800b1b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b1b8:	9241      	str	r2, [sp, #260]	@ 0x104
 800b1ba:	2210      	movs	r2, #16
 800b1bc:	2b6e      	cmp	r3, #110	@ 0x6e
 800b1be:	9242      	str	r2, [sp, #264]	@ 0x108
 800b1c0:	d902      	bls.n	800b1c8 <__ssvfiscanf_r+0x1dc>
 800b1c2:	e005      	b.n	800b1d0 <__ssvfiscanf_r+0x1e4>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	9342      	str	r3, [sp, #264]	@ 0x108
 800b1c8:	2303      	movs	r3, #3
 800b1ca:	e002      	b.n	800b1d2 <__ssvfiscanf_r+0x1e6>
 800b1cc:	2308      	movs	r3, #8
 800b1ce:	9342      	str	r3, [sp, #264]	@ 0x108
 800b1d0:	2304      	movs	r3, #4
 800b1d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800b1d4:	6863      	ldr	r3, [r4, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	dd39      	ble.n	800b24e <__ssvfiscanf_r+0x262>
 800b1da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b1dc:	0659      	lsls	r1, r3, #25
 800b1de:	d404      	bmi.n	800b1ea <__ssvfiscanf_r+0x1fe>
 800b1e0:	6823      	ldr	r3, [r4, #0]
 800b1e2:	781a      	ldrb	r2, [r3, #0]
 800b1e4:	5cba      	ldrb	r2, [r7, r2]
 800b1e6:	0712      	lsls	r2, r2, #28
 800b1e8:	d438      	bmi.n	800b25c <__ssvfiscanf_r+0x270>
 800b1ea:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	dc47      	bgt.n	800b280 <__ssvfiscanf_r+0x294>
 800b1f0:	466b      	mov	r3, sp
 800b1f2:	4622      	mov	r2, r4
 800b1f4:	a941      	add	r1, sp, #260	@ 0x104
 800b1f6:	4630      	mov	r0, r6
 800b1f8:	f000 f9fa 	bl	800b5f0 <_scanf_chars>
 800b1fc:	2801      	cmp	r0, #1
 800b1fe:	d064      	beq.n	800b2ca <__ssvfiscanf_r+0x2de>
 800b200:	2802      	cmp	r0, #2
 800b202:	f47f af18 	bne.w	800b036 <__ssvfiscanf_r+0x4a>
 800b206:	e7c9      	b.n	800b19c <__ssvfiscanf_r+0x1b0>
 800b208:	220a      	movs	r2, #10
 800b20a:	e7d7      	b.n	800b1bc <__ssvfiscanf_r+0x1d0>
 800b20c:	4629      	mov	r1, r5
 800b20e:	4640      	mov	r0, r8
 800b210:	f000 fbe8 	bl	800b9e4 <__sccl>
 800b214:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b21a:	9341      	str	r3, [sp, #260]	@ 0x104
 800b21c:	4605      	mov	r5, r0
 800b21e:	2301      	movs	r3, #1
 800b220:	e7d7      	b.n	800b1d2 <__ssvfiscanf_r+0x1e6>
 800b222:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800b224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b228:	9341      	str	r3, [sp, #260]	@ 0x104
 800b22a:	2300      	movs	r3, #0
 800b22c:	e7d1      	b.n	800b1d2 <__ssvfiscanf_r+0x1e6>
 800b22e:	2302      	movs	r3, #2
 800b230:	e7cf      	b.n	800b1d2 <__ssvfiscanf_r+0x1e6>
 800b232:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800b234:	06c3      	lsls	r3, r0, #27
 800b236:	f53f aefe 	bmi.w	800b036 <__ssvfiscanf_r+0x4a>
 800b23a:	9b00      	ldr	r3, [sp, #0]
 800b23c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b23e:	1d19      	adds	r1, r3, #4
 800b240:	9100      	str	r1, [sp, #0]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	07c0      	lsls	r0, r0, #31
 800b246:	bf4c      	ite	mi
 800b248:	801a      	strhmi	r2, [r3, #0]
 800b24a:	601a      	strpl	r2, [r3, #0]
 800b24c:	e6f3      	b.n	800b036 <__ssvfiscanf_r+0x4a>
 800b24e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b250:	4621      	mov	r1, r4
 800b252:	4630      	mov	r0, r6
 800b254:	4798      	blx	r3
 800b256:	2800      	cmp	r0, #0
 800b258:	d0bf      	beq.n	800b1da <__ssvfiscanf_r+0x1ee>
 800b25a:	e79f      	b.n	800b19c <__ssvfiscanf_r+0x1b0>
 800b25c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800b25e:	3201      	adds	r2, #1
 800b260:	9245      	str	r2, [sp, #276]	@ 0x114
 800b262:	6862      	ldr	r2, [r4, #4]
 800b264:	3a01      	subs	r2, #1
 800b266:	2a00      	cmp	r2, #0
 800b268:	6062      	str	r2, [r4, #4]
 800b26a:	dd02      	ble.n	800b272 <__ssvfiscanf_r+0x286>
 800b26c:	3301      	adds	r3, #1
 800b26e:	6023      	str	r3, [r4, #0]
 800b270:	e7b6      	b.n	800b1e0 <__ssvfiscanf_r+0x1f4>
 800b272:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800b274:	4621      	mov	r1, r4
 800b276:	4630      	mov	r0, r6
 800b278:	4798      	blx	r3
 800b27a:	2800      	cmp	r0, #0
 800b27c:	d0b0      	beq.n	800b1e0 <__ssvfiscanf_r+0x1f4>
 800b27e:	e78d      	b.n	800b19c <__ssvfiscanf_r+0x1b0>
 800b280:	2b04      	cmp	r3, #4
 800b282:	dc0f      	bgt.n	800b2a4 <__ssvfiscanf_r+0x2b8>
 800b284:	466b      	mov	r3, sp
 800b286:	4622      	mov	r2, r4
 800b288:	a941      	add	r1, sp, #260	@ 0x104
 800b28a:	4630      	mov	r0, r6
 800b28c:	f000 fa0a 	bl	800b6a4 <_scanf_i>
 800b290:	e7b4      	b.n	800b1fc <__ssvfiscanf_r+0x210>
 800b292:	bf00      	nop
 800b294:	0800af3d 	.word	0x0800af3d
 800b298:	0800afb3 	.word	0x0800afb3
 800b29c:	0800dcb1 	.word	0x0800dcb1
 800b2a0:	0800ddb7 	.word	0x0800ddb7
 800b2a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b2d0 <__ssvfiscanf_r+0x2e4>)
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f43f aec5 	beq.w	800b036 <__ssvfiscanf_r+0x4a>
 800b2ac:	466b      	mov	r3, sp
 800b2ae:	4622      	mov	r2, r4
 800b2b0:	a941      	add	r1, sp, #260	@ 0x104
 800b2b2:	4630      	mov	r0, r6
 800b2b4:	f7fe f902 	bl	80094bc <_scanf_float>
 800b2b8:	e7a0      	b.n	800b1fc <__ssvfiscanf_r+0x210>
 800b2ba:	89a3      	ldrh	r3, [r4, #12]
 800b2bc:	065b      	lsls	r3, r3, #25
 800b2be:	f53f af71 	bmi.w	800b1a4 <__ssvfiscanf_r+0x1b8>
 800b2c2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800b2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2ca:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800b2cc:	e7f9      	b.n	800b2c2 <__ssvfiscanf_r+0x2d6>
 800b2ce:	bf00      	nop
 800b2d0:	080094bd 	.word	0x080094bd

0800b2d4 <_printf_common>:
 800b2d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2d8:	4616      	mov	r6, r2
 800b2da:	4698      	mov	r8, r3
 800b2dc:	688a      	ldr	r2, [r1, #8]
 800b2de:	690b      	ldr	r3, [r1, #16]
 800b2e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2e4:	4293      	cmp	r3, r2
 800b2e6:	bfb8      	it	lt
 800b2e8:	4613      	movlt	r3, r2
 800b2ea:	6033      	str	r3, [r6, #0]
 800b2ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2f0:	4607      	mov	r7, r0
 800b2f2:	460c      	mov	r4, r1
 800b2f4:	b10a      	cbz	r2, 800b2fa <_printf_common+0x26>
 800b2f6:	3301      	adds	r3, #1
 800b2f8:	6033      	str	r3, [r6, #0]
 800b2fa:	6823      	ldr	r3, [r4, #0]
 800b2fc:	0699      	lsls	r1, r3, #26
 800b2fe:	bf42      	ittt	mi
 800b300:	6833      	ldrmi	r3, [r6, #0]
 800b302:	3302      	addmi	r3, #2
 800b304:	6033      	strmi	r3, [r6, #0]
 800b306:	6825      	ldr	r5, [r4, #0]
 800b308:	f015 0506 	ands.w	r5, r5, #6
 800b30c:	d106      	bne.n	800b31c <_printf_common+0x48>
 800b30e:	f104 0a19 	add.w	sl, r4, #25
 800b312:	68e3      	ldr	r3, [r4, #12]
 800b314:	6832      	ldr	r2, [r6, #0]
 800b316:	1a9b      	subs	r3, r3, r2
 800b318:	42ab      	cmp	r3, r5
 800b31a:	dc26      	bgt.n	800b36a <_printf_common+0x96>
 800b31c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b320:	6822      	ldr	r2, [r4, #0]
 800b322:	3b00      	subs	r3, #0
 800b324:	bf18      	it	ne
 800b326:	2301      	movne	r3, #1
 800b328:	0692      	lsls	r2, r2, #26
 800b32a:	d42b      	bmi.n	800b384 <_printf_common+0xb0>
 800b32c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b330:	4641      	mov	r1, r8
 800b332:	4638      	mov	r0, r7
 800b334:	47c8      	blx	r9
 800b336:	3001      	adds	r0, #1
 800b338:	d01e      	beq.n	800b378 <_printf_common+0xa4>
 800b33a:	6823      	ldr	r3, [r4, #0]
 800b33c:	6922      	ldr	r2, [r4, #16]
 800b33e:	f003 0306 	and.w	r3, r3, #6
 800b342:	2b04      	cmp	r3, #4
 800b344:	bf02      	ittt	eq
 800b346:	68e5      	ldreq	r5, [r4, #12]
 800b348:	6833      	ldreq	r3, [r6, #0]
 800b34a:	1aed      	subeq	r5, r5, r3
 800b34c:	68a3      	ldr	r3, [r4, #8]
 800b34e:	bf0c      	ite	eq
 800b350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b354:	2500      	movne	r5, #0
 800b356:	4293      	cmp	r3, r2
 800b358:	bfc4      	itt	gt
 800b35a:	1a9b      	subgt	r3, r3, r2
 800b35c:	18ed      	addgt	r5, r5, r3
 800b35e:	2600      	movs	r6, #0
 800b360:	341a      	adds	r4, #26
 800b362:	42b5      	cmp	r5, r6
 800b364:	d11a      	bne.n	800b39c <_printf_common+0xc8>
 800b366:	2000      	movs	r0, #0
 800b368:	e008      	b.n	800b37c <_printf_common+0xa8>
 800b36a:	2301      	movs	r3, #1
 800b36c:	4652      	mov	r2, sl
 800b36e:	4641      	mov	r1, r8
 800b370:	4638      	mov	r0, r7
 800b372:	47c8      	blx	r9
 800b374:	3001      	adds	r0, #1
 800b376:	d103      	bne.n	800b380 <_printf_common+0xac>
 800b378:	f04f 30ff 	mov.w	r0, #4294967295
 800b37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b380:	3501      	adds	r5, #1
 800b382:	e7c6      	b.n	800b312 <_printf_common+0x3e>
 800b384:	18e1      	adds	r1, r4, r3
 800b386:	1c5a      	adds	r2, r3, #1
 800b388:	2030      	movs	r0, #48	@ 0x30
 800b38a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b38e:	4422      	add	r2, r4
 800b390:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b394:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b398:	3302      	adds	r3, #2
 800b39a:	e7c7      	b.n	800b32c <_printf_common+0x58>
 800b39c:	2301      	movs	r3, #1
 800b39e:	4622      	mov	r2, r4
 800b3a0:	4641      	mov	r1, r8
 800b3a2:	4638      	mov	r0, r7
 800b3a4:	47c8      	blx	r9
 800b3a6:	3001      	adds	r0, #1
 800b3a8:	d0e6      	beq.n	800b378 <_printf_common+0xa4>
 800b3aa:	3601      	adds	r6, #1
 800b3ac:	e7d9      	b.n	800b362 <_printf_common+0x8e>
	...

0800b3b0 <_printf_i>:
 800b3b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b3b4:	7e0f      	ldrb	r7, [r1, #24]
 800b3b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b3b8:	2f78      	cmp	r7, #120	@ 0x78
 800b3ba:	4691      	mov	r9, r2
 800b3bc:	4680      	mov	r8, r0
 800b3be:	460c      	mov	r4, r1
 800b3c0:	469a      	mov	sl, r3
 800b3c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b3c6:	d807      	bhi.n	800b3d8 <_printf_i+0x28>
 800b3c8:	2f62      	cmp	r7, #98	@ 0x62
 800b3ca:	d80a      	bhi.n	800b3e2 <_printf_i+0x32>
 800b3cc:	2f00      	cmp	r7, #0
 800b3ce:	f000 80d2 	beq.w	800b576 <_printf_i+0x1c6>
 800b3d2:	2f58      	cmp	r7, #88	@ 0x58
 800b3d4:	f000 80b9 	beq.w	800b54a <_printf_i+0x19a>
 800b3d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b3e0:	e03a      	b.n	800b458 <_printf_i+0xa8>
 800b3e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3e6:	2b15      	cmp	r3, #21
 800b3e8:	d8f6      	bhi.n	800b3d8 <_printf_i+0x28>
 800b3ea:	a101      	add	r1, pc, #4	@ (adr r1, 800b3f0 <_printf_i+0x40>)
 800b3ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3f0:	0800b449 	.word	0x0800b449
 800b3f4:	0800b45d 	.word	0x0800b45d
 800b3f8:	0800b3d9 	.word	0x0800b3d9
 800b3fc:	0800b3d9 	.word	0x0800b3d9
 800b400:	0800b3d9 	.word	0x0800b3d9
 800b404:	0800b3d9 	.word	0x0800b3d9
 800b408:	0800b45d 	.word	0x0800b45d
 800b40c:	0800b3d9 	.word	0x0800b3d9
 800b410:	0800b3d9 	.word	0x0800b3d9
 800b414:	0800b3d9 	.word	0x0800b3d9
 800b418:	0800b3d9 	.word	0x0800b3d9
 800b41c:	0800b55d 	.word	0x0800b55d
 800b420:	0800b487 	.word	0x0800b487
 800b424:	0800b517 	.word	0x0800b517
 800b428:	0800b3d9 	.word	0x0800b3d9
 800b42c:	0800b3d9 	.word	0x0800b3d9
 800b430:	0800b57f 	.word	0x0800b57f
 800b434:	0800b3d9 	.word	0x0800b3d9
 800b438:	0800b487 	.word	0x0800b487
 800b43c:	0800b3d9 	.word	0x0800b3d9
 800b440:	0800b3d9 	.word	0x0800b3d9
 800b444:	0800b51f 	.word	0x0800b51f
 800b448:	6833      	ldr	r3, [r6, #0]
 800b44a:	1d1a      	adds	r2, r3, #4
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	6032      	str	r2, [r6, #0]
 800b450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b454:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b458:	2301      	movs	r3, #1
 800b45a:	e09d      	b.n	800b598 <_printf_i+0x1e8>
 800b45c:	6833      	ldr	r3, [r6, #0]
 800b45e:	6820      	ldr	r0, [r4, #0]
 800b460:	1d19      	adds	r1, r3, #4
 800b462:	6031      	str	r1, [r6, #0]
 800b464:	0606      	lsls	r6, r0, #24
 800b466:	d501      	bpl.n	800b46c <_printf_i+0xbc>
 800b468:	681d      	ldr	r5, [r3, #0]
 800b46a:	e003      	b.n	800b474 <_printf_i+0xc4>
 800b46c:	0645      	lsls	r5, r0, #25
 800b46e:	d5fb      	bpl.n	800b468 <_printf_i+0xb8>
 800b470:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b474:	2d00      	cmp	r5, #0
 800b476:	da03      	bge.n	800b480 <_printf_i+0xd0>
 800b478:	232d      	movs	r3, #45	@ 0x2d
 800b47a:	426d      	negs	r5, r5
 800b47c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b480:	4859      	ldr	r0, [pc, #356]	@ (800b5e8 <_printf_i+0x238>)
 800b482:	230a      	movs	r3, #10
 800b484:	e011      	b.n	800b4aa <_printf_i+0xfa>
 800b486:	6821      	ldr	r1, [r4, #0]
 800b488:	6833      	ldr	r3, [r6, #0]
 800b48a:	0608      	lsls	r0, r1, #24
 800b48c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b490:	d402      	bmi.n	800b498 <_printf_i+0xe8>
 800b492:	0649      	lsls	r1, r1, #25
 800b494:	bf48      	it	mi
 800b496:	b2ad      	uxthmi	r5, r5
 800b498:	2f6f      	cmp	r7, #111	@ 0x6f
 800b49a:	4853      	ldr	r0, [pc, #332]	@ (800b5e8 <_printf_i+0x238>)
 800b49c:	6033      	str	r3, [r6, #0]
 800b49e:	bf14      	ite	ne
 800b4a0:	230a      	movne	r3, #10
 800b4a2:	2308      	moveq	r3, #8
 800b4a4:	2100      	movs	r1, #0
 800b4a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b4aa:	6866      	ldr	r6, [r4, #4]
 800b4ac:	60a6      	str	r6, [r4, #8]
 800b4ae:	2e00      	cmp	r6, #0
 800b4b0:	bfa2      	ittt	ge
 800b4b2:	6821      	ldrge	r1, [r4, #0]
 800b4b4:	f021 0104 	bicge.w	r1, r1, #4
 800b4b8:	6021      	strge	r1, [r4, #0]
 800b4ba:	b90d      	cbnz	r5, 800b4c0 <_printf_i+0x110>
 800b4bc:	2e00      	cmp	r6, #0
 800b4be:	d04b      	beq.n	800b558 <_printf_i+0x1a8>
 800b4c0:	4616      	mov	r6, r2
 800b4c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b4c6:	fb03 5711 	mls	r7, r3, r1, r5
 800b4ca:	5dc7      	ldrb	r7, [r0, r7]
 800b4cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b4d0:	462f      	mov	r7, r5
 800b4d2:	42bb      	cmp	r3, r7
 800b4d4:	460d      	mov	r5, r1
 800b4d6:	d9f4      	bls.n	800b4c2 <_printf_i+0x112>
 800b4d8:	2b08      	cmp	r3, #8
 800b4da:	d10b      	bne.n	800b4f4 <_printf_i+0x144>
 800b4dc:	6823      	ldr	r3, [r4, #0]
 800b4de:	07df      	lsls	r7, r3, #31
 800b4e0:	d508      	bpl.n	800b4f4 <_printf_i+0x144>
 800b4e2:	6923      	ldr	r3, [r4, #16]
 800b4e4:	6861      	ldr	r1, [r4, #4]
 800b4e6:	4299      	cmp	r1, r3
 800b4e8:	bfde      	ittt	le
 800b4ea:	2330      	movle	r3, #48	@ 0x30
 800b4ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4f4:	1b92      	subs	r2, r2, r6
 800b4f6:	6122      	str	r2, [r4, #16]
 800b4f8:	f8cd a000 	str.w	sl, [sp]
 800b4fc:	464b      	mov	r3, r9
 800b4fe:	aa03      	add	r2, sp, #12
 800b500:	4621      	mov	r1, r4
 800b502:	4640      	mov	r0, r8
 800b504:	f7ff fee6 	bl	800b2d4 <_printf_common>
 800b508:	3001      	adds	r0, #1
 800b50a:	d14a      	bne.n	800b5a2 <_printf_i+0x1f2>
 800b50c:	f04f 30ff 	mov.w	r0, #4294967295
 800b510:	b004      	add	sp, #16
 800b512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	f043 0320 	orr.w	r3, r3, #32
 800b51c:	6023      	str	r3, [r4, #0]
 800b51e:	4833      	ldr	r0, [pc, #204]	@ (800b5ec <_printf_i+0x23c>)
 800b520:	2778      	movs	r7, #120	@ 0x78
 800b522:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b526:	6823      	ldr	r3, [r4, #0]
 800b528:	6831      	ldr	r1, [r6, #0]
 800b52a:	061f      	lsls	r7, r3, #24
 800b52c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b530:	d402      	bmi.n	800b538 <_printf_i+0x188>
 800b532:	065f      	lsls	r7, r3, #25
 800b534:	bf48      	it	mi
 800b536:	b2ad      	uxthmi	r5, r5
 800b538:	6031      	str	r1, [r6, #0]
 800b53a:	07d9      	lsls	r1, r3, #31
 800b53c:	bf44      	itt	mi
 800b53e:	f043 0320 	orrmi.w	r3, r3, #32
 800b542:	6023      	strmi	r3, [r4, #0]
 800b544:	b11d      	cbz	r5, 800b54e <_printf_i+0x19e>
 800b546:	2310      	movs	r3, #16
 800b548:	e7ac      	b.n	800b4a4 <_printf_i+0xf4>
 800b54a:	4827      	ldr	r0, [pc, #156]	@ (800b5e8 <_printf_i+0x238>)
 800b54c:	e7e9      	b.n	800b522 <_printf_i+0x172>
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	f023 0320 	bic.w	r3, r3, #32
 800b554:	6023      	str	r3, [r4, #0]
 800b556:	e7f6      	b.n	800b546 <_printf_i+0x196>
 800b558:	4616      	mov	r6, r2
 800b55a:	e7bd      	b.n	800b4d8 <_printf_i+0x128>
 800b55c:	6833      	ldr	r3, [r6, #0]
 800b55e:	6825      	ldr	r5, [r4, #0]
 800b560:	6961      	ldr	r1, [r4, #20]
 800b562:	1d18      	adds	r0, r3, #4
 800b564:	6030      	str	r0, [r6, #0]
 800b566:	062e      	lsls	r6, r5, #24
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	d501      	bpl.n	800b570 <_printf_i+0x1c0>
 800b56c:	6019      	str	r1, [r3, #0]
 800b56e:	e002      	b.n	800b576 <_printf_i+0x1c6>
 800b570:	0668      	lsls	r0, r5, #25
 800b572:	d5fb      	bpl.n	800b56c <_printf_i+0x1bc>
 800b574:	8019      	strh	r1, [r3, #0]
 800b576:	2300      	movs	r3, #0
 800b578:	6123      	str	r3, [r4, #16]
 800b57a:	4616      	mov	r6, r2
 800b57c:	e7bc      	b.n	800b4f8 <_printf_i+0x148>
 800b57e:	6833      	ldr	r3, [r6, #0]
 800b580:	1d1a      	adds	r2, r3, #4
 800b582:	6032      	str	r2, [r6, #0]
 800b584:	681e      	ldr	r6, [r3, #0]
 800b586:	6862      	ldr	r2, [r4, #4]
 800b588:	2100      	movs	r1, #0
 800b58a:	4630      	mov	r0, r6
 800b58c:	f7f4 fe28 	bl	80001e0 <memchr>
 800b590:	b108      	cbz	r0, 800b596 <_printf_i+0x1e6>
 800b592:	1b80      	subs	r0, r0, r6
 800b594:	6060      	str	r0, [r4, #4]
 800b596:	6863      	ldr	r3, [r4, #4]
 800b598:	6123      	str	r3, [r4, #16]
 800b59a:	2300      	movs	r3, #0
 800b59c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b5a0:	e7aa      	b.n	800b4f8 <_printf_i+0x148>
 800b5a2:	6923      	ldr	r3, [r4, #16]
 800b5a4:	4632      	mov	r2, r6
 800b5a6:	4649      	mov	r1, r9
 800b5a8:	4640      	mov	r0, r8
 800b5aa:	47d0      	blx	sl
 800b5ac:	3001      	adds	r0, #1
 800b5ae:	d0ad      	beq.n	800b50c <_printf_i+0x15c>
 800b5b0:	6823      	ldr	r3, [r4, #0]
 800b5b2:	079b      	lsls	r3, r3, #30
 800b5b4:	d413      	bmi.n	800b5de <_printf_i+0x22e>
 800b5b6:	68e0      	ldr	r0, [r4, #12]
 800b5b8:	9b03      	ldr	r3, [sp, #12]
 800b5ba:	4298      	cmp	r0, r3
 800b5bc:	bfb8      	it	lt
 800b5be:	4618      	movlt	r0, r3
 800b5c0:	e7a6      	b.n	800b510 <_printf_i+0x160>
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	4632      	mov	r2, r6
 800b5c6:	4649      	mov	r1, r9
 800b5c8:	4640      	mov	r0, r8
 800b5ca:	47d0      	blx	sl
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	d09d      	beq.n	800b50c <_printf_i+0x15c>
 800b5d0:	3501      	adds	r5, #1
 800b5d2:	68e3      	ldr	r3, [r4, #12]
 800b5d4:	9903      	ldr	r1, [sp, #12]
 800b5d6:	1a5b      	subs	r3, r3, r1
 800b5d8:	42ab      	cmp	r3, r5
 800b5da:	dcf2      	bgt.n	800b5c2 <_printf_i+0x212>
 800b5dc:	e7eb      	b.n	800b5b6 <_printf_i+0x206>
 800b5de:	2500      	movs	r5, #0
 800b5e0:	f104 0619 	add.w	r6, r4, #25
 800b5e4:	e7f5      	b.n	800b5d2 <_printf_i+0x222>
 800b5e6:	bf00      	nop
 800b5e8:	0800ddc2 	.word	0x0800ddc2
 800b5ec:	0800ddd3 	.word	0x0800ddd3

0800b5f0 <_scanf_chars>:
 800b5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f4:	4615      	mov	r5, r2
 800b5f6:	688a      	ldr	r2, [r1, #8]
 800b5f8:	4680      	mov	r8, r0
 800b5fa:	460c      	mov	r4, r1
 800b5fc:	b932      	cbnz	r2, 800b60c <_scanf_chars+0x1c>
 800b5fe:	698a      	ldr	r2, [r1, #24]
 800b600:	2a00      	cmp	r2, #0
 800b602:	bf14      	ite	ne
 800b604:	f04f 32ff 	movne.w	r2, #4294967295
 800b608:	2201      	moveq	r2, #1
 800b60a:	608a      	str	r2, [r1, #8]
 800b60c:	6822      	ldr	r2, [r4, #0]
 800b60e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800b6a0 <_scanf_chars+0xb0>
 800b612:	06d1      	lsls	r1, r2, #27
 800b614:	bf5f      	itttt	pl
 800b616:	681a      	ldrpl	r2, [r3, #0]
 800b618:	1d11      	addpl	r1, r2, #4
 800b61a:	6019      	strpl	r1, [r3, #0]
 800b61c:	6816      	ldrpl	r6, [r2, #0]
 800b61e:	2700      	movs	r7, #0
 800b620:	69a0      	ldr	r0, [r4, #24]
 800b622:	b188      	cbz	r0, 800b648 <_scanf_chars+0x58>
 800b624:	2801      	cmp	r0, #1
 800b626:	d107      	bne.n	800b638 <_scanf_chars+0x48>
 800b628:	682b      	ldr	r3, [r5, #0]
 800b62a:	781a      	ldrb	r2, [r3, #0]
 800b62c:	6963      	ldr	r3, [r4, #20]
 800b62e:	5c9b      	ldrb	r3, [r3, r2]
 800b630:	b953      	cbnz	r3, 800b648 <_scanf_chars+0x58>
 800b632:	2f00      	cmp	r7, #0
 800b634:	d031      	beq.n	800b69a <_scanf_chars+0xaa>
 800b636:	e022      	b.n	800b67e <_scanf_chars+0x8e>
 800b638:	2802      	cmp	r0, #2
 800b63a:	d120      	bne.n	800b67e <_scanf_chars+0x8e>
 800b63c:	682b      	ldr	r3, [r5, #0]
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	f819 3003 	ldrb.w	r3, [r9, r3]
 800b644:	071b      	lsls	r3, r3, #28
 800b646:	d41a      	bmi.n	800b67e <_scanf_chars+0x8e>
 800b648:	6823      	ldr	r3, [r4, #0]
 800b64a:	06da      	lsls	r2, r3, #27
 800b64c:	bf5e      	ittt	pl
 800b64e:	682b      	ldrpl	r3, [r5, #0]
 800b650:	781b      	ldrbpl	r3, [r3, #0]
 800b652:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b656:	682a      	ldr	r2, [r5, #0]
 800b658:	686b      	ldr	r3, [r5, #4]
 800b65a:	3201      	adds	r2, #1
 800b65c:	602a      	str	r2, [r5, #0]
 800b65e:	68a2      	ldr	r2, [r4, #8]
 800b660:	3b01      	subs	r3, #1
 800b662:	3a01      	subs	r2, #1
 800b664:	606b      	str	r3, [r5, #4]
 800b666:	3701      	adds	r7, #1
 800b668:	60a2      	str	r2, [r4, #8]
 800b66a:	b142      	cbz	r2, 800b67e <_scanf_chars+0x8e>
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	dcd7      	bgt.n	800b620 <_scanf_chars+0x30>
 800b670:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b674:	4629      	mov	r1, r5
 800b676:	4640      	mov	r0, r8
 800b678:	4798      	blx	r3
 800b67a:	2800      	cmp	r0, #0
 800b67c:	d0d0      	beq.n	800b620 <_scanf_chars+0x30>
 800b67e:	6823      	ldr	r3, [r4, #0]
 800b680:	f013 0310 	ands.w	r3, r3, #16
 800b684:	d105      	bne.n	800b692 <_scanf_chars+0xa2>
 800b686:	68e2      	ldr	r2, [r4, #12]
 800b688:	3201      	adds	r2, #1
 800b68a:	60e2      	str	r2, [r4, #12]
 800b68c:	69a2      	ldr	r2, [r4, #24]
 800b68e:	b102      	cbz	r2, 800b692 <_scanf_chars+0xa2>
 800b690:	7033      	strb	r3, [r6, #0]
 800b692:	6923      	ldr	r3, [r4, #16]
 800b694:	443b      	add	r3, r7
 800b696:	6123      	str	r3, [r4, #16]
 800b698:	2000      	movs	r0, #0
 800b69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69e:	bf00      	nop
 800b6a0:	0800dcb1 	.word	0x0800dcb1

0800b6a4 <_scanf_i>:
 800b6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a8:	4698      	mov	r8, r3
 800b6aa:	4b74      	ldr	r3, [pc, #464]	@ (800b87c <_scanf_i+0x1d8>)
 800b6ac:	460c      	mov	r4, r1
 800b6ae:	4682      	mov	sl, r0
 800b6b0:	4616      	mov	r6, r2
 800b6b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b6b6:	b087      	sub	sp, #28
 800b6b8:	ab03      	add	r3, sp, #12
 800b6ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b6be:	4b70      	ldr	r3, [pc, #448]	@ (800b880 <_scanf_i+0x1dc>)
 800b6c0:	69a1      	ldr	r1, [r4, #24]
 800b6c2:	4a70      	ldr	r2, [pc, #448]	@ (800b884 <_scanf_i+0x1e0>)
 800b6c4:	2903      	cmp	r1, #3
 800b6c6:	bf08      	it	eq
 800b6c8:	461a      	moveq	r2, r3
 800b6ca:	68a3      	ldr	r3, [r4, #8]
 800b6cc:	9201      	str	r2, [sp, #4]
 800b6ce:	1e5a      	subs	r2, r3, #1
 800b6d0:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800b6d4:	bf88      	it	hi
 800b6d6:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800b6da:	4627      	mov	r7, r4
 800b6dc:	bf82      	ittt	hi
 800b6de:	eb03 0905 	addhi.w	r9, r3, r5
 800b6e2:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800b6e6:	60a3      	strhi	r3, [r4, #8]
 800b6e8:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b6ec:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800b6f0:	bf98      	it	ls
 800b6f2:	f04f 0900 	movls.w	r9, #0
 800b6f6:	6023      	str	r3, [r4, #0]
 800b6f8:	463d      	mov	r5, r7
 800b6fa:	f04f 0b00 	mov.w	fp, #0
 800b6fe:	6831      	ldr	r1, [r6, #0]
 800b700:	ab03      	add	r3, sp, #12
 800b702:	7809      	ldrb	r1, [r1, #0]
 800b704:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b708:	2202      	movs	r2, #2
 800b70a:	f7f4 fd69 	bl	80001e0 <memchr>
 800b70e:	b328      	cbz	r0, 800b75c <_scanf_i+0xb8>
 800b710:	f1bb 0f01 	cmp.w	fp, #1
 800b714:	d159      	bne.n	800b7ca <_scanf_i+0x126>
 800b716:	6862      	ldr	r2, [r4, #4]
 800b718:	b92a      	cbnz	r2, 800b726 <_scanf_i+0x82>
 800b71a:	6822      	ldr	r2, [r4, #0]
 800b71c:	2108      	movs	r1, #8
 800b71e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800b722:	6061      	str	r1, [r4, #4]
 800b724:	6022      	str	r2, [r4, #0]
 800b726:	6822      	ldr	r2, [r4, #0]
 800b728:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800b72c:	6022      	str	r2, [r4, #0]
 800b72e:	68a2      	ldr	r2, [r4, #8]
 800b730:	1e51      	subs	r1, r2, #1
 800b732:	60a1      	str	r1, [r4, #8]
 800b734:	b192      	cbz	r2, 800b75c <_scanf_i+0xb8>
 800b736:	6832      	ldr	r2, [r6, #0]
 800b738:	1c51      	adds	r1, r2, #1
 800b73a:	6031      	str	r1, [r6, #0]
 800b73c:	7812      	ldrb	r2, [r2, #0]
 800b73e:	f805 2b01 	strb.w	r2, [r5], #1
 800b742:	6872      	ldr	r2, [r6, #4]
 800b744:	3a01      	subs	r2, #1
 800b746:	2a00      	cmp	r2, #0
 800b748:	6072      	str	r2, [r6, #4]
 800b74a:	dc07      	bgt.n	800b75c <_scanf_i+0xb8>
 800b74c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800b750:	4631      	mov	r1, r6
 800b752:	4650      	mov	r0, sl
 800b754:	4790      	blx	r2
 800b756:	2800      	cmp	r0, #0
 800b758:	f040 8085 	bne.w	800b866 <_scanf_i+0x1c2>
 800b75c:	f10b 0b01 	add.w	fp, fp, #1
 800b760:	f1bb 0f03 	cmp.w	fp, #3
 800b764:	d1cb      	bne.n	800b6fe <_scanf_i+0x5a>
 800b766:	6863      	ldr	r3, [r4, #4]
 800b768:	b90b      	cbnz	r3, 800b76e <_scanf_i+0xca>
 800b76a:	230a      	movs	r3, #10
 800b76c:	6063      	str	r3, [r4, #4]
 800b76e:	6863      	ldr	r3, [r4, #4]
 800b770:	4945      	ldr	r1, [pc, #276]	@ (800b888 <_scanf_i+0x1e4>)
 800b772:	6960      	ldr	r0, [r4, #20]
 800b774:	1ac9      	subs	r1, r1, r3
 800b776:	f000 f935 	bl	800b9e4 <__sccl>
 800b77a:	f04f 0b00 	mov.w	fp, #0
 800b77e:	68a3      	ldr	r3, [r4, #8]
 800b780:	6822      	ldr	r2, [r4, #0]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d03d      	beq.n	800b802 <_scanf_i+0x15e>
 800b786:	6831      	ldr	r1, [r6, #0]
 800b788:	6960      	ldr	r0, [r4, #20]
 800b78a:	f891 c000 	ldrb.w	ip, [r1]
 800b78e:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b792:	2800      	cmp	r0, #0
 800b794:	d035      	beq.n	800b802 <_scanf_i+0x15e>
 800b796:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800b79a:	d124      	bne.n	800b7e6 <_scanf_i+0x142>
 800b79c:	0510      	lsls	r0, r2, #20
 800b79e:	d522      	bpl.n	800b7e6 <_scanf_i+0x142>
 800b7a0:	f10b 0b01 	add.w	fp, fp, #1
 800b7a4:	f1b9 0f00 	cmp.w	r9, #0
 800b7a8:	d003      	beq.n	800b7b2 <_scanf_i+0x10e>
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	f109 39ff 	add.w	r9, r9, #4294967295
 800b7b0:	60a3      	str	r3, [r4, #8]
 800b7b2:	6873      	ldr	r3, [r6, #4]
 800b7b4:	3b01      	subs	r3, #1
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	6073      	str	r3, [r6, #4]
 800b7ba:	dd1b      	ble.n	800b7f4 <_scanf_i+0x150>
 800b7bc:	6833      	ldr	r3, [r6, #0]
 800b7be:	3301      	adds	r3, #1
 800b7c0:	6033      	str	r3, [r6, #0]
 800b7c2:	68a3      	ldr	r3, [r4, #8]
 800b7c4:	3b01      	subs	r3, #1
 800b7c6:	60a3      	str	r3, [r4, #8]
 800b7c8:	e7d9      	b.n	800b77e <_scanf_i+0xda>
 800b7ca:	f1bb 0f02 	cmp.w	fp, #2
 800b7ce:	d1ae      	bne.n	800b72e <_scanf_i+0x8a>
 800b7d0:	6822      	ldr	r2, [r4, #0]
 800b7d2:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800b7d6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b7da:	d1bf      	bne.n	800b75c <_scanf_i+0xb8>
 800b7dc:	2110      	movs	r1, #16
 800b7de:	6061      	str	r1, [r4, #4]
 800b7e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800b7e4:	e7a2      	b.n	800b72c <_scanf_i+0x88>
 800b7e6:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800b7ea:	6022      	str	r2, [r4, #0]
 800b7ec:	780b      	ldrb	r3, [r1, #0]
 800b7ee:	f805 3b01 	strb.w	r3, [r5], #1
 800b7f2:	e7de      	b.n	800b7b2 <_scanf_i+0x10e>
 800b7f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800b7f8:	4631      	mov	r1, r6
 800b7fa:	4650      	mov	r0, sl
 800b7fc:	4798      	blx	r3
 800b7fe:	2800      	cmp	r0, #0
 800b800:	d0df      	beq.n	800b7c2 <_scanf_i+0x11e>
 800b802:	6823      	ldr	r3, [r4, #0]
 800b804:	05d9      	lsls	r1, r3, #23
 800b806:	d50d      	bpl.n	800b824 <_scanf_i+0x180>
 800b808:	42bd      	cmp	r5, r7
 800b80a:	d909      	bls.n	800b820 <_scanf_i+0x17c>
 800b80c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b810:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800b814:	4632      	mov	r2, r6
 800b816:	4650      	mov	r0, sl
 800b818:	4798      	blx	r3
 800b81a:	f105 39ff 	add.w	r9, r5, #4294967295
 800b81e:	464d      	mov	r5, r9
 800b820:	42bd      	cmp	r5, r7
 800b822:	d028      	beq.n	800b876 <_scanf_i+0x1d2>
 800b824:	6822      	ldr	r2, [r4, #0]
 800b826:	f012 0210 	ands.w	r2, r2, #16
 800b82a:	d113      	bne.n	800b854 <_scanf_i+0x1b0>
 800b82c:	702a      	strb	r2, [r5, #0]
 800b82e:	6863      	ldr	r3, [r4, #4]
 800b830:	9e01      	ldr	r6, [sp, #4]
 800b832:	4639      	mov	r1, r7
 800b834:	4650      	mov	r0, sl
 800b836:	47b0      	blx	r6
 800b838:	f8d8 3000 	ldr.w	r3, [r8]
 800b83c:	6821      	ldr	r1, [r4, #0]
 800b83e:	1d1a      	adds	r2, r3, #4
 800b840:	f8c8 2000 	str.w	r2, [r8]
 800b844:	f011 0f20 	tst.w	r1, #32
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	d00f      	beq.n	800b86c <_scanf_i+0x1c8>
 800b84c:	6018      	str	r0, [r3, #0]
 800b84e:	68e3      	ldr	r3, [r4, #12]
 800b850:	3301      	adds	r3, #1
 800b852:	60e3      	str	r3, [r4, #12]
 800b854:	6923      	ldr	r3, [r4, #16]
 800b856:	1bed      	subs	r5, r5, r7
 800b858:	445d      	add	r5, fp
 800b85a:	442b      	add	r3, r5
 800b85c:	6123      	str	r3, [r4, #16]
 800b85e:	2000      	movs	r0, #0
 800b860:	b007      	add	sp, #28
 800b862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b866:	f04f 0b00 	mov.w	fp, #0
 800b86a:	e7ca      	b.n	800b802 <_scanf_i+0x15e>
 800b86c:	07ca      	lsls	r2, r1, #31
 800b86e:	bf4c      	ite	mi
 800b870:	8018      	strhmi	r0, [r3, #0]
 800b872:	6018      	strpl	r0, [r3, #0]
 800b874:	e7eb      	b.n	800b84e <_scanf_i+0x1aa>
 800b876:	2001      	movs	r0, #1
 800b878:	e7f2      	b.n	800b860 <_scanf_i+0x1bc>
 800b87a:	bf00      	nop
 800b87c:	0800d4ac 	.word	0x0800d4ac
 800b880:	0800ac89 	.word	0x0800ac89
 800b884:	0800cc55 	.word	0x0800cc55
 800b888:	0800ddf4 	.word	0x0800ddf4

0800b88c <__sflush_r>:
 800b88c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b894:	0716      	lsls	r6, r2, #28
 800b896:	4605      	mov	r5, r0
 800b898:	460c      	mov	r4, r1
 800b89a:	d454      	bmi.n	800b946 <__sflush_r+0xba>
 800b89c:	684b      	ldr	r3, [r1, #4]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	dc02      	bgt.n	800b8a8 <__sflush_r+0x1c>
 800b8a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	dd48      	ble.n	800b93a <__sflush_r+0xae>
 800b8a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8aa:	2e00      	cmp	r6, #0
 800b8ac:	d045      	beq.n	800b93a <__sflush_r+0xae>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b8b4:	682f      	ldr	r7, [r5, #0]
 800b8b6:	6a21      	ldr	r1, [r4, #32]
 800b8b8:	602b      	str	r3, [r5, #0]
 800b8ba:	d030      	beq.n	800b91e <__sflush_r+0x92>
 800b8bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b8be:	89a3      	ldrh	r3, [r4, #12]
 800b8c0:	0759      	lsls	r1, r3, #29
 800b8c2:	d505      	bpl.n	800b8d0 <__sflush_r+0x44>
 800b8c4:	6863      	ldr	r3, [r4, #4]
 800b8c6:	1ad2      	subs	r2, r2, r3
 800b8c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b8ca:	b10b      	cbz	r3, 800b8d0 <__sflush_r+0x44>
 800b8cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b8ce:	1ad2      	subs	r2, r2, r3
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b8d4:	6a21      	ldr	r1, [r4, #32]
 800b8d6:	4628      	mov	r0, r5
 800b8d8:	47b0      	blx	r6
 800b8da:	1c43      	adds	r3, r0, #1
 800b8dc:	89a3      	ldrh	r3, [r4, #12]
 800b8de:	d106      	bne.n	800b8ee <__sflush_r+0x62>
 800b8e0:	6829      	ldr	r1, [r5, #0]
 800b8e2:	291d      	cmp	r1, #29
 800b8e4:	d82b      	bhi.n	800b93e <__sflush_r+0xb2>
 800b8e6:	4a2a      	ldr	r2, [pc, #168]	@ (800b990 <__sflush_r+0x104>)
 800b8e8:	410a      	asrs	r2, r1
 800b8ea:	07d6      	lsls	r6, r2, #31
 800b8ec:	d427      	bmi.n	800b93e <__sflush_r+0xb2>
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	6062      	str	r2, [r4, #4]
 800b8f2:	04d9      	lsls	r1, r3, #19
 800b8f4:	6922      	ldr	r2, [r4, #16]
 800b8f6:	6022      	str	r2, [r4, #0]
 800b8f8:	d504      	bpl.n	800b904 <__sflush_r+0x78>
 800b8fa:	1c42      	adds	r2, r0, #1
 800b8fc:	d101      	bne.n	800b902 <__sflush_r+0x76>
 800b8fe:	682b      	ldr	r3, [r5, #0]
 800b900:	b903      	cbnz	r3, 800b904 <__sflush_r+0x78>
 800b902:	6560      	str	r0, [r4, #84]	@ 0x54
 800b904:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b906:	602f      	str	r7, [r5, #0]
 800b908:	b1b9      	cbz	r1, 800b93a <__sflush_r+0xae>
 800b90a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b90e:	4299      	cmp	r1, r3
 800b910:	d002      	beq.n	800b918 <__sflush_r+0x8c>
 800b912:	4628      	mov	r0, r5
 800b914:	f7fe fa3e 	bl	8009d94 <_free_r>
 800b918:	2300      	movs	r3, #0
 800b91a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b91c:	e00d      	b.n	800b93a <__sflush_r+0xae>
 800b91e:	2301      	movs	r3, #1
 800b920:	4628      	mov	r0, r5
 800b922:	47b0      	blx	r6
 800b924:	4602      	mov	r2, r0
 800b926:	1c50      	adds	r0, r2, #1
 800b928:	d1c9      	bne.n	800b8be <__sflush_r+0x32>
 800b92a:	682b      	ldr	r3, [r5, #0]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d0c6      	beq.n	800b8be <__sflush_r+0x32>
 800b930:	2b1d      	cmp	r3, #29
 800b932:	d001      	beq.n	800b938 <__sflush_r+0xac>
 800b934:	2b16      	cmp	r3, #22
 800b936:	d11e      	bne.n	800b976 <__sflush_r+0xea>
 800b938:	602f      	str	r7, [r5, #0]
 800b93a:	2000      	movs	r0, #0
 800b93c:	e022      	b.n	800b984 <__sflush_r+0xf8>
 800b93e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b942:	b21b      	sxth	r3, r3
 800b944:	e01b      	b.n	800b97e <__sflush_r+0xf2>
 800b946:	690f      	ldr	r7, [r1, #16]
 800b948:	2f00      	cmp	r7, #0
 800b94a:	d0f6      	beq.n	800b93a <__sflush_r+0xae>
 800b94c:	0793      	lsls	r3, r2, #30
 800b94e:	680e      	ldr	r6, [r1, #0]
 800b950:	bf08      	it	eq
 800b952:	694b      	ldreq	r3, [r1, #20]
 800b954:	600f      	str	r7, [r1, #0]
 800b956:	bf18      	it	ne
 800b958:	2300      	movne	r3, #0
 800b95a:	eba6 0807 	sub.w	r8, r6, r7
 800b95e:	608b      	str	r3, [r1, #8]
 800b960:	f1b8 0f00 	cmp.w	r8, #0
 800b964:	dde9      	ble.n	800b93a <__sflush_r+0xae>
 800b966:	6a21      	ldr	r1, [r4, #32]
 800b968:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b96a:	4643      	mov	r3, r8
 800b96c:	463a      	mov	r2, r7
 800b96e:	4628      	mov	r0, r5
 800b970:	47b0      	blx	r6
 800b972:	2800      	cmp	r0, #0
 800b974:	dc08      	bgt.n	800b988 <__sflush_r+0xfc>
 800b976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b97a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b97e:	81a3      	strh	r3, [r4, #12]
 800b980:	f04f 30ff 	mov.w	r0, #4294967295
 800b984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b988:	4407      	add	r7, r0
 800b98a:	eba8 0800 	sub.w	r8, r8, r0
 800b98e:	e7e7      	b.n	800b960 <__sflush_r+0xd4>
 800b990:	dfbffffe 	.word	0xdfbffffe

0800b994 <_fflush_r>:
 800b994:	b538      	push	{r3, r4, r5, lr}
 800b996:	690b      	ldr	r3, [r1, #16]
 800b998:	4605      	mov	r5, r0
 800b99a:	460c      	mov	r4, r1
 800b99c:	b913      	cbnz	r3, 800b9a4 <_fflush_r+0x10>
 800b99e:	2500      	movs	r5, #0
 800b9a0:	4628      	mov	r0, r5
 800b9a2:	bd38      	pop	{r3, r4, r5, pc}
 800b9a4:	b118      	cbz	r0, 800b9ae <_fflush_r+0x1a>
 800b9a6:	6a03      	ldr	r3, [r0, #32]
 800b9a8:	b90b      	cbnz	r3, 800b9ae <_fflush_r+0x1a>
 800b9aa:	f7fe f827 	bl	80099fc <__sinit>
 800b9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d0f3      	beq.n	800b99e <_fflush_r+0xa>
 800b9b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b9b8:	07d0      	lsls	r0, r2, #31
 800b9ba:	d404      	bmi.n	800b9c6 <_fflush_r+0x32>
 800b9bc:	0599      	lsls	r1, r3, #22
 800b9be:	d402      	bmi.n	800b9c6 <_fflush_r+0x32>
 800b9c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9c2:	f7fe f9d0 	bl	8009d66 <__retarget_lock_acquire_recursive>
 800b9c6:	4628      	mov	r0, r5
 800b9c8:	4621      	mov	r1, r4
 800b9ca:	f7ff ff5f 	bl	800b88c <__sflush_r>
 800b9ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b9d0:	07da      	lsls	r2, r3, #31
 800b9d2:	4605      	mov	r5, r0
 800b9d4:	d4e4      	bmi.n	800b9a0 <_fflush_r+0xc>
 800b9d6:	89a3      	ldrh	r3, [r4, #12]
 800b9d8:	059b      	lsls	r3, r3, #22
 800b9da:	d4e1      	bmi.n	800b9a0 <_fflush_r+0xc>
 800b9dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b9de:	f7fe f9c3 	bl	8009d68 <__retarget_lock_release_recursive>
 800b9e2:	e7dd      	b.n	800b9a0 <_fflush_r+0xc>

0800b9e4 <__sccl>:
 800b9e4:	b570      	push	{r4, r5, r6, lr}
 800b9e6:	780b      	ldrb	r3, [r1, #0]
 800b9e8:	4604      	mov	r4, r0
 800b9ea:	2b5e      	cmp	r3, #94	@ 0x5e
 800b9ec:	bf0b      	itete	eq
 800b9ee:	784b      	ldrbeq	r3, [r1, #1]
 800b9f0:	1c4a      	addne	r2, r1, #1
 800b9f2:	1c8a      	addeq	r2, r1, #2
 800b9f4:	2100      	movne	r1, #0
 800b9f6:	bf08      	it	eq
 800b9f8:	2101      	moveq	r1, #1
 800b9fa:	3801      	subs	r0, #1
 800b9fc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800ba00:	f800 1f01 	strb.w	r1, [r0, #1]!
 800ba04:	42a8      	cmp	r0, r5
 800ba06:	d1fb      	bne.n	800ba00 <__sccl+0x1c>
 800ba08:	b90b      	cbnz	r3, 800ba0e <__sccl+0x2a>
 800ba0a:	1e50      	subs	r0, r2, #1
 800ba0c:	bd70      	pop	{r4, r5, r6, pc}
 800ba0e:	f081 0101 	eor.w	r1, r1, #1
 800ba12:	54e1      	strb	r1, [r4, r3]
 800ba14:	4610      	mov	r0, r2
 800ba16:	4602      	mov	r2, r0
 800ba18:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ba1c:	2d2d      	cmp	r5, #45	@ 0x2d
 800ba1e:	d005      	beq.n	800ba2c <__sccl+0x48>
 800ba20:	2d5d      	cmp	r5, #93	@ 0x5d
 800ba22:	d016      	beq.n	800ba52 <__sccl+0x6e>
 800ba24:	2d00      	cmp	r5, #0
 800ba26:	d0f1      	beq.n	800ba0c <__sccl+0x28>
 800ba28:	462b      	mov	r3, r5
 800ba2a:	e7f2      	b.n	800ba12 <__sccl+0x2e>
 800ba2c:	7846      	ldrb	r6, [r0, #1]
 800ba2e:	2e5d      	cmp	r6, #93	@ 0x5d
 800ba30:	d0fa      	beq.n	800ba28 <__sccl+0x44>
 800ba32:	42b3      	cmp	r3, r6
 800ba34:	dcf8      	bgt.n	800ba28 <__sccl+0x44>
 800ba36:	3002      	adds	r0, #2
 800ba38:	461a      	mov	r2, r3
 800ba3a:	3201      	adds	r2, #1
 800ba3c:	4296      	cmp	r6, r2
 800ba3e:	54a1      	strb	r1, [r4, r2]
 800ba40:	dcfb      	bgt.n	800ba3a <__sccl+0x56>
 800ba42:	1af2      	subs	r2, r6, r3
 800ba44:	3a01      	subs	r2, #1
 800ba46:	1c5d      	adds	r5, r3, #1
 800ba48:	42b3      	cmp	r3, r6
 800ba4a:	bfa8      	it	ge
 800ba4c:	2200      	movge	r2, #0
 800ba4e:	18ab      	adds	r3, r5, r2
 800ba50:	e7e1      	b.n	800ba16 <__sccl+0x32>
 800ba52:	4610      	mov	r0, r2
 800ba54:	e7da      	b.n	800ba0c <__sccl+0x28>

0800ba56 <__submore>:
 800ba56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba5a:	460c      	mov	r4, r1
 800ba5c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800ba5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ba62:	4299      	cmp	r1, r3
 800ba64:	d11d      	bne.n	800baa2 <__submore+0x4c>
 800ba66:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800ba6a:	f7fe f9ff 	bl	8009e6c <_malloc_r>
 800ba6e:	b918      	cbnz	r0, 800ba78 <__submore+0x22>
 800ba70:	f04f 30ff 	mov.w	r0, #4294967295
 800ba74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ba7c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ba7e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800ba82:	6360      	str	r0, [r4, #52]	@ 0x34
 800ba84:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800ba88:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ba8c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800ba90:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ba94:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800ba98:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800ba9c:	6020      	str	r0, [r4, #0]
 800ba9e:	2000      	movs	r0, #0
 800baa0:	e7e8      	b.n	800ba74 <__submore+0x1e>
 800baa2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800baa4:	0077      	lsls	r7, r6, #1
 800baa6:	463a      	mov	r2, r7
 800baa8:	f001 f838 	bl	800cb1c <_realloc_r>
 800baac:	4605      	mov	r5, r0
 800baae:	2800      	cmp	r0, #0
 800bab0:	d0de      	beq.n	800ba70 <__submore+0x1a>
 800bab2:	eb00 0806 	add.w	r8, r0, r6
 800bab6:	4601      	mov	r1, r0
 800bab8:	4632      	mov	r2, r6
 800baba:	4640      	mov	r0, r8
 800babc:	f7fe f955 	bl	8009d6a <memcpy>
 800bac0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800bac4:	f8c4 8000 	str.w	r8, [r4]
 800bac8:	e7e9      	b.n	800ba9e <__submore+0x48>

0800baca <strncmp>:
 800baca:	b510      	push	{r4, lr}
 800bacc:	b16a      	cbz	r2, 800baea <strncmp+0x20>
 800bace:	3901      	subs	r1, #1
 800bad0:	1884      	adds	r4, r0, r2
 800bad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bad6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bada:	429a      	cmp	r2, r3
 800badc:	d103      	bne.n	800bae6 <strncmp+0x1c>
 800bade:	42a0      	cmp	r0, r4
 800bae0:	d001      	beq.n	800bae6 <strncmp+0x1c>
 800bae2:	2a00      	cmp	r2, #0
 800bae4:	d1f5      	bne.n	800bad2 <strncmp+0x8>
 800bae6:	1ad0      	subs	r0, r2, r3
 800bae8:	bd10      	pop	{r4, pc}
 800baea:	4610      	mov	r0, r2
 800baec:	e7fc      	b.n	800bae8 <strncmp+0x1e>
	...

0800baf0 <_sbrk_r>:
 800baf0:	b538      	push	{r3, r4, r5, lr}
 800baf2:	4d06      	ldr	r5, [pc, #24]	@ (800bb0c <_sbrk_r+0x1c>)
 800baf4:	2300      	movs	r3, #0
 800baf6:	4604      	mov	r4, r0
 800baf8:	4608      	mov	r0, r1
 800bafa:	602b      	str	r3, [r5, #0]
 800bafc:	f7f7 fa32 	bl	8002f64 <_sbrk>
 800bb00:	1c43      	adds	r3, r0, #1
 800bb02:	d102      	bne.n	800bb0a <_sbrk_r+0x1a>
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	b103      	cbz	r3, 800bb0a <_sbrk_r+0x1a>
 800bb08:	6023      	str	r3, [r4, #0]
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	20013788 	.word	0x20013788

0800bb10 <nan>:
 800bb10:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800bb18 <nan+0x8>
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop
 800bb18:	00000000 	.word	0x00000000
 800bb1c:	7ff80000 	.word	0x7ff80000

0800bb20 <rshift>:
 800bb20:	6903      	ldr	r3, [r0, #16]
 800bb22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bb26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bb2e:	f100 0414 	add.w	r4, r0, #20
 800bb32:	dd45      	ble.n	800bbc0 <rshift+0xa0>
 800bb34:	f011 011f 	ands.w	r1, r1, #31
 800bb38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bb3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bb40:	d10c      	bne.n	800bb5c <rshift+0x3c>
 800bb42:	f100 0710 	add.w	r7, r0, #16
 800bb46:	4629      	mov	r1, r5
 800bb48:	42b1      	cmp	r1, r6
 800bb4a:	d334      	bcc.n	800bbb6 <rshift+0x96>
 800bb4c:	1a9b      	subs	r3, r3, r2
 800bb4e:	009b      	lsls	r3, r3, #2
 800bb50:	1eea      	subs	r2, r5, #3
 800bb52:	4296      	cmp	r6, r2
 800bb54:	bf38      	it	cc
 800bb56:	2300      	movcc	r3, #0
 800bb58:	4423      	add	r3, r4
 800bb5a:	e015      	b.n	800bb88 <rshift+0x68>
 800bb5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bb60:	f1c1 0820 	rsb	r8, r1, #32
 800bb64:	40cf      	lsrs	r7, r1
 800bb66:	f105 0e04 	add.w	lr, r5, #4
 800bb6a:	46a1      	mov	r9, r4
 800bb6c:	4576      	cmp	r6, lr
 800bb6e:	46f4      	mov	ip, lr
 800bb70:	d815      	bhi.n	800bb9e <rshift+0x7e>
 800bb72:	1a9a      	subs	r2, r3, r2
 800bb74:	0092      	lsls	r2, r2, #2
 800bb76:	3a04      	subs	r2, #4
 800bb78:	3501      	adds	r5, #1
 800bb7a:	42ae      	cmp	r6, r5
 800bb7c:	bf38      	it	cc
 800bb7e:	2200      	movcc	r2, #0
 800bb80:	18a3      	adds	r3, r4, r2
 800bb82:	50a7      	str	r7, [r4, r2]
 800bb84:	b107      	cbz	r7, 800bb88 <rshift+0x68>
 800bb86:	3304      	adds	r3, #4
 800bb88:	1b1a      	subs	r2, r3, r4
 800bb8a:	42a3      	cmp	r3, r4
 800bb8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bb90:	bf08      	it	eq
 800bb92:	2300      	moveq	r3, #0
 800bb94:	6102      	str	r2, [r0, #16]
 800bb96:	bf08      	it	eq
 800bb98:	6143      	streq	r3, [r0, #20]
 800bb9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb9e:	f8dc c000 	ldr.w	ip, [ip]
 800bba2:	fa0c fc08 	lsl.w	ip, ip, r8
 800bba6:	ea4c 0707 	orr.w	r7, ip, r7
 800bbaa:	f849 7b04 	str.w	r7, [r9], #4
 800bbae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bbb2:	40cf      	lsrs	r7, r1
 800bbb4:	e7da      	b.n	800bb6c <rshift+0x4c>
 800bbb6:	f851 cb04 	ldr.w	ip, [r1], #4
 800bbba:	f847 cf04 	str.w	ip, [r7, #4]!
 800bbbe:	e7c3      	b.n	800bb48 <rshift+0x28>
 800bbc0:	4623      	mov	r3, r4
 800bbc2:	e7e1      	b.n	800bb88 <rshift+0x68>

0800bbc4 <__hexdig_fun>:
 800bbc4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800bbc8:	2b09      	cmp	r3, #9
 800bbca:	d802      	bhi.n	800bbd2 <__hexdig_fun+0xe>
 800bbcc:	3820      	subs	r0, #32
 800bbce:	b2c0      	uxtb	r0, r0
 800bbd0:	4770      	bx	lr
 800bbd2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800bbd6:	2b05      	cmp	r3, #5
 800bbd8:	d801      	bhi.n	800bbde <__hexdig_fun+0x1a>
 800bbda:	3847      	subs	r0, #71	@ 0x47
 800bbdc:	e7f7      	b.n	800bbce <__hexdig_fun+0xa>
 800bbde:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800bbe2:	2b05      	cmp	r3, #5
 800bbe4:	d801      	bhi.n	800bbea <__hexdig_fun+0x26>
 800bbe6:	3827      	subs	r0, #39	@ 0x27
 800bbe8:	e7f1      	b.n	800bbce <__hexdig_fun+0xa>
 800bbea:	2000      	movs	r0, #0
 800bbec:	4770      	bx	lr
	...

0800bbf0 <__gethex>:
 800bbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	b085      	sub	sp, #20
 800bbf6:	468a      	mov	sl, r1
 800bbf8:	9302      	str	r3, [sp, #8]
 800bbfa:	680b      	ldr	r3, [r1, #0]
 800bbfc:	9001      	str	r0, [sp, #4]
 800bbfe:	4690      	mov	r8, r2
 800bc00:	1c9c      	adds	r4, r3, #2
 800bc02:	46a1      	mov	r9, r4
 800bc04:	f814 0b01 	ldrb.w	r0, [r4], #1
 800bc08:	2830      	cmp	r0, #48	@ 0x30
 800bc0a:	d0fa      	beq.n	800bc02 <__gethex+0x12>
 800bc0c:	eba9 0303 	sub.w	r3, r9, r3
 800bc10:	f1a3 0b02 	sub.w	fp, r3, #2
 800bc14:	f7ff ffd6 	bl	800bbc4 <__hexdig_fun>
 800bc18:	4605      	mov	r5, r0
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	d168      	bne.n	800bcf0 <__gethex+0x100>
 800bc1e:	49a0      	ldr	r1, [pc, #640]	@ (800bea0 <__gethex+0x2b0>)
 800bc20:	2201      	movs	r2, #1
 800bc22:	4648      	mov	r0, r9
 800bc24:	f7ff ff51 	bl	800baca <strncmp>
 800bc28:	4607      	mov	r7, r0
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d167      	bne.n	800bcfe <__gethex+0x10e>
 800bc2e:	f899 0001 	ldrb.w	r0, [r9, #1]
 800bc32:	4626      	mov	r6, r4
 800bc34:	f7ff ffc6 	bl	800bbc4 <__hexdig_fun>
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d062      	beq.n	800bd02 <__gethex+0x112>
 800bc3c:	4623      	mov	r3, r4
 800bc3e:	7818      	ldrb	r0, [r3, #0]
 800bc40:	2830      	cmp	r0, #48	@ 0x30
 800bc42:	4699      	mov	r9, r3
 800bc44:	f103 0301 	add.w	r3, r3, #1
 800bc48:	d0f9      	beq.n	800bc3e <__gethex+0x4e>
 800bc4a:	f7ff ffbb 	bl	800bbc4 <__hexdig_fun>
 800bc4e:	fab0 f580 	clz	r5, r0
 800bc52:	096d      	lsrs	r5, r5, #5
 800bc54:	f04f 0b01 	mov.w	fp, #1
 800bc58:	464a      	mov	r2, r9
 800bc5a:	4616      	mov	r6, r2
 800bc5c:	3201      	adds	r2, #1
 800bc5e:	7830      	ldrb	r0, [r6, #0]
 800bc60:	f7ff ffb0 	bl	800bbc4 <__hexdig_fun>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d1f8      	bne.n	800bc5a <__gethex+0x6a>
 800bc68:	498d      	ldr	r1, [pc, #564]	@ (800bea0 <__gethex+0x2b0>)
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	f7ff ff2c 	bl	800baca <strncmp>
 800bc72:	2800      	cmp	r0, #0
 800bc74:	d13f      	bne.n	800bcf6 <__gethex+0x106>
 800bc76:	b944      	cbnz	r4, 800bc8a <__gethex+0x9a>
 800bc78:	1c74      	adds	r4, r6, #1
 800bc7a:	4622      	mov	r2, r4
 800bc7c:	4616      	mov	r6, r2
 800bc7e:	3201      	adds	r2, #1
 800bc80:	7830      	ldrb	r0, [r6, #0]
 800bc82:	f7ff ff9f 	bl	800bbc4 <__hexdig_fun>
 800bc86:	2800      	cmp	r0, #0
 800bc88:	d1f8      	bne.n	800bc7c <__gethex+0x8c>
 800bc8a:	1ba4      	subs	r4, r4, r6
 800bc8c:	00a7      	lsls	r7, r4, #2
 800bc8e:	7833      	ldrb	r3, [r6, #0]
 800bc90:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800bc94:	2b50      	cmp	r3, #80	@ 0x50
 800bc96:	d13e      	bne.n	800bd16 <__gethex+0x126>
 800bc98:	7873      	ldrb	r3, [r6, #1]
 800bc9a:	2b2b      	cmp	r3, #43	@ 0x2b
 800bc9c:	d033      	beq.n	800bd06 <__gethex+0x116>
 800bc9e:	2b2d      	cmp	r3, #45	@ 0x2d
 800bca0:	d034      	beq.n	800bd0c <__gethex+0x11c>
 800bca2:	1c71      	adds	r1, r6, #1
 800bca4:	2400      	movs	r4, #0
 800bca6:	7808      	ldrb	r0, [r1, #0]
 800bca8:	f7ff ff8c 	bl	800bbc4 <__hexdig_fun>
 800bcac:	1e43      	subs	r3, r0, #1
 800bcae:	b2db      	uxtb	r3, r3
 800bcb0:	2b18      	cmp	r3, #24
 800bcb2:	d830      	bhi.n	800bd16 <__gethex+0x126>
 800bcb4:	f1a0 0210 	sub.w	r2, r0, #16
 800bcb8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bcbc:	f7ff ff82 	bl	800bbc4 <__hexdig_fun>
 800bcc0:	f100 3cff 	add.w	ip, r0, #4294967295
 800bcc4:	fa5f fc8c 	uxtb.w	ip, ip
 800bcc8:	f1bc 0f18 	cmp.w	ip, #24
 800bccc:	f04f 030a 	mov.w	r3, #10
 800bcd0:	d91e      	bls.n	800bd10 <__gethex+0x120>
 800bcd2:	b104      	cbz	r4, 800bcd6 <__gethex+0xe6>
 800bcd4:	4252      	negs	r2, r2
 800bcd6:	4417      	add	r7, r2
 800bcd8:	f8ca 1000 	str.w	r1, [sl]
 800bcdc:	b1ed      	cbz	r5, 800bd1a <__gethex+0x12a>
 800bcde:	f1bb 0f00 	cmp.w	fp, #0
 800bce2:	bf0c      	ite	eq
 800bce4:	2506      	moveq	r5, #6
 800bce6:	2500      	movne	r5, #0
 800bce8:	4628      	mov	r0, r5
 800bcea:	b005      	add	sp, #20
 800bcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcf0:	2500      	movs	r5, #0
 800bcf2:	462c      	mov	r4, r5
 800bcf4:	e7b0      	b.n	800bc58 <__gethex+0x68>
 800bcf6:	2c00      	cmp	r4, #0
 800bcf8:	d1c7      	bne.n	800bc8a <__gethex+0x9a>
 800bcfa:	4627      	mov	r7, r4
 800bcfc:	e7c7      	b.n	800bc8e <__gethex+0x9e>
 800bcfe:	464e      	mov	r6, r9
 800bd00:	462f      	mov	r7, r5
 800bd02:	2501      	movs	r5, #1
 800bd04:	e7c3      	b.n	800bc8e <__gethex+0x9e>
 800bd06:	2400      	movs	r4, #0
 800bd08:	1cb1      	adds	r1, r6, #2
 800bd0a:	e7cc      	b.n	800bca6 <__gethex+0xb6>
 800bd0c:	2401      	movs	r4, #1
 800bd0e:	e7fb      	b.n	800bd08 <__gethex+0x118>
 800bd10:	fb03 0002 	mla	r0, r3, r2, r0
 800bd14:	e7ce      	b.n	800bcb4 <__gethex+0xc4>
 800bd16:	4631      	mov	r1, r6
 800bd18:	e7de      	b.n	800bcd8 <__gethex+0xe8>
 800bd1a:	eba6 0309 	sub.w	r3, r6, r9
 800bd1e:	3b01      	subs	r3, #1
 800bd20:	4629      	mov	r1, r5
 800bd22:	2b07      	cmp	r3, #7
 800bd24:	dc0a      	bgt.n	800bd3c <__gethex+0x14c>
 800bd26:	9801      	ldr	r0, [sp, #4]
 800bd28:	f000 fa46 	bl	800c1b8 <_Balloc>
 800bd2c:	4604      	mov	r4, r0
 800bd2e:	b940      	cbnz	r0, 800bd42 <__gethex+0x152>
 800bd30:	4b5c      	ldr	r3, [pc, #368]	@ (800bea4 <__gethex+0x2b4>)
 800bd32:	4602      	mov	r2, r0
 800bd34:	21e4      	movs	r1, #228	@ 0xe4
 800bd36:	485c      	ldr	r0, [pc, #368]	@ (800bea8 <__gethex+0x2b8>)
 800bd38:	f000 ff9c 	bl	800cc74 <__assert_func>
 800bd3c:	3101      	adds	r1, #1
 800bd3e:	105b      	asrs	r3, r3, #1
 800bd40:	e7ef      	b.n	800bd22 <__gethex+0x132>
 800bd42:	f100 0a14 	add.w	sl, r0, #20
 800bd46:	2300      	movs	r3, #0
 800bd48:	4655      	mov	r5, sl
 800bd4a:	469b      	mov	fp, r3
 800bd4c:	45b1      	cmp	r9, r6
 800bd4e:	d337      	bcc.n	800bdc0 <__gethex+0x1d0>
 800bd50:	f845 bb04 	str.w	fp, [r5], #4
 800bd54:	eba5 050a 	sub.w	r5, r5, sl
 800bd58:	10ad      	asrs	r5, r5, #2
 800bd5a:	6125      	str	r5, [r4, #16]
 800bd5c:	4658      	mov	r0, fp
 800bd5e:	f000 fb1d 	bl	800c39c <__hi0bits>
 800bd62:	016d      	lsls	r5, r5, #5
 800bd64:	f8d8 6000 	ldr.w	r6, [r8]
 800bd68:	1a2d      	subs	r5, r5, r0
 800bd6a:	42b5      	cmp	r5, r6
 800bd6c:	dd54      	ble.n	800be18 <__gethex+0x228>
 800bd6e:	1bad      	subs	r5, r5, r6
 800bd70:	4629      	mov	r1, r5
 800bd72:	4620      	mov	r0, r4
 800bd74:	f000 feb1 	bl	800cada <__any_on>
 800bd78:	4681      	mov	r9, r0
 800bd7a:	b178      	cbz	r0, 800bd9c <__gethex+0x1ac>
 800bd7c:	1e6b      	subs	r3, r5, #1
 800bd7e:	1159      	asrs	r1, r3, #5
 800bd80:	f003 021f 	and.w	r2, r3, #31
 800bd84:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800bd88:	f04f 0901 	mov.w	r9, #1
 800bd8c:	fa09 f202 	lsl.w	r2, r9, r2
 800bd90:	420a      	tst	r2, r1
 800bd92:	d003      	beq.n	800bd9c <__gethex+0x1ac>
 800bd94:	454b      	cmp	r3, r9
 800bd96:	dc36      	bgt.n	800be06 <__gethex+0x216>
 800bd98:	f04f 0902 	mov.w	r9, #2
 800bd9c:	4629      	mov	r1, r5
 800bd9e:	4620      	mov	r0, r4
 800bda0:	f7ff febe 	bl	800bb20 <rshift>
 800bda4:	442f      	add	r7, r5
 800bda6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bdaa:	42bb      	cmp	r3, r7
 800bdac:	da42      	bge.n	800be34 <__gethex+0x244>
 800bdae:	9801      	ldr	r0, [sp, #4]
 800bdb0:	4621      	mov	r1, r4
 800bdb2:	f000 fa41 	bl	800c238 <_Bfree>
 800bdb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bdb8:	2300      	movs	r3, #0
 800bdba:	6013      	str	r3, [r2, #0]
 800bdbc:	25a3      	movs	r5, #163	@ 0xa3
 800bdbe:	e793      	b.n	800bce8 <__gethex+0xf8>
 800bdc0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800bdc4:	2a2e      	cmp	r2, #46	@ 0x2e
 800bdc6:	d012      	beq.n	800bdee <__gethex+0x1fe>
 800bdc8:	2b20      	cmp	r3, #32
 800bdca:	d104      	bne.n	800bdd6 <__gethex+0x1e6>
 800bdcc:	f845 bb04 	str.w	fp, [r5], #4
 800bdd0:	f04f 0b00 	mov.w	fp, #0
 800bdd4:	465b      	mov	r3, fp
 800bdd6:	7830      	ldrb	r0, [r6, #0]
 800bdd8:	9303      	str	r3, [sp, #12]
 800bdda:	f7ff fef3 	bl	800bbc4 <__hexdig_fun>
 800bdde:	9b03      	ldr	r3, [sp, #12]
 800bde0:	f000 000f 	and.w	r0, r0, #15
 800bde4:	4098      	lsls	r0, r3
 800bde6:	ea4b 0b00 	orr.w	fp, fp, r0
 800bdea:	3304      	adds	r3, #4
 800bdec:	e7ae      	b.n	800bd4c <__gethex+0x15c>
 800bdee:	45b1      	cmp	r9, r6
 800bdf0:	d8ea      	bhi.n	800bdc8 <__gethex+0x1d8>
 800bdf2:	492b      	ldr	r1, [pc, #172]	@ (800bea0 <__gethex+0x2b0>)
 800bdf4:	9303      	str	r3, [sp, #12]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	4630      	mov	r0, r6
 800bdfa:	f7ff fe66 	bl	800baca <strncmp>
 800bdfe:	9b03      	ldr	r3, [sp, #12]
 800be00:	2800      	cmp	r0, #0
 800be02:	d1e1      	bne.n	800bdc8 <__gethex+0x1d8>
 800be04:	e7a2      	b.n	800bd4c <__gethex+0x15c>
 800be06:	1ea9      	subs	r1, r5, #2
 800be08:	4620      	mov	r0, r4
 800be0a:	f000 fe66 	bl	800cada <__any_on>
 800be0e:	2800      	cmp	r0, #0
 800be10:	d0c2      	beq.n	800bd98 <__gethex+0x1a8>
 800be12:	f04f 0903 	mov.w	r9, #3
 800be16:	e7c1      	b.n	800bd9c <__gethex+0x1ac>
 800be18:	da09      	bge.n	800be2e <__gethex+0x23e>
 800be1a:	1b75      	subs	r5, r6, r5
 800be1c:	4621      	mov	r1, r4
 800be1e:	9801      	ldr	r0, [sp, #4]
 800be20:	462a      	mov	r2, r5
 800be22:	f000 fc21 	bl	800c668 <__lshift>
 800be26:	1b7f      	subs	r7, r7, r5
 800be28:	4604      	mov	r4, r0
 800be2a:	f100 0a14 	add.w	sl, r0, #20
 800be2e:	f04f 0900 	mov.w	r9, #0
 800be32:	e7b8      	b.n	800bda6 <__gethex+0x1b6>
 800be34:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800be38:	42bd      	cmp	r5, r7
 800be3a:	dd6f      	ble.n	800bf1c <__gethex+0x32c>
 800be3c:	1bed      	subs	r5, r5, r7
 800be3e:	42ae      	cmp	r6, r5
 800be40:	dc34      	bgt.n	800beac <__gethex+0x2bc>
 800be42:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be46:	2b02      	cmp	r3, #2
 800be48:	d022      	beq.n	800be90 <__gethex+0x2a0>
 800be4a:	2b03      	cmp	r3, #3
 800be4c:	d024      	beq.n	800be98 <__gethex+0x2a8>
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d115      	bne.n	800be7e <__gethex+0x28e>
 800be52:	42ae      	cmp	r6, r5
 800be54:	d113      	bne.n	800be7e <__gethex+0x28e>
 800be56:	2e01      	cmp	r6, #1
 800be58:	d10b      	bne.n	800be72 <__gethex+0x282>
 800be5a:	9a02      	ldr	r2, [sp, #8]
 800be5c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800be60:	6013      	str	r3, [r2, #0]
 800be62:	2301      	movs	r3, #1
 800be64:	6123      	str	r3, [r4, #16]
 800be66:	f8ca 3000 	str.w	r3, [sl]
 800be6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be6c:	2562      	movs	r5, #98	@ 0x62
 800be6e:	601c      	str	r4, [r3, #0]
 800be70:	e73a      	b.n	800bce8 <__gethex+0xf8>
 800be72:	1e71      	subs	r1, r6, #1
 800be74:	4620      	mov	r0, r4
 800be76:	f000 fe30 	bl	800cada <__any_on>
 800be7a:	2800      	cmp	r0, #0
 800be7c:	d1ed      	bne.n	800be5a <__gethex+0x26a>
 800be7e:	9801      	ldr	r0, [sp, #4]
 800be80:	4621      	mov	r1, r4
 800be82:	f000 f9d9 	bl	800c238 <_Bfree>
 800be86:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800be88:	2300      	movs	r3, #0
 800be8a:	6013      	str	r3, [r2, #0]
 800be8c:	2550      	movs	r5, #80	@ 0x50
 800be8e:	e72b      	b.n	800bce8 <__gethex+0xf8>
 800be90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1f3      	bne.n	800be7e <__gethex+0x28e>
 800be96:	e7e0      	b.n	800be5a <__gethex+0x26a>
 800be98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d1dd      	bne.n	800be5a <__gethex+0x26a>
 800be9e:	e7ee      	b.n	800be7e <__gethex+0x28e>
 800bea0:	0800dc4d 	.word	0x0800dc4d
 800bea4:	0800de07 	.word	0x0800de07
 800bea8:	0800de18 	.word	0x0800de18
 800beac:	1e6f      	subs	r7, r5, #1
 800beae:	f1b9 0f00 	cmp.w	r9, #0
 800beb2:	d130      	bne.n	800bf16 <__gethex+0x326>
 800beb4:	b127      	cbz	r7, 800bec0 <__gethex+0x2d0>
 800beb6:	4639      	mov	r1, r7
 800beb8:	4620      	mov	r0, r4
 800beba:	f000 fe0e 	bl	800cada <__any_on>
 800bebe:	4681      	mov	r9, r0
 800bec0:	117a      	asrs	r2, r7, #5
 800bec2:	2301      	movs	r3, #1
 800bec4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800bec8:	f007 071f 	and.w	r7, r7, #31
 800becc:	40bb      	lsls	r3, r7
 800bece:	4213      	tst	r3, r2
 800bed0:	4629      	mov	r1, r5
 800bed2:	4620      	mov	r0, r4
 800bed4:	bf18      	it	ne
 800bed6:	f049 0902 	orrne.w	r9, r9, #2
 800beda:	f7ff fe21 	bl	800bb20 <rshift>
 800bede:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800bee2:	1b76      	subs	r6, r6, r5
 800bee4:	2502      	movs	r5, #2
 800bee6:	f1b9 0f00 	cmp.w	r9, #0
 800beea:	d047      	beq.n	800bf7c <__gethex+0x38c>
 800beec:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	d015      	beq.n	800bf20 <__gethex+0x330>
 800bef4:	2b03      	cmp	r3, #3
 800bef6:	d017      	beq.n	800bf28 <__gethex+0x338>
 800bef8:	2b01      	cmp	r3, #1
 800befa:	d109      	bne.n	800bf10 <__gethex+0x320>
 800befc:	f019 0f02 	tst.w	r9, #2
 800bf00:	d006      	beq.n	800bf10 <__gethex+0x320>
 800bf02:	f8da 3000 	ldr.w	r3, [sl]
 800bf06:	ea49 0903 	orr.w	r9, r9, r3
 800bf0a:	f019 0f01 	tst.w	r9, #1
 800bf0e:	d10e      	bne.n	800bf2e <__gethex+0x33e>
 800bf10:	f045 0510 	orr.w	r5, r5, #16
 800bf14:	e032      	b.n	800bf7c <__gethex+0x38c>
 800bf16:	f04f 0901 	mov.w	r9, #1
 800bf1a:	e7d1      	b.n	800bec0 <__gethex+0x2d0>
 800bf1c:	2501      	movs	r5, #1
 800bf1e:	e7e2      	b.n	800bee6 <__gethex+0x2f6>
 800bf20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf22:	f1c3 0301 	rsb	r3, r3, #1
 800bf26:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bf28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d0f0      	beq.n	800bf10 <__gethex+0x320>
 800bf2e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bf32:	f104 0314 	add.w	r3, r4, #20
 800bf36:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bf3a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bf3e:	f04f 0c00 	mov.w	ip, #0
 800bf42:	4618      	mov	r0, r3
 800bf44:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf48:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bf4c:	d01b      	beq.n	800bf86 <__gethex+0x396>
 800bf4e:	3201      	adds	r2, #1
 800bf50:	6002      	str	r2, [r0, #0]
 800bf52:	2d02      	cmp	r5, #2
 800bf54:	f104 0314 	add.w	r3, r4, #20
 800bf58:	d13c      	bne.n	800bfd4 <__gethex+0x3e4>
 800bf5a:	f8d8 2000 	ldr.w	r2, [r8]
 800bf5e:	3a01      	subs	r2, #1
 800bf60:	42b2      	cmp	r2, r6
 800bf62:	d109      	bne.n	800bf78 <__gethex+0x388>
 800bf64:	1171      	asrs	r1, r6, #5
 800bf66:	2201      	movs	r2, #1
 800bf68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bf6c:	f006 061f 	and.w	r6, r6, #31
 800bf70:	fa02 f606 	lsl.w	r6, r2, r6
 800bf74:	421e      	tst	r6, r3
 800bf76:	d13a      	bne.n	800bfee <__gethex+0x3fe>
 800bf78:	f045 0520 	orr.w	r5, r5, #32
 800bf7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf7e:	601c      	str	r4, [r3, #0]
 800bf80:	9b02      	ldr	r3, [sp, #8]
 800bf82:	601f      	str	r7, [r3, #0]
 800bf84:	e6b0      	b.n	800bce8 <__gethex+0xf8>
 800bf86:	4299      	cmp	r1, r3
 800bf88:	f843 cc04 	str.w	ip, [r3, #-4]
 800bf8c:	d8d9      	bhi.n	800bf42 <__gethex+0x352>
 800bf8e:	68a3      	ldr	r3, [r4, #8]
 800bf90:	459b      	cmp	fp, r3
 800bf92:	db17      	blt.n	800bfc4 <__gethex+0x3d4>
 800bf94:	6861      	ldr	r1, [r4, #4]
 800bf96:	9801      	ldr	r0, [sp, #4]
 800bf98:	3101      	adds	r1, #1
 800bf9a:	f000 f90d 	bl	800c1b8 <_Balloc>
 800bf9e:	4681      	mov	r9, r0
 800bfa0:	b918      	cbnz	r0, 800bfaa <__gethex+0x3ba>
 800bfa2:	4b1a      	ldr	r3, [pc, #104]	@ (800c00c <__gethex+0x41c>)
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	2184      	movs	r1, #132	@ 0x84
 800bfa8:	e6c5      	b.n	800bd36 <__gethex+0x146>
 800bfaa:	6922      	ldr	r2, [r4, #16]
 800bfac:	3202      	adds	r2, #2
 800bfae:	f104 010c 	add.w	r1, r4, #12
 800bfb2:	0092      	lsls	r2, r2, #2
 800bfb4:	300c      	adds	r0, #12
 800bfb6:	f7fd fed8 	bl	8009d6a <memcpy>
 800bfba:	4621      	mov	r1, r4
 800bfbc:	9801      	ldr	r0, [sp, #4]
 800bfbe:	f000 f93b 	bl	800c238 <_Bfree>
 800bfc2:	464c      	mov	r4, r9
 800bfc4:	6923      	ldr	r3, [r4, #16]
 800bfc6:	1c5a      	adds	r2, r3, #1
 800bfc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bfcc:	6122      	str	r2, [r4, #16]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	615a      	str	r2, [r3, #20]
 800bfd2:	e7be      	b.n	800bf52 <__gethex+0x362>
 800bfd4:	6922      	ldr	r2, [r4, #16]
 800bfd6:	455a      	cmp	r2, fp
 800bfd8:	dd0b      	ble.n	800bff2 <__gethex+0x402>
 800bfda:	2101      	movs	r1, #1
 800bfdc:	4620      	mov	r0, r4
 800bfde:	f7ff fd9f 	bl	800bb20 <rshift>
 800bfe2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bfe6:	3701      	adds	r7, #1
 800bfe8:	42bb      	cmp	r3, r7
 800bfea:	f6ff aee0 	blt.w	800bdae <__gethex+0x1be>
 800bfee:	2501      	movs	r5, #1
 800bff0:	e7c2      	b.n	800bf78 <__gethex+0x388>
 800bff2:	f016 061f 	ands.w	r6, r6, #31
 800bff6:	d0fa      	beq.n	800bfee <__gethex+0x3fe>
 800bff8:	4453      	add	r3, sl
 800bffa:	f1c6 0620 	rsb	r6, r6, #32
 800bffe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c002:	f000 f9cb 	bl	800c39c <__hi0bits>
 800c006:	42b0      	cmp	r0, r6
 800c008:	dbe7      	blt.n	800bfda <__gethex+0x3ea>
 800c00a:	e7f0      	b.n	800bfee <__gethex+0x3fe>
 800c00c:	0800de07 	.word	0x0800de07

0800c010 <L_shift>:
 800c010:	f1c2 0208 	rsb	r2, r2, #8
 800c014:	0092      	lsls	r2, r2, #2
 800c016:	b570      	push	{r4, r5, r6, lr}
 800c018:	f1c2 0620 	rsb	r6, r2, #32
 800c01c:	6843      	ldr	r3, [r0, #4]
 800c01e:	6804      	ldr	r4, [r0, #0]
 800c020:	fa03 f506 	lsl.w	r5, r3, r6
 800c024:	432c      	orrs	r4, r5
 800c026:	40d3      	lsrs	r3, r2
 800c028:	6004      	str	r4, [r0, #0]
 800c02a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c02e:	4288      	cmp	r0, r1
 800c030:	d3f4      	bcc.n	800c01c <L_shift+0xc>
 800c032:	bd70      	pop	{r4, r5, r6, pc}

0800c034 <__match>:
 800c034:	b530      	push	{r4, r5, lr}
 800c036:	6803      	ldr	r3, [r0, #0]
 800c038:	3301      	adds	r3, #1
 800c03a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c03e:	b914      	cbnz	r4, 800c046 <__match+0x12>
 800c040:	6003      	str	r3, [r0, #0]
 800c042:	2001      	movs	r0, #1
 800c044:	bd30      	pop	{r4, r5, pc}
 800c046:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c04a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c04e:	2d19      	cmp	r5, #25
 800c050:	bf98      	it	ls
 800c052:	3220      	addls	r2, #32
 800c054:	42a2      	cmp	r2, r4
 800c056:	d0f0      	beq.n	800c03a <__match+0x6>
 800c058:	2000      	movs	r0, #0
 800c05a:	e7f3      	b.n	800c044 <__match+0x10>

0800c05c <__hexnan>:
 800c05c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c060:	680b      	ldr	r3, [r1, #0]
 800c062:	6801      	ldr	r1, [r0, #0]
 800c064:	115e      	asrs	r6, r3, #5
 800c066:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c06a:	f013 031f 	ands.w	r3, r3, #31
 800c06e:	b087      	sub	sp, #28
 800c070:	bf18      	it	ne
 800c072:	3604      	addne	r6, #4
 800c074:	2500      	movs	r5, #0
 800c076:	1f37      	subs	r7, r6, #4
 800c078:	4682      	mov	sl, r0
 800c07a:	4690      	mov	r8, r2
 800c07c:	9301      	str	r3, [sp, #4]
 800c07e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c082:	46b9      	mov	r9, r7
 800c084:	463c      	mov	r4, r7
 800c086:	9502      	str	r5, [sp, #8]
 800c088:	46ab      	mov	fp, r5
 800c08a:	784a      	ldrb	r2, [r1, #1]
 800c08c:	1c4b      	adds	r3, r1, #1
 800c08e:	9303      	str	r3, [sp, #12]
 800c090:	b342      	cbz	r2, 800c0e4 <__hexnan+0x88>
 800c092:	4610      	mov	r0, r2
 800c094:	9105      	str	r1, [sp, #20]
 800c096:	9204      	str	r2, [sp, #16]
 800c098:	f7ff fd94 	bl	800bbc4 <__hexdig_fun>
 800c09c:	2800      	cmp	r0, #0
 800c09e:	d151      	bne.n	800c144 <__hexnan+0xe8>
 800c0a0:	9a04      	ldr	r2, [sp, #16]
 800c0a2:	9905      	ldr	r1, [sp, #20]
 800c0a4:	2a20      	cmp	r2, #32
 800c0a6:	d818      	bhi.n	800c0da <__hexnan+0x7e>
 800c0a8:	9b02      	ldr	r3, [sp, #8]
 800c0aa:	459b      	cmp	fp, r3
 800c0ac:	dd13      	ble.n	800c0d6 <__hexnan+0x7a>
 800c0ae:	454c      	cmp	r4, r9
 800c0b0:	d206      	bcs.n	800c0c0 <__hexnan+0x64>
 800c0b2:	2d07      	cmp	r5, #7
 800c0b4:	dc04      	bgt.n	800c0c0 <__hexnan+0x64>
 800c0b6:	462a      	mov	r2, r5
 800c0b8:	4649      	mov	r1, r9
 800c0ba:	4620      	mov	r0, r4
 800c0bc:	f7ff ffa8 	bl	800c010 <L_shift>
 800c0c0:	4544      	cmp	r4, r8
 800c0c2:	d952      	bls.n	800c16a <__hexnan+0x10e>
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	f1a4 0904 	sub.w	r9, r4, #4
 800c0ca:	f844 3c04 	str.w	r3, [r4, #-4]
 800c0ce:	f8cd b008 	str.w	fp, [sp, #8]
 800c0d2:	464c      	mov	r4, r9
 800c0d4:	461d      	mov	r5, r3
 800c0d6:	9903      	ldr	r1, [sp, #12]
 800c0d8:	e7d7      	b.n	800c08a <__hexnan+0x2e>
 800c0da:	2a29      	cmp	r2, #41	@ 0x29
 800c0dc:	d157      	bne.n	800c18e <__hexnan+0x132>
 800c0de:	3102      	adds	r1, #2
 800c0e0:	f8ca 1000 	str.w	r1, [sl]
 800c0e4:	f1bb 0f00 	cmp.w	fp, #0
 800c0e8:	d051      	beq.n	800c18e <__hexnan+0x132>
 800c0ea:	454c      	cmp	r4, r9
 800c0ec:	d206      	bcs.n	800c0fc <__hexnan+0xa0>
 800c0ee:	2d07      	cmp	r5, #7
 800c0f0:	dc04      	bgt.n	800c0fc <__hexnan+0xa0>
 800c0f2:	462a      	mov	r2, r5
 800c0f4:	4649      	mov	r1, r9
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f7ff ff8a 	bl	800c010 <L_shift>
 800c0fc:	4544      	cmp	r4, r8
 800c0fe:	d936      	bls.n	800c16e <__hexnan+0x112>
 800c100:	f1a8 0204 	sub.w	r2, r8, #4
 800c104:	4623      	mov	r3, r4
 800c106:	f853 1b04 	ldr.w	r1, [r3], #4
 800c10a:	f842 1f04 	str.w	r1, [r2, #4]!
 800c10e:	429f      	cmp	r7, r3
 800c110:	d2f9      	bcs.n	800c106 <__hexnan+0xaa>
 800c112:	1b3b      	subs	r3, r7, r4
 800c114:	f023 0303 	bic.w	r3, r3, #3
 800c118:	3304      	adds	r3, #4
 800c11a:	3401      	adds	r4, #1
 800c11c:	3e03      	subs	r6, #3
 800c11e:	42b4      	cmp	r4, r6
 800c120:	bf88      	it	hi
 800c122:	2304      	movhi	r3, #4
 800c124:	4443      	add	r3, r8
 800c126:	2200      	movs	r2, #0
 800c128:	f843 2b04 	str.w	r2, [r3], #4
 800c12c:	429f      	cmp	r7, r3
 800c12e:	d2fb      	bcs.n	800c128 <__hexnan+0xcc>
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	b91b      	cbnz	r3, 800c13c <__hexnan+0xe0>
 800c134:	4547      	cmp	r7, r8
 800c136:	d128      	bne.n	800c18a <__hexnan+0x12e>
 800c138:	2301      	movs	r3, #1
 800c13a:	603b      	str	r3, [r7, #0]
 800c13c:	2005      	movs	r0, #5
 800c13e:	b007      	add	sp, #28
 800c140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c144:	3501      	adds	r5, #1
 800c146:	2d08      	cmp	r5, #8
 800c148:	f10b 0b01 	add.w	fp, fp, #1
 800c14c:	dd06      	ble.n	800c15c <__hexnan+0x100>
 800c14e:	4544      	cmp	r4, r8
 800c150:	d9c1      	bls.n	800c0d6 <__hexnan+0x7a>
 800c152:	2300      	movs	r3, #0
 800c154:	f844 3c04 	str.w	r3, [r4, #-4]
 800c158:	2501      	movs	r5, #1
 800c15a:	3c04      	subs	r4, #4
 800c15c:	6822      	ldr	r2, [r4, #0]
 800c15e:	f000 000f 	and.w	r0, r0, #15
 800c162:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c166:	6020      	str	r0, [r4, #0]
 800c168:	e7b5      	b.n	800c0d6 <__hexnan+0x7a>
 800c16a:	2508      	movs	r5, #8
 800c16c:	e7b3      	b.n	800c0d6 <__hexnan+0x7a>
 800c16e:	9b01      	ldr	r3, [sp, #4]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d0dd      	beq.n	800c130 <__hexnan+0xd4>
 800c174:	f1c3 0320 	rsb	r3, r3, #32
 800c178:	f04f 32ff 	mov.w	r2, #4294967295
 800c17c:	40da      	lsrs	r2, r3
 800c17e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c182:	4013      	ands	r3, r2
 800c184:	f846 3c04 	str.w	r3, [r6, #-4]
 800c188:	e7d2      	b.n	800c130 <__hexnan+0xd4>
 800c18a:	3f04      	subs	r7, #4
 800c18c:	e7d0      	b.n	800c130 <__hexnan+0xd4>
 800c18e:	2004      	movs	r0, #4
 800c190:	e7d5      	b.n	800c13e <__hexnan+0xe2>

0800c192 <__ascii_mbtowc>:
 800c192:	b082      	sub	sp, #8
 800c194:	b901      	cbnz	r1, 800c198 <__ascii_mbtowc+0x6>
 800c196:	a901      	add	r1, sp, #4
 800c198:	b142      	cbz	r2, 800c1ac <__ascii_mbtowc+0x1a>
 800c19a:	b14b      	cbz	r3, 800c1b0 <__ascii_mbtowc+0x1e>
 800c19c:	7813      	ldrb	r3, [r2, #0]
 800c19e:	600b      	str	r3, [r1, #0]
 800c1a0:	7812      	ldrb	r2, [r2, #0]
 800c1a2:	1e10      	subs	r0, r2, #0
 800c1a4:	bf18      	it	ne
 800c1a6:	2001      	movne	r0, #1
 800c1a8:	b002      	add	sp, #8
 800c1aa:	4770      	bx	lr
 800c1ac:	4610      	mov	r0, r2
 800c1ae:	e7fb      	b.n	800c1a8 <__ascii_mbtowc+0x16>
 800c1b0:	f06f 0001 	mvn.w	r0, #1
 800c1b4:	e7f8      	b.n	800c1a8 <__ascii_mbtowc+0x16>
	...

0800c1b8 <_Balloc>:
 800c1b8:	b570      	push	{r4, r5, r6, lr}
 800c1ba:	69c6      	ldr	r6, [r0, #28]
 800c1bc:	4604      	mov	r4, r0
 800c1be:	460d      	mov	r5, r1
 800c1c0:	b976      	cbnz	r6, 800c1e0 <_Balloc+0x28>
 800c1c2:	2010      	movs	r0, #16
 800c1c4:	f000 fd88 	bl	800ccd8 <malloc>
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	61e0      	str	r0, [r4, #28]
 800c1cc:	b920      	cbnz	r0, 800c1d8 <_Balloc+0x20>
 800c1ce:	4b18      	ldr	r3, [pc, #96]	@ (800c230 <_Balloc+0x78>)
 800c1d0:	4818      	ldr	r0, [pc, #96]	@ (800c234 <_Balloc+0x7c>)
 800c1d2:	216b      	movs	r1, #107	@ 0x6b
 800c1d4:	f000 fd4e 	bl	800cc74 <__assert_func>
 800c1d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c1dc:	6006      	str	r6, [r0, #0]
 800c1de:	60c6      	str	r6, [r0, #12]
 800c1e0:	69e6      	ldr	r6, [r4, #28]
 800c1e2:	68f3      	ldr	r3, [r6, #12]
 800c1e4:	b183      	cbz	r3, 800c208 <_Balloc+0x50>
 800c1e6:	69e3      	ldr	r3, [r4, #28]
 800c1e8:	68db      	ldr	r3, [r3, #12]
 800c1ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c1ee:	b9b8      	cbnz	r0, 800c220 <_Balloc+0x68>
 800c1f0:	2101      	movs	r1, #1
 800c1f2:	fa01 f605 	lsl.w	r6, r1, r5
 800c1f6:	1d72      	adds	r2, r6, #5
 800c1f8:	0092      	lsls	r2, r2, #2
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f000 fd58 	bl	800ccb0 <_calloc_r>
 800c200:	b160      	cbz	r0, 800c21c <_Balloc+0x64>
 800c202:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c206:	e00e      	b.n	800c226 <_Balloc+0x6e>
 800c208:	2221      	movs	r2, #33	@ 0x21
 800c20a:	2104      	movs	r1, #4
 800c20c:	4620      	mov	r0, r4
 800c20e:	f000 fd4f 	bl	800ccb0 <_calloc_r>
 800c212:	69e3      	ldr	r3, [r4, #28]
 800c214:	60f0      	str	r0, [r6, #12]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d1e4      	bne.n	800c1e6 <_Balloc+0x2e>
 800c21c:	2000      	movs	r0, #0
 800c21e:	bd70      	pop	{r4, r5, r6, pc}
 800c220:	6802      	ldr	r2, [r0, #0]
 800c222:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c226:	2300      	movs	r3, #0
 800c228:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c22c:	e7f7      	b.n	800c21e <_Balloc+0x66>
 800c22e:	bf00      	nop
 800c230:	0800de78 	.word	0x0800de78
 800c234:	0800de8f 	.word	0x0800de8f

0800c238 <_Bfree>:
 800c238:	b570      	push	{r4, r5, r6, lr}
 800c23a:	69c6      	ldr	r6, [r0, #28]
 800c23c:	4605      	mov	r5, r0
 800c23e:	460c      	mov	r4, r1
 800c240:	b976      	cbnz	r6, 800c260 <_Bfree+0x28>
 800c242:	2010      	movs	r0, #16
 800c244:	f000 fd48 	bl	800ccd8 <malloc>
 800c248:	4602      	mov	r2, r0
 800c24a:	61e8      	str	r0, [r5, #28]
 800c24c:	b920      	cbnz	r0, 800c258 <_Bfree+0x20>
 800c24e:	4b09      	ldr	r3, [pc, #36]	@ (800c274 <_Bfree+0x3c>)
 800c250:	4809      	ldr	r0, [pc, #36]	@ (800c278 <_Bfree+0x40>)
 800c252:	218f      	movs	r1, #143	@ 0x8f
 800c254:	f000 fd0e 	bl	800cc74 <__assert_func>
 800c258:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c25c:	6006      	str	r6, [r0, #0]
 800c25e:	60c6      	str	r6, [r0, #12]
 800c260:	b13c      	cbz	r4, 800c272 <_Bfree+0x3a>
 800c262:	69eb      	ldr	r3, [r5, #28]
 800c264:	6862      	ldr	r2, [r4, #4]
 800c266:	68db      	ldr	r3, [r3, #12]
 800c268:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c26c:	6021      	str	r1, [r4, #0]
 800c26e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c272:	bd70      	pop	{r4, r5, r6, pc}
 800c274:	0800de78 	.word	0x0800de78
 800c278:	0800de8f 	.word	0x0800de8f

0800c27c <__multadd>:
 800c27c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c280:	690d      	ldr	r5, [r1, #16]
 800c282:	4607      	mov	r7, r0
 800c284:	460c      	mov	r4, r1
 800c286:	461e      	mov	r6, r3
 800c288:	f101 0c14 	add.w	ip, r1, #20
 800c28c:	2000      	movs	r0, #0
 800c28e:	f8dc 3000 	ldr.w	r3, [ip]
 800c292:	b299      	uxth	r1, r3
 800c294:	fb02 6101 	mla	r1, r2, r1, r6
 800c298:	0c1e      	lsrs	r6, r3, #16
 800c29a:	0c0b      	lsrs	r3, r1, #16
 800c29c:	fb02 3306 	mla	r3, r2, r6, r3
 800c2a0:	b289      	uxth	r1, r1
 800c2a2:	3001      	adds	r0, #1
 800c2a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c2a8:	4285      	cmp	r5, r0
 800c2aa:	f84c 1b04 	str.w	r1, [ip], #4
 800c2ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c2b2:	dcec      	bgt.n	800c28e <__multadd+0x12>
 800c2b4:	b30e      	cbz	r6, 800c2fa <__multadd+0x7e>
 800c2b6:	68a3      	ldr	r3, [r4, #8]
 800c2b8:	42ab      	cmp	r3, r5
 800c2ba:	dc19      	bgt.n	800c2f0 <__multadd+0x74>
 800c2bc:	6861      	ldr	r1, [r4, #4]
 800c2be:	4638      	mov	r0, r7
 800c2c0:	3101      	adds	r1, #1
 800c2c2:	f7ff ff79 	bl	800c1b8 <_Balloc>
 800c2c6:	4680      	mov	r8, r0
 800c2c8:	b928      	cbnz	r0, 800c2d6 <__multadd+0x5a>
 800c2ca:	4602      	mov	r2, r0
 800c2cc:	4b0c      	ldr	r3, [pc, #48]	@ (800c300 <__multadd+0x84>)
 800c2ce:	480d      	ldr	r0, [pc, #52]	@ (800c304 <__multadd+0x88>)
 800c2d0:	21ba      	movs	r1, #186	@ 0xba
 800c2d2:	f000 fccf 	bl	800cc74 <__assert_func>
 800c2d6:	6922      	ldr	r2, [r4, #16]
 800c2d8:	3202      	adds	r2, #2
 800c2da:	f104 010c 	add.w	r1, r4, #12
 800c2de:	0092      	lsls	r2, r2, #2
 800c2e0:	300c      	adds	r0, #12
 800c2e2:	f7fd fd42 	bl	8009d6a <memcpy>
 800c2e6:	4621      	mov	r1, r4
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	f7ff ffa5 	bl	800c238 <_Bfree>
 800c2ee:	4644      	mov	r4, r8
 800c2f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c2f4:	3501      	adds	r5, #1
 800c2f6:	615e      	str	r6, [r3, #20]
 800c2f8:	6125      	str	r5, [r4, #16]
 800c2fa:	4620      	mov	r0, r4
 800c2fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c300:	0800de07 	.word	0x0800de07
 800c304:	0800de8f 	.word	0x0800de8f

0800c308 <__s2b>:
 800c308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c30c:	460c      	mov	r4, r1
 800c30e:	4615      	mov	r5, r2
 800c310:	461f      	mov	r7, r3
 800c312:	2209      	movs	r2, #9
 800c314:	3308      	adds	r3, #8
 800c316:	4606      	mov	r6, r0
 800c318:	fb93 f3f2 	sdiv	r3, r3, r2
 800c31c:	2100      	movs	r1, #0
 800c31e:	2201      	movs	r2, #1
 800c320:	429a      	cmp	r2, r3
 800c322:	db09      	blt.n	800c338 <__s2b+0x30>
 800c324:	4630      	mov	r0, r6
 800c326:	f7ff ff47 	bl	800c1b8 <_Balloc>
 800c32a:	b940      	cbnz	r0, 800c33e <__s2b+0x36>
 800c32c:	4602      	mov	r2, r0
 800c32e:	4b19      	ldr	r3, [pc, #100]	@ (800c394 <__s2b+0x8c>)
 800c330:	4819      	ldr	r0, [pc, #100]	@ (800c398 <__s2b+0x90>)
 800c332:	21d3      	movs	r1, #211	@ 0xd3
 800c334:	f000 fc9e 	bl	800cc74 <__assert_func>
 800c338:	0052      	lsls	r2, r2, #1
 800c33a:	3101      	adds	r1, #1
 800c33c:	e7f0      	b.n	800c320 <__s2b+0x18>
 800c33e:	9b08      	ldr	r3, [sp, #32]
 800c340:	6143      	str	r3, [r0, #20]
 800c342:	2d09      	cmp	r5, #9
 800c344:	f04f 0301 	mov.w	r3, #1
 800c348:	6103      	str	r3, [r0, #16]
 800c34a:	dd16      	ble.n	800c37a <__s2b+0x72>
 800c34c:	f104 0909 	add.w	r9, r4, #9
 800c350:	46c8      	mov	r8, r9
 800c352:	442c      	add	r4, r5
 800c354:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c358:	4601      	mov	r1, r0
 800c35a:	3b30      	subs	r3, #48	@ 0x30
 800c35c:	220a      	movs	r2, #10
 800c35e:	4630      	mov	r0, r6
 800c360:	f7ff ff8c 	bl	800c27c <__multadd>
 800c364:	45a0      	cmp	r8, r4
 800c366:	d1f5      	bne.n	800c354 <__s2b+0x4c>
 800c368:	f1a5 0408 	sub.w	r4, r5, #8
 800c36c:	444c      	add	r4, r9
 800c36e:	1b2d      	subs	r5, r5, r4
 800c370:	1963      	adds	r3, r4, r5
 800c372:	42bb      	cmp	r3, r7
 800c374:	db04      	blt.n	800c380 <__s2b+0x78>
 800c376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c37a:	340a      	adds	r4, #10
 800c37c:	2509      	movs	r5, #9
 800c37e:	e7f6      	b.n	800c36e <__s2b+0x66>
 800c380:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c384:	4601      	mov	r1, r0
 800c386:	3b30      	subs	r3, #48	@ 0x30
 800c388:	220a      	movs	r2, #10
 800c38a:	4630      	mov	r0, r6
 800c38c:	f7ff ff76 	bl	800c27c <__multadd>
 800c390:	e7ee      	b.n	800c370 <__s2b+0x68>
 800c392:	bf00      	nop
 800c394:	0800de07 	.word	0x0800de07
 800c398:	0800de8f 	.word	0x0800de8f

0800c39c <__hi0bits>:
 800c39c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	bf36      	itet	cc
 800c3a4:	0403      	lslcc	r3, r0, #16
 800c3a6:	2000      	movcs	r0, #0
 800c3a8:	2010      	movcc	r0, #16
 800c3aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c3ae:	bf3c      	itt	cc
 800c3b0:	021b      	lslcc	r3, r3, #8
 800c3b2:	3008      	addcc	r0, #8
 800c3b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3b8:	bf3c      	itt	cc
 800c3ba:	011b      	lslcc	r3, r3, #4
 800c3bc:	3004      	addcc	r0, #4
 800c3be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3c2:	bf3c      	itt	cc
 800c3c4:	009b      	lslcc	r3, r3, #2
 800c3c6:	3002      	addcc	r0, #2
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	db05      	blt.n	800c3d8 <__hi0bits+0x3c>
 800c3cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c3d0:	f100 0001 	add.w	r0, r0, #1
 800c3d4:	bf08      	it	eq
 800c3d6:	2020      	moveq	r0, #32
 800c3d8:	4770      	bx	lr

0800c3da <__lo0bits>:
 800c3da:	6803      	ldr	r3, [r0, #0]
 800c3dc:	4602      	mov	r2, r0
 800c3de:	f013 0007 	ands.w	r0, r3, #7
 800c3e2:	d00b      	beq.n	800c3fc <__lo0bits+0x22>
 800c3e4:	07d9      	lsls	r1, r3, #31
 800c3e6:	d421      	bmi.n	800c42c <__lo0bits+0x52>
 800c3e8:	0798      	lsls	r0, r3, #30
 800c3ea:	bf49      	itett	mi
 800c3ec:	085b      	lsrmi	r3, r3, #1
 800c3ee:	089b      	lsrpl	r3, r3, #2
 800c3f0:	2001      	movmi	r0, #1
 800c3f2:	6013      	strmi	r3, [r2, #0]
 800c3f4:	bf5c      	itt	pl
 800c3f6:	6013      	strpl	r3, [r2, #0]
 800c3f8:	2002      	movpl	r0, #2
 800c3fa:	4770      	bx	lr
 800c3fc:	b299      	uxth	r1, r3
 800c3fe:	b909      	cbnz	r1, 800c404 <__lo0bits+0x2a>
 800c400:	0c1b      	lsrs	r3, r3, #16
 800c402:	2010      	movs	r0, #16
 800c404:	b2d9      	uxtb	r1, r3
 800c406:	b909      	cbnz	r1, 800c40c <__lo0bits+0x32>
 800c408:	3008      	adds	r0, #8
 800c40a:	0a1b      	lsrs	r3, r3, #8
 800c40c:	0719      	lsls	r1, r3, #28
 800c40e:	bf04      	itt	eq
 800c410:	091b      	lsreq	r3, r3, #4
 800c412:	3004      	addeq	r0, #4
 800c414:	0799      	lsls	r1, r3, #30
 800c416:	bf04      	itt	eq
 800c418:	089b      	lsreq	r3, r3, #2
 800c41a:	3002      	addeq	r0, #2
 800c41c:	07d9      	lsls	r1, r3, #31
 800c41e:	d403      	bmi.n	800c428 <__lo0bits+0x4e>
 800c420:	085b      	lsrs	r3, r3, #1
 800c422:	f100 0001 	add.w	r0, r0, #1
 800c426:	d003      	beq.n	800c430 <__lo0bits+0x56>
 800c428:	6013      	str	r3, [r2, #0]
 800c42a:	4770      	bx	lr
 800c42c:	2000      	movs	r0, #0
 800c42e:	4770      	bx	lr
 800c430:	2020      	movs	r0, #32
 800c432:	4770      	bx	lr

0800c434 <__i2b>:
 800c434:	b510      	push	{r4, lr}
 800c436:	460c      	mov	r4, r1
 800c438:	2101      	movs	r1, #1
 800c43a:	f7ff febd 	bl	800c1b8 <_Balloc>
 800c43e:	4602      	mov	r2, r0
 800c440:	b928      	cbnz	r0, 800c44e <__i2b+0x1a>
 800c442:	4b05      	ldr	r3, [pc, #20]	@ (800c458 <__i2b+0x24>)
 800c444:	4805      	ldr	r0, [pc, #20]	@ (800c45c <__i2b+0x28>)
 800c446:	f240 1145 	movw	r1, #325	@ 0x145
 800c44a:	f000 fc13 	bl	800cc74 <__assert_func>
 800c44e:	2301      	movs	r3, #1
 800c450:	6144      	str	r4, [r0, #20]
 800c452:	6103      	str	r3, [r0, #16]
 800c454:	bd10      	pop	{r4, pc}
 800c456:	bf00      	nop
 800c458:	0800de07 	.word	0x0800de07
 800c45c:	0800de8f 	.word	0x0800de8f

0800c460 <__multiply>:
 800c460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c464:	4614      	mov	r4, r2
 800c466:	690a      	ldr	r2, [r1, #16]
 800c468:	6923      	ldr	r3, [r4, #16]
 800c46a:	429a      	cmp	r2, r3
 800c46c:	bfa8      	it	ge
 800c46e:	4623      	movge	r3, r4
 800c470:	460f      	mov	r7, r1
 800c472:	bfa4      	itt	ge
 800c474:	460c      	movge	r4, r1
 800c476:	461f      	movge	r7, r3
 800c478:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c47c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c480:	68a3      	ldr	r3, [r4, #8]
 800c482:	6861      	ldr	r1, [r4, #4]
 800c484:	eb0a 0609 	add.w	r6, sl, r9
 800c488:	42b3      	cmp	r3, r6
 800c48a:	b085      	sub	sp, #20
 800c48c:	bfb8      	it	lt
 800c48e:	3101      	addlt	r1, #1
 800c490:	f7ff fe92 	bl	800c1b8 <_Balloc>
 800c494:	b930      	cbnz	r0, 800c4a4 <__multiply+0x44>
 800c496:	4602      	mov	r2, r0
 800c498:	4b44      	ldr	r3, [pc, #272]	@ (800c5ac <__multiply+0x14c>)
 800c49a:	4845      	ldr	r0, [pc, #276]	@ (800c5b0 <__multiply+0x150>)
 800c49c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c4a0:	f000 fbe8 	bl	800cc74 <__assert_func>
 800c4a4:	f100 0514 	add.w	r5, r0, #20
 800c4a8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c4ac:	462b      	mov	r3, r5
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	4543      	cmp	r3, r8
 800c4b2:	d321      	bcc.n	800c4f8 <__multiply+0x98>
 800c4b4:	f107 0114 	add.w	r1, r7, #20
 800c4b8:	f104 0214 	add.w	r2, r4, #20
 800c4bc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c4c0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c4c4:	9302      	str	r3, [sp, #8]
 800c4c6:	1b13      	subs	r3, r2, r4
 800c4c8:	3b15      	subs	r3, #21
 800c4ca:	f023 0303 	bic.w	r3, r3, #3
 800c4ce:	3304      	adds	r3, #4
 800c4d0:	f104 0715 	add.w	r7, r4, #21
 800c4d4:	42ba      	cmp	r2, r7
 800c4d6:	bf38      	it	cc
 800c4d8:	2304      	movcc	r3, #4
 800c4da:	9301      	str	r3, [sp, #4]
 800c4dc:	9b02      	ldr	r3, [sp, #8]
 800c4de:	9103      	str	r1, [sp, #12]
 800c4e0:	428b      	cmp	r3, r1
 800c4e2:	d80c      	bhi.n	800c4fe <__multiply+0x9e>
 800c4e4:	2e00      	cmp	r6, #0
 800c4e6:	dd03      	ble.n	800c4f0 <__multiply+0x90>
 800c4e8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d05b      	beq.n	800c5a8 <__multiply+0x148>
 800c4f0:	6106      	str	r6, [r0, #16]
 800c4f2:	b005      	add	sp, #20
 800c4f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4f8:	f843 2b04 	str.w	r2, [r3], #4
 800c4fc:	e7d8      	b.n	800c4b0 <__multiply+0x50>
 800c4fe:	f8b1 a000 	ldrh.w	sl, [r1]
 800c502:	f1ba 0f00 	cmp.w	sl, #0
 800c506:	d024      	beq.n	800c552 <__multiply+0xf2>
 800c508:	f104 0e14 	add.w	lr, r4, #20
 800c50c:	46a9      	mov	r9, r5
 800c50e:	f04f 0c00 	mov.w	ip, #0
 800c512:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c516:	f8d9 3000 	ldr.w	r3, [r9]
 800c51a:	fa1f fb87 	uxth.w	fp, r7
 800c51e:	b29b      	uxth	r3, r3
 800c520:	fb0a 330b 	mla	r3, sl, fp, r3
 800c524:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c528:	f8d9 7000 	ldr.w	r7, [r9]
 800c52c:	4463      	add	r3, ip
 800c52e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c532:	fb0a c70b 	mla	r7, sl, fp, ip
 800c536:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c540:	4572      	cmp	r2, lr
 800c542:	f849 3b04 	str.w	r3, [r9], #4
 800c546:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c54a:	d8e2      	bhi.n	800c512 <__multiply+0xb2>
 800c54c:	9b01      	ldr	r3, [sp, #4]
 800c54e:	f845 c003 	str.w	ip, [r5, r3]
 800c552:	9b03      	ldr	r3, [sp, #12]
 800c554:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c558:	3104      	adds	r1, #4
 800c55a:	f1b9 0f00 	cmp.w	r9, #0
 800c55e:	d021      	beq.n	800c5a4 <__multiply+0x144>
 800c560:	682b      	ldr	r3, [r5, #0]
 800c562:	f104 0c14 	add.w	ip, r4, #20
 800c566:	46ae      	mov	lr, r5
 800c568:	f04f 0a00 	mov.w	sl, #0
 800c56c:	f8bc b000 	ldrh.w	fp, [ip]
 800c570:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c574:	fb09 770b 	mla	r7, r9, fp, r7
 800c578:	4457      	add	r7, sl
 800c57a:	b29b      	uxth	r3, r3
 800c57c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c580:	f84e 3b04 	str.w	r3, [lr], #4
 800c584:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c588:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c58c:	f8be 3000 	ldrh.w	r3, [lr]
 800c590:	fb09 330a 	mla	r3, r9, sl, r3
 800c594:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c598:	4562      	cmp	r2, ip
 800c59a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c59e:	d8e5      	bhi.n	800c56c <__multiply+0x10c>
 800c5a0:	9f01      	ldr	r7, [sp, #4]
 800c5a2:	51eb      	str	r3, [r5, r7]
 800c5a4:	3504      	adds	r5, #4
 800c5a6:	e799      	b.n	800c4dc <__multiply+0x7c>
 800c5a8:	3e01      	subs	r6, #1
 800c5aa:	e79b      	b.n	800c4e4 <__multiply+0x84>
 800c5ac:	0800de07 	.word	0x0800de07
 800c5b0:	0800de8f 	.word	0x0800de8f

0800c5b4 <__pow5mult>:
 800c5b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5b8:	4615      	mov	r5, r2
 800c5ba:	f012 0203 	ands.w	r2, r2, #3
 800c5be:	4607      	mov	r7, r0
 800c5c0:	460e      	mov	r6, r1
 800c5c2:	d007      	beq.n	800c5d4 <__pow5mult+0x20>
 800c5c4:	4c25      	ldr	r4, [pc, #148]	@ (800c65c <__pow5mult+0xa8>)
 800c5c6:	3a01      	subs	r2, #1
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c5ce:	f7ff fe55 	bl	800c27c <__multadd>
 800c5d2:	4606      	mov	r6, r0
 800c5d4:	10ad      	asrs	r5, r5, #2
 800c5d6:	d03d      	beq.n	800c654 <__pow5mult+0xa0>
 800c5d8:	69fc      	ldr	r4, [r7, #28]
 800c5da:	b97c      	cbnz	r4, 800c5fc <__pow5mult+0x48>
 800c5dc:	2010      	movs	r0, #16
 800c5de:	f000 fb7b 	bl	800ccd8 <malloc>
 800c5e2:	4602      	mov	r2, r0
 800c5e4:	61f8      	str	r0, [r7, #28]
 800c5e6:	b928      	cbnz	r0, 800c5f4 <__pow5mult+0x40>
 800c5e8:	4b1d      	ldr	r3, [pc, #116]	@ (800c660 <__pow5mult+0xac>)
 800c5ea:	481e      	ldr	r0, [pc, #120]	@ (800c664 <__pow5mult+0xb0>)
 800c5ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c5f0:	f000 fb40 	bl	800cc74 <__assert_func>
 800c5f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c5f8:	6004      	str	r4, [r0, #0]
 800c5fa:	60c4      	str	r4, [r0, #12]
 800c5fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c600:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c604:	b94c      	cbnz	r4, 800c61a <__pow5mult+0x66>
 800c606:	f240 2171 	movw	r1, #625	@ 0x271
 800c60a:	4638      	mov	r0, r7
 800c60c:	f7ff ff12 	bl	800c434 <__i2b>
 800c610:	2300      	movs	r3, #0
 800c612:	f8c8 0008 	str.w	r0, [r8, #8]
 800c616:	4604      	mov	r4, r0
 800c618:	6003      	str	r3, [r0, #0]
 800c61a:	f04f 0900 	mov.w	r9, #0
 800c61e:	07eb      	lsls	r3, r5, #31
 800c620:	d50a      	bpl.n	800c638 <__pow5mult+0x84>
 800c622:	4631      	mov	r1, r6
 800c624:	4622      	mov	r2, r4
 800c626:	4638      	mov	r0, r7
 800c628:	f7ff ff1a 	bl	800c460 <__multiply>
 800c62c:	4631      	mov	r1, r6
 800c62e:	4680      	mov	r8, r0
 800c630:	4638      	mov	r0, r7
 800c632:	f7ff fe01 	bl	800c238 <_Bfree>
 800c636:	4646      	mov	r6, r8
 800c638:	106d      	asrs	r5, r5, #1
 800c63a:	d00b      	beq.n	800c654 <__pow5mult+0xa0>
 800c63c:	6820      	ldr	r0, [r4, #0]
 800c63e:	b938      	cbnz	r0, 800c650 <__pow5mult+0x9c>
 800c640:	4622      	mov	r2, r4
 800c642:	4621      	mov	r1, r4
 800c644:	4638      	mov	r0, r7
 800c646:	f7ff ff0b 	bl	800c460 <__multiply>
 800c64a:	6020      	str	r0, [r4, #0]
 800c64c:	f8c0 9000 	str.w	r9, [r0]
 800c650:	4604      	mov	r4, r0
 800c652:	e7e4      	b.n	800c61e <__pow5mult+0x6a>
 800c654:	4630      	mov	r0, r6
 800c656:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c65a:	bf00      	nop
 800c65c:	0800dee8 	.word	0x0800dee8
 800c660:	0800de78 	.word	0x0800de78
 800c664:	0800de8f 	.word	0x0800de8f

0800c668 <__lshift>:
 800c668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c66c:	460c      	mov	r4, r1
 800c66e:	6849      	ldr	r1, [r1, #4]
 800c670:	6923      	ldr	r3, [r4, #16]
 800c672:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c676:	68a3      	ldr	r3, [r4, #8]
 800c678:	4607      	mov	r7, r0
 800c67a:	4691      	mov	r9, r2
 800c67c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c680:	f108 0601 	add.w	r6, r8, #1
 800c684:	42b3      	cmp	r3, r6
 800c686:	db0b      	blt.n	800c6a0 <__lshift+0x38>
 800c688:	4638      	mov	r0, r7
 800c68a:	f7ff fd95 	bl	800c1b8 <_Balloc>
 800c68e:	4605      	mov	r5, r0
 800c690:	b948      	cbnz	r0, 800c6a6 <__lshift+0x3e>
 800c692:	4602      	mov	r2, r0
 800c694:	4b28      	ldr	r3, [pc, #160]	@ (800c738 <__lshift+0xd0>)
 800c696:	4829      	ldr	r0, [pc, #164]	@ (800c73c <__lshift+0xd4>)
 800c698:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c69c:	f000 faea 	bl	800cc74 <__assert_func>
 800c6a0:	3101      	adds	r1, #1
 800c6a2:	005b      	lsls	r3, r3, #1
 800c6a4:	e7ee      	b.n	800c684 <__lshift+0x1c>
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	f100 0114 	add.w	r1, r0, #20
 800c6ac:	f100 0210 	add.w	r2, r0, #16
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	4553      	cmp	r3, sl
 800c6b4:	db33      	blt.n	800c71e <__lshift+0xb6>
 800c6b6:	6920      	ldr	r0, [r4, #16]
 800c6b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c6bc:	f104 0314 	add.w	r3, r4, #20
 800c6c0:	f019 091f 	ands.w	r9, r9, #31
 800c6c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c6c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c6cc:	d02b      	beq.n	800c726 <__lshift+0xbe>
 800c6ce:	f1c9 0e20 	rsb	lr, r9, #32
 800c6d2:	468a      	mov	sl, r1
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	6818      	ldr	r0, [r3, #0]
 800c6d8:	fa00 f009 	lsl.w	r0, r0, r9
 800c6dc:	4310      	orrs	r0, r2
 800c6de:	f84a 0b04 	str.w	r0, [sl], #4
 800c6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6e6:	459c      	cmp	ip, r3
 800c6e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800c6ec:	d8f3      	bhi.n	800c6d6 <__lshift+0x6e>
 800c6ee:	ebac 0304 	sub.w	r3, ip, r4
 800c6f2:	3b15      	subs	r3, #21
 800c6f4:	f023 0303 	bic.w	r3, r3, #3
 800c6f8:	3304      	adds	r3, #4
 800c6fa:	f104 0015 	add.w	r0, r4, #21
 800c6fe:	4584      	cmp	ip, r0
 800c700:	bf38      	it	cc
 800c702:	2304      	movcc	r3, #4
 800c704:	50ca      	str	r2, [r1, r3]
 800c706:	b10a      	cbz	r2, 800c70c <__lshift+0xa4>
 800c708:	f108 0602 	add.w	r6, r8, #2
 800c70c:	3e01      	subs	r6, #1
 800c70e:	4638      	mov	r0, r7
 800c710:	612e      	str	r6, [r5, #16]
 800c712:	4621      	mov	r1, r4
 800c714:	f7ff fd90 	bl	800c238 <_Bfree>
 800c718:	4628      	mov	r0, r5
 800c71a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c71e:	f842 0f04 	str.w	r0, [r2, #4]!
 800c722:	3301      	adds	r3, #1
 800c724:	e7c5      	b.n	800c6b2 <__lshift+0x4a>
 800c726:	3904      	subs	r1, #4
 800c728:	f853 2b04 	ldr.w	r2, [r3], #4
 800c72c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c730:	459c      	cmp	ip, r3
 800c732:	d8f9      	bhi.n	800c728 <__lshift+0xc0>
 800c734:	e7ea      	b.n	800c70c <__lshift+0xa4>
 800c736:	bf00      	nop
 800c738:	0800de07 	.word	0x0800de07
 800c73c:	0800de8f 	.word	0x0800de8f

0800c740 <__mcmp>:
 800c740:	690a      	ldr	r2, [r1, #16]
 800c742:	4603      	mov	r3, r0
 800c744:	6900      	ldr	r0, [r0, #16]
 800c746:	1a80      	subs	r0, r0, r2
 800c748:	b530      	push	{r4, r5, lr}
 800c74a:	d10e      	bne.n	800c76a <__mcmp+0x2a>
 800c74c:	3314      	adds	r3, #20
 800c74e:	3114      	adds	r1, #20
 800c750:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c754:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c758:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c75c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c760:	4295      	cmp	r5, r2
 800c762:	d003      	beq.n	800c76c <__mcmp+0x2c>
 800c764:	d205      	bcs.n	800c772 <__mcmp+0x32>
 800c766:	f04f 30ff 	mov.w	r0, #4294967295
 800c76a:	bd30      	pop	{r4, r5, pc}
 800c76c:	42a3      	cmp	r3, r4
 800c76e:	d3f3      	bcc.n	800c758 <__mcmp+0x18>
 800c770:	e7fb      	b.n	800c76a <__mcmp+0x2a>
 800c772:	2001      	movs	r0, #1
 800c774:	e7f9      	b.n	800c76a <__mcmp+0x2a>
	...

0800c778 <__mdiff>:
 800c778:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c77c:	4689      	mov	r9, r1
 800c77e:	4606      	mov	r6, r0
 800c780:	4611      	mov	r1, r2
 800c782:	4648      	mov	r0, r9
 800c784:	4614      	mov	r4, r2
 800c786:	f7ff ffdb 	bl	800c740 <__mcmp>
 800c78a:	1e05      	subs	r5, r0, #0
 800c78c:	d112      	bne.n	800c7b4 <__mdiff+0x3c>
 800c78e:	4629      	mov	r1, r5
 800c790:	4630      	mov	r0, r6
 800c792:	f7ff fd11 	bl	800c1b8 <_Balloc>
 800c796:	4602      	mov	r2, r0
 800c798:	b928      	cbnz	r0, 800c7a6 <__mdiff+0x2e>
 800c79a:	4b3f      	ldr	r3, [pc, #252]	@ (800c898 <__mdiff+0x120>)
 800c79c:	f240 2137 	movw	r1, #567	@ 0x237
 800c7a0:	483e      	ldr	r0, [pc, #248]	@ (800c89c <__mdiff+0x124>)
 800c7a2:	f000 fa67 	bl	800cc74 <__assert_func>
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c7ac:	4610      	mov	r0, r2
 800c7ae:	b003      	add	sp, #12
 800c7b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b4:	bfbc      	itt	lt
 800c7b6:	464b      	movlt	r3, r9
 800c7b8:	46a1      	movlt	r9, r4
 800c7ba:	4630      	mov	r0, r6
 800c7bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c7c0:	bfba      	itte	lt
 800c7c2:	461c      	movlt	r4, r3
 800c7c4:	2501      	movlt	r5, #1
 800c7c6:	2500      	movge	r5, #0
 800c7c8:	f7ff fcf6 	bl	800c1b8 <_Balloc>
 800c7cc:	4602      	mov	r2, r0
 800c7ce:	b918      	cbnz	r0, 800c7d8 <__mdiff+0x60>
 800c7d0:	4b31      	ldr	r3, [pc, #196]	@ (800c898 <__mdiff+0x120>)
 800c7d2:	f240 2145 	movw	r1, #581	@ 0x245
 800c7d6:	e7e3      	b.n	800c7a0 <__mdiff+0x28>
 800c7d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c7dc:	6926      	ldr	r6, [r4, #16]
 800c7de:	60c5      	str	r5, [r0, #12]
 800c7e0:	f109 0310 	add.w	r3, r9, #16
 800c7e4:	f109 0514 	add.w	r5, r9, #20
 800c7e8:	f104 0e14 	add.w	lr, r4, #20
 800c7ec:	f100 0b14 	add.w	fp, r0, #20
 800c7f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c7f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c7f8:	9301      	str	r3, [sp, #4]
 800c7fa:	46d9      	mov	r9, fp
 800c7fc:	f04f 0c00 	mov.w	ip, #0
 800c800:	9b01      	ldr	r3, [sp, #4]
 800c802:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c806:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c80a:	9301      	str	r3, [sp, #4]
 800c80c:	fa1f f38a 	uxth.w	r3, sl
 800c810:	4619      	mov	r1, r3
 800c812:	b283      	uxth	r3, r0
 800c814:	1acb      	subs	r3, r1, r3
 800c816:	0c00      	lsrs	r0, r0, #16
 800c818:	4463      	add	r3, ip
 800c81a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c81e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c822:	b29b      	uxth	r3, r3
 800c824:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c828:	4576      	cmp	r6, lr
 800c82a:	f849 3b04 	str.w	r3, [r9], #4
 800c82e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c832:	d8e5      	bhi.n	800c800 <__mdiff+0x88>
 800c834:	1b33      	subs	r3, r6, r4
 800c836:	3b15      	subs	r3, #21
 800c838:	f023 0303 	bic.w	r3, r3, #3
 800c83c:	3415      	adds	r4, #21
 800c83e:	3304      	adds	r3, #4
 800c840:	42a6      	cmp	r6, r4
 800c842:	bf38      	it	cc
 800c844:	2304      	movcc	r3, #4
 800c846:	441d      	add	r5, r3
 800c848:	445b      	add	r3, fp
 800c84a:	461e      	mov	r6, r3
 800c84c:	462c      	mov	r4, r5
 800c84e:	4544      	cmp	r4, r8
 800c850:	d30e      	bcc.n	800c870 <__mdiff+0xf8>
 800c852:	f108 0103 	add.w	r1, r8, #3
 800c856:	1b49      	subs	r1, r1, r5
 800c858:	f021 0103 	bic.w	r1, r1, #3
 800c85c:	3d03      	subs	r5, #3
 800c85e:	45a8      	cmp	r8, r5
 800c860:	bf38      	it	cc
 800c862:	2100      	movcc	r1, #0
 800c864:	440b      	add	r3, r1
 800c866:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c86a:	b191      	cbz	r1, 800c892 <__mdiff+0x11a>
 800c86c:	6117      	str	r7, [r2, #16]
 800c86e:	e79d      	b.n	800c7ac <__mdiff+0x34>
 800c870:	f854 1b04 	ldr.w	r1, [r4], #4
 800c874:	46e6      	mov	lr, ip
 800c876:	0c08      	lsrs	r0, r1, #16
 800c878:	fa1c fc81 	uxtah	ip, ip, r1
 800c87c:	4471      	add	r1, lr
 800c87e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c882:	b289      	uxth	r1, r1
 800c884:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c888:	f846 1b04 	str.w	r1, [r6], #4
 800c88c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c890:	e7dd      	b.n	800c84e <__mdiff+0xd6>
 800c892:	3f01      	subs	r7, #1
 800c894:	e7e7      	b.n	800c866 <__mdiff+0xee>
 800c896:	bf00      	nop
 800c898:	0800de07 	.word	0x0800de07
 800c89c:	0800de8f 	.word	0x0800de8f

0800c8a0 <__ulp>:
 800c8a0:	b082      	sub	sp, #8
 800c8a2:	ed8d 0b00 	vstr	d0, [sp]
 800c8a6:	9a01      	ldr	r2, [sp, #4]
 800c8a8:	4b0f      	ldr	r3, [pc, #60]	@ (800c8e8 <__ulp+0x48>)
 800c8aa:	4013      	ands	r3, r2
 800c8ac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	dc08      	bgt.n	800c8c6 <__ulp+0x26>
 800c8b4:	425b      	negs	r3, r3
 800c8b6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c8ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c8be:	da04      	bge.n	800c8ca <__ulp+0x2a>
 800c8c0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c8c4:	4113      	asrs	r3, r2
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	e008      	b.n	800c8dc <__ulp+0x3c>
 800c8ca:	f1a2 0314 	sub.w	r3, r2, #20
 800c8ce:	2b1e      	cmp	r3, #30
 800c8d0:	bfda      	itte	le
 800c8d2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c8d6:	40da      	lsrle	r2, r3
 800c8d8:	2201      	movgt	r2, #1
 800c8da:	2300      	movs	r3, #0
 800c8dc:	4619      	mov	r1, r3
 800c8de:	4610      	mov	r0, r2
 800c8e0:	ec41 0b10 	vmov	d0, r0, r1
 800c8e4:	b002      	add	sp, #8
 800c8e6:	4770      	bx	lr
 800c8e8:	7ff00000 	.word	0x7ff00000

0800c8ec <__b2d>:
 800c8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8f0:	6906      	ldr	r6, [r0, #16]
 800c8f2:	f100 0814 	add.w	r8, r0, #20
 800c8f6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c8fa:	1f37      	subs	r7, r6, #4
 800c8fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c900:	4610      	mov	r0, r2
 800c902:	f7ff fd4b 	bl	800c39c <__hi0bits>
 800c906:	f1c0 0320 	rsb	r3, r0, #32
 800c90a:	280a      	cmp	r0, #10
 800c90c:	600b      	str	r3, [r1, #0]
 800c90e:	491b      	ldr	r1, [pc, #108]	@ (800c97c <__b2d+0x90>)
 800c910:	dc15      	bgt.n	800c93e <__b2d+0x52>
 800c912:	f1c0 0c0b 	rsb	ip, r0, #11
 800c916:	fa22 f30c 	lsr.w	r3, r2, ip
 800c91a:	45b8      	cmp	r8, r7
 800c91c:	ea43 0501 	orr.w	r5, r3, r1
 800c920:	bf34      	ite	cc
 800c922:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c926:	2300      	movcs	r3, #0
 800c928:	3015      	adds	r0, #21
 800c92a:	fa02 f000 	lsl.w	r0, r2, r0
 800c92e:	fa23 f30c 	lsr.w	r3, r3, ip
 800c932:	4303      	orrs	r3, r0
 800c934:	461c      	mov	r4, r3
 800c936:	ec45 4b10 	vmov	d0, r4, r5
 800c93a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c93e:	45b8      	cmp	r8, r7
 800c940:	bf3a      	itte	cc
 800c942:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c946:	f1a6 0708 	subcc.w	r7, r6, #8
 800c94a:	2300      	movcs	r3, #0
 800c94c:	380b      	subs	r0, #11
 800c94e:	d012      	beq.n	800c976 <__b2d+0x8a>
 800c950:	f1c0 0120 	rsb	r1, r0, #32
 800c954:	fa23 f401 	lsr.w	r4, r3, r1
 800c958:	4082      	lsls	r2, r0
 800c95a:	4322      	orrs	r2, r4
 800c95c:	4547      	cmp	r7, r8
 800c95e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c962:	bf8c      	ite	hi
 800c964:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c968:	2200      	movls	r2, #0
 800c96a:	4083      	lsls	r3, r0
 800c96c:	40ca      	lsrs	r2, r1
 800c96e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c972:	4313      	orrs	r3, r2
 800c974:	e7de      	b.n	800c934 <__b2d+0x48>
 800c976:	ea42 0501 	orr.w	r5, r2, r1
 800c97a:	e7db      	b.n	800c934 <__b2d+0x48>
 800c97c:	3ff00000 	.word	0x3ff00000

0800c980 <__d2b>:
 800c980:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c984:	460f      	mov	r7, r1
 800c986:	2101      	movs	r1, #1
 800c988:	ec59 8b10 	vmov	r8, r9, d0
 800c98c:	4616      	mov	r6, r2
 800c98e:	f7ff fc13 	bl	800c1b8 <_Balloc>
 800c992:	4604      	mov	r4, r0
 800c994:	b930      	cbnz	r0, 800c9a4 <__d2b+0x24>
 800c996:	4602      	mov	r2, r0
 800c998:	4b23      	ldr	r3, [pc, #140]	@ (800ca28 <__d2b+0xa8>)
 800c99a:	4824      	ldr	r0, [pc, #144]	@ (800ca2c <__d2b+0xac>)
 800c99c:	f240 310f 	movw	r1, #783	@ 0x30f
 800c9a0:	f000 f968 	bl	800cc74 <__assert_func>
 800c9a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c9a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c9ac:	b10d      	cbz	r5, 800c9b2 <__d2b+0x32>
 800c9ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c9b2:	9301      	str	r3, [sp, #4]
 800c9b4:	f1b8 0300 	subs.w	r3, r8, #0
 800c9b8:	d023      	beq.n	800ca02 <__d2b+0x82>
 800c9ba:	4668      	mov	r0, sp
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	f7ff fd0c 	bl	800c3da <__lo0bits>
 800c9c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c9c6:	b1d0      	cbz	r0, 800c9fe <__d2b+0x7e>
 800c9c8:	f1c0 0320 	rsb	r3, r0, #32
 800c9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800c9d0:	430b      	orrs	r3, r1
 800c9d2:	40c2      	lsrs	r2, r0
 800c9d4:	6163      	str	r3, [r4, #20]
 800c9d6:	9201      	str	r2, [sp, #4]
 800c9d8:	9b01      	ldr	r3, [sp, #4]
 800c9da:	61a3      	str	r3, [r4, #24]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	bf0c      	ite	eq
 800c9e0:	2201      	moveq	r2, #1
 800c9e2:	2202      	movne	r2, #2
 800c9e4:	6122      	str	r2, [r4, #16]
 800c9e6:	b1a5      	cbz	r5, 800ca12 <__d2b+0x92>
 800c9e8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c9ec:	4405      	add	r5, r0
 800c9ee:	603d      	str	r5, [r7, #0]
 800c9f0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c9f4:	6030      	str	r0, [r6, #0]
 800c9f6:	4620      	mov	r0, r4
 800c9f8:	b003      	add	sp, #12
 800c9fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9fe:	6161      	str	r1, [r4, #20]
 800ca00:	e7ea      	b.n	800c9d8 <__d2b+0x58>
 800ca02:	a801      	add	r0, sp, #4
 800ca04:	f7ff fce9 	bl	800c3da <__lo0bits>
 800ca08:	9b01      	ldr	r3, [sp, #4]
 800ca0a:	6163      	str	r3, [r4, #20]
 800ca0c:	3020      	adds	r0, #32
 800ca0e:	2201      	movs	r2, #1
 800ca10:	e7e8      	b.n	800c9e4 <__d2b+0x64>
 800ca12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ca16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ca1a:	6038      	str	r0, [r7, #0]
 800ca1c:	6918      	ldr	r0, [r3, #16]
 800ca1e:	f7ff fcbd 	bl	800c39c <__hi0bits>
 800ca22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ca26:	e7e5      	b.n	800c9f4 <__d2b+0x74>
 800ca28:	0800de07 	.word	0x0800de07
 800ca2c:	0800de8f 	.word	0x0800de8f

0800ca30 <__ratio>:
 800ca30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca34:	b085      	sub	sp, #20
 800ca36:	e9cd 1000 	strd	r1, r0, [sp]
 800ca3a:	a902      	add	r1, sp, #8
 800ca3c:	f7ff ff56 	bl	800c8ec <__b2d>
 800ca40:	9800      	ldr	r0, [sp, #0]
 800ca42:	a903      	add	r1, sp, #12
 800ca44:	ec55 4b10 	vmov	r4, r5, d0
 800ca48:	f7ff ff50 	bl	800c8ec <__b2d>
 800ca4c:	9b01      	ldr	r3, [sp, #4]
 800ca4e:	6919      	ldr	r1, [r3, #16]
 800ca50:	9b00      	ldr	r3, [sp, #0]
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	1ac9      	subs	r1, r1, r3
 800ca56:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ca5a:	1a9b      	subs	r3, r3, r2
 800ca5c:	ec5b ab10 	vmov	sl, fp, d0
 800ca60:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	bfce      	itee	gt
 800ca68:	462a      	movgt	r2, r5
 800ca6a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ca6e:	465a      	movle	r2, fp
 800ca70:	462f      	mov	r7, r5
 800ca72:	46d9      	mov	r9, fp
 800ca74:	bfcc      	ite	gt
 800ca76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ca7a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ca7e:	464b      	mov	r3, r9
 800ca80:	4652      	mov	r2, sl
 800ca82:	4620      	mov	r0, r4
 800ca84:	4639      	mov	r1, r7
 800ca86:	f7f3 fee1 	bl	800084c <__aeabi_ddiv>
 800ca8a:	ec41 0b10 	vmov	d0, r0, r1
 800ca8e:	b005      	add	sp, #20
 800ca90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca94 <__copybits>:
 800ca94:	3901      	subs	r1, #1
 800ca96:	b570      	push	{r4, r5, r6, lr}
 800ca98:	1149      	asrs	r1, r1, #5
 800ca9a:	6914      	ldr	r4, [r2, #16]
 800ca9c:	3101      	adds	r1, #1
 800ca9e:	f102 0314 	add.w	r3, r2, #20
 800caa2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800caa6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800caaa:	1f05      	subs	r5, r0, #4
 800caac:	42a3      	cmp	r3, r4
 800caae:	d30c      	bcc.n	800caca <__copybits+0x36>
 800cab0:	1aa3      	subs	r3, r4, r2
 800cab2:	3b11      	subs	r3, #17
 800cab4:	f023 0303 	bic.w	r3, r3, #3
 800cab8:	3211      	adds	r2, #17
 800caba:	42a2      	cmp	r2, r4
 800cabc:	bf88      	it	hi
 800cabe:	2300      	movhi	r3, #0
 800cac0:	4418      	add	r0, r3
 800cac2:	2300      	movs	r3, #0
 800cac4:	4288      	cmp	r0, r1
 800cac6:	d305      	bcc.n	800cad4 <__copybits+0x40>
 800cac8:	bd70      	pop	{r4, r5, r6, pc}
 800caca:	f853 6b04 	ldr.w	r6, [r3], #4
 800cace:	f845 6f04 	str.w	r6, [r5, #4]!
 800cad2:	e7eb      	b.n	800caac <__copybits+0x18>
 800cad4:	f840 3b04 	str.w	r3, [r0], #4
 800cad8:	e7f4      	b.n	800cac4 <__copybits+0x30>

0800cada <__any_on>:
 800cada:	f100 0214 	add.w	r2, r0, #20
 800cade:	6900      	ldr	r0, [r0, #16]
 800cae0:	114b      	asrs	r3, r1, #5
 800cae2:	4298      	cmp	r0, r3
 800cae4:	b510      	push	{r4, lr}
 800cae6:	db11      	blt.n	800cb0c <__any_on+0x32>
 800cae8:	dd0a      	ble.n	800cb00 <__any_on+0x26>
 800caea:	f011 011f 	ands.w	r1, r1, #31
 800caee:	d007      	beq.n	800cb00 <__any_on+0x26>
 800caf0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800caf4:	fa24 f001 	lsr.w	r0, r4, r1
 800caf8:	fa00 f101 	lsl.w	r1, r0, r1
 800cafc:	428c      	cmp	r4, r1
 800cafe:	d10b      	bne.n	800cb18 <__any_on+0x3e>
 800cb00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb04:	4293      	cmp	r3, r2
 800cb06:	d803      	bhi.n	800cb10 <__any_on+0x36>
 800cb08:	2000      	movs	r0, #0
 800cb0a:	bd10      	pop	{r4, pc}
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	e7f7      	b.n	800cb00 <__any_on+0x26>
 800cb10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cb14:	2900      	cmp	r1, #0
 800cb16:	d0f5      	beq.n	800cb04 <__any_on+0x2a>
 800cb18:	2001      	movs	r0, #1
 800cb1a:	e7f6      	b.n	800cb0a <__any_on+0x30>

0800cb1c <_realloc_r>:
 800cb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb20:	4680      	mov	r8, r0
 800cb22:	4615      	mov	r5, r2
 800cb24:	460c      	mov	r4, r1
 800cb26:	b921      	cbnz	r1, 800cb32 <_realloc_r+0x16>
 800cb28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb2c:	4611      	mov	r1, r2
 800cb2e:	f7fd b99d 	b.w	8009e6c <_malloc_r>
 800cb32:	b92a      	cbnz	r2, 800cb40 <_realloc_r+0x24>
 800cb34:	f7fd f92e 	bl	8009d94 <_free_r>
 800cb38:	2400      	movs	r4, #0
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb40:	f000 f8d2 	bl	800cce8 <_malloc_usable_size_r>
 800cb44:	4285      	cmp	r5, r0
 800cb46:	4606      	mov	r6, r0
 800cb48:	d802      	bhi.n	800cb50 <_realloc_r+0x34>
 800cb4a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800cb4e:	d8f4      	bhi.n	800cb3a <_realloc_r+0x1e>
 800cb50:	4629      	mov	r1, r5
 800cb52:	4640      	mov	r0, r8
 800cb54:	f7fd f98a 	bl	8009e6c <_malloc_r>
 800cb58:	4607      	mov	r7, r0
 800cb5a:	2800      	cmp	r0, #0
 800cb5c:	d0ec      	beq.n	800cb38 <_realloc_r+0x1c>
 800cb5e:	42b5      	cmp	r5, r6
 800cb60:	462a      	mov	r2, r5
 800cb62:	4621      	mov	r1, r4
 800cb64:	bf28      	it	cs
 800cb66:	4632      	movcs	r2, r6
 800cb68:	f7fd f8ff 	bl	8009d6a <memcpy>
 800cb6c:	4621      	mov	r1, r4
 800cb6e:	4640      	mov	r0, r8
 800cb70:	f7fd f910 	bl	8009d94 <_free_r>
 800cb74:	463c      	mov	r4, r7
 800cb76:	e7e0      	b.n	800cb3a <_realloc_r+0x1e>

0800cb78 <_strtoul_l.constprop.0>:
 800cb78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cb7c:	4e34      	ldr	r6, [pc, #208]	@ (800cc50 <_strtoul_l.constprop.0+0xd8>)
 800cb7e:	4686      	mov	lr, r0
 800cb80:	460d      	mov	r5, r1
 800cb82:	4628      	mov	r0, r5
 800cb84:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cb88:	5d37      	ldrb	r7, [r6, r4]
 800cb8a:	f017 0708 	ands.w	r7, r7, #8
 800cb8e:	d1f8      	bne.n	800cb82 <_strtoul_l.constprop.0+0xa>
 800cb90:	2c2d      	cmp	r4, #45	@ 0x2d
 800cb92:	d12f      	bne.n	800cbf4 <_strtoul_l.constprop.0+0x7c>
 800cb94:	782c      	ldrb	r4, [r5, #0]
 800cb96:	2701      	movs	r7, #1
 800cb98:	1c85      	adds	r5, r0, #2
 800cb9a:	f033 0010 	bics.w	r0, r3, #16
 800cb9e:	d109      	bne.n	800cbb4 <_strtoul_l.constprop.0+0x3c>
 800cba0:	2c30      	cmp	r4, #48	@ 0x30
 800cba2:	d12c      	bne.n	800cbfe <_strtoul_l.constprop.0+0x86>
 800cba4:	7828      	ldrb	r0, [r5, #0]
 800cba6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800cbaa:	2858      	cmp	r0, #88	@ 0x58
 800cbac:	d127      	bne.n	800cbfe <_strtoul_l.constprop.0+0x86>
 800cbae:	786c      	ldrb	r4, [r5, #1]
 800cbb0:	2310      	movs	r3, #16
 800cbb2:	3502      	adds	r5, #2
 800cbb4:	f04f 38ff 	mov.w	r8, #4294967295
 800cbb8:	2600      	movs	r6, #0
 800cbba:	fbb8 f8f3 	udiv	r8, r8, r3
 800cbbe:	fb03 f908 	mul.w	r9, r3, r8
 800cbc2:	ea6f 0909 	mvn.w	r9, r9
 800cbc6:	4630      	mov	r0, r6
 800cbc8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800cbcc:	f1bc 0f09 	cmp.w	ip, #9
 800cbd0:	d81c      	bhi.n	800cc0c <_strtoul_l.constprop.0+0x94>
 800cbd2:	4664      	mov	r4, ip
 800cbd4:	42a3      	cmp	r3, r4
 800cbd6:	dd2a      	ble.n	800cc2e <_strtoul_l.constprop.0+0xb6>
 800cbd8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800cbdc:	d007      	beq.n	800cbee <_strtoul_l.constprop.0+0x76>
 800cbde:	4580      	cmp	r8, r0
 800cbe0:	d322      	bcc.n	800cc28 <_strtoul_l.constprop.0+0xb0>
 800cbe2:	d101      	bne.n	800cbe8 <_strtoul_l.constprop.0+0x70>
 800cbe4:	45a1      	cmp	r9, r4
 800cbe6:	db1f      	blt.n	800cc28 <_strtoul_l.constprop.0+0xb0>
 800cbe8:	fb00 4003 	mla	r0, r0, r3, r4
 800cbec:	2601      	movs	r6, #1
 800cbee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cbf2:	e7e9      	b.n	800cbc8 <_strtoul_l.constprop.0+0x50>
 800cbf4:	2c2b      	cmp	r4, #43	@ 0x2b
 800cbf6:	bf04      	itt	eq
 800cbf8:	782c      	ldrbeq	r4, [r5, #0]
 800cbfa:	1c85      	addeq	r5, r0, #2
 800cbfc:	e7cd      	b.n	800cb9a <_strtoul_l.constprop.0+0x22>
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d1d8      	bne.n	800cbb4 <_strtoul_l.constprop.0+0x3c>
 800cc02:	2c30      	cmp	r4, #48	@ 0x30
 800cc04:	bf0c      	ite	eq
 800cc06:	2308      	moveq	r3, #8
 800cc08:	230a      	movne	r3, #10
 800cc0a:	e7d3      	b.n	800cbb4 <_strtoul_l.constprop.0+0x3c>
 800cc0c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800cc10:	f1bc 0f19 	cmp.w	ip, #25
 800cc14:	d801      	bhi.n	800cc1a <_strtoul_l.constprop.0+0xa2>
 800cc16:	3c37      	subs	r4, #55	@ 0x37
 800cc18:	e7dc      	b.n	800cbd4 <_strtoul_l.constprop.0+0x5c>
 800cc1a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800cc1e:	f1bc 0f19 	cmp.w	ip, #25
 800cc22:	d804      	bhi.n	800cc2e <_strtoul_l.constprop.0+0xb6>
 800cc24:	3c57      	subs	r4, #87	@ 0x57
 800cc26:	e7d5      	b.n	800cbd4 <_strtoul_l.constprop.0+0x5c>
 800cc28:	f04f 36ff 	mov.w	r6, #4294967295
 800cc2c:	e7df      	b.n	800cbee <_strtoul_l.constprop.0+0x76>
 800cc2e:	1c73      	adds	r3, r6, #1
 800cc30:	d106      	bne.n	800cc40 <_strtoul_l.constprop.0+0xc8>
 800cc32:	2322      	movs	r3, #34	@ 0x22
 800cc34:	f8ce 3000 	str.w	r3, [lr]
 800cc38:	4630      	mov	r0, r6
 800cc3a:	b932      	cbnz	r2, 800cc4a <_strtoul_l.constprop.0+0xd2>
 800cc3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cc40:	b107      	cbz	r7, 800cc44 <_strtoul_l.constprop.0+0xcc>
 800cc42:	4240      	negs	r0, r0
 800cc44:	2a00      	cmp	r2, #0
 800cc46:	d0f9      	beq.n	800cc3c <_strtoul_l.constprop.0+0xc4>
 800cc48:	b106      	cbz	r6, 800cc4c <_strtoul_l.constprop.0+0xd4>
 800cc4a:	1e69      	subs	r1, r5, #1
 800cc4c:	6011      	str	r1, [r2, #0]
 800cc4e:	e7f5      	b.n	800cc3c <_strtoul_l.constprop.0+0xc4>
 800cc50:	0800dcb1 	.word	0x0800dcb1

0800cc54 <_strtoul_r>:
 800cc54:	f7ff bf90 	b.w	800cb78 <_strtoul_l.constprop.0>

0800cc58 <__ascii_wctomb>:
 800cc58:	4603      	mov	r3, r0
 800cc5a:	4608      	mov	r0, r1
 800cc5c:	b141      	cbz	r1, 800cc70 <__ascii_wctomb+0x18>
 800cc5e:	2aff      	cmp	r2, #255	@ 0xff
 800cc60:	d904      	bls.n	800cc6c <__ascii_wctomb+0x14>
 800cc62:	228a      	movs	r2, #138	@ 0x8a
 800cc64:	601a      	str	r2, [r3, #0]
 800cc66:	f04f 30ff 	mov.w	r0, #4294967295
 800cc6a:	4770      	bx	lr
 800cc6c:	700a      	strb	r2, [r1, #0]
 800cc6e:	2001      	movs	r0, #1
 800cc70:	4770      	bx	lr
	...

0800cc74 <__assert_func>:
 800cc74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc76:	4614      	mov	r4, r2
 800cc78:	461a      	mov	r2, r3
 800cc7a:	4b09      	ldr	r3, [pc, #36]	@ (800cca0 <__assert_func+0x2c>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	4605      	mov	r5, r0
 800cc80:	68d8      	ldr	r0, [r3, #12]
 800cc82:	b954      	cbnz	r4, 800cc9a <__assert_func+0x26>
 800cc84:	4b07      	ldr	r3, [pc, #28]	@ (800cca4 <__assert_func+0x30>)
 800cc86:	461c      	mov	r4, r3
 800cc88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc8c:	9100      	str	r1, [sp, #0]
 800cc8e:	462b      	mov	r3, r5
 800cc90:	4905      	ldr	r1, [pc, #20]	@ (800cca8 <__assert_func+0x34>)
 800cc92:	f000 f831 	bl	800ccf8 <fiprintf>
 800cc96:	f000 f841 	bl	800cd1c <abort>
 800cc9a:	4b04      	ldr	r3, [pc, #16]	@ (800ccac <__assert_func+0x38>)
 800cc9c:	e7f4      	b.n	800cc88 <__assert_func+0x14>
 800cc9e:	bf00      	nop
 800cca0:	20000020 	.word	0x20000020
 800cca4:	0800e023 	.word	0x0800e023
 800cca8:	0800dff5 	.word	0x0800dff5
 800ccac:	0800dfe8 	.word	0x0800dfe8

0800ccb0 <_calloc_r>:
 800ccb0:	b570      	push	{r4, r5, r6, lr}
 800ccb2:	fba1 5402 	umull	r5, r4, r1, r2
 800ccb6:	b93c      	cbnz	r4, 800ccc8 <_calloc_r+0x18>
 800ccb8:	4629      	mov	r1, r5
 800ccba:	f7fd f8d7 	bl	8009e6c <_malloc_r>
 800ccbe:	4606      	mov	r6, r0
 800ccc0:	b928      	cbnz	r0, 800ccce <_calloc_r+0x1e>
 800ccc2:	2600      	movs	r6, #0
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	bd70      	pop	{r4, r5, r6, pc}
 800ccc8:	220c      	movs	r2, #12
 800ccca:	6002      	str	r2, [r0, #0]
 800cccc:	e7f9      	b.n	800ccc2 <_calloc_r+0x12>
 800ccce:	462a      	mov	r2, r5
 800ccd0:	4621      	mov	r1, r4
 800ccd2:	f7fc ffab 	bl	8009c2c <memset>
 800ccd6:	e7f5      	b.n	800ccc4 <_calloc_r+0x14>

0800ccd8 <malloc>:
 800ccd8:	4b02      	ldr	r3, [pc, #8]	@ (800cce4 <malloc+0xc>)
 800ccda:	4601      	mov	r1, r0
 800ccdc:	6818      	ldr	r0, [r3, #0]
 800ccde:	f7fd b8c5 	b.w	8009e6c <_malloc_r>
 800cce2:	bf00      	nop
 800cce4:	20000020 	.word	0x20000020

0800cce8 <_malloc_usable_size_r>:
 800cce8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccec:	1f18      	subs	r0, r3, #4
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	bfbc      	itt	lt
 800ccf2:	580b      	ldrlt	r3, [r1, r0]
 800ccf4:	18c0      	addlt	r0, r0, r3
 800ccf6:	4770      	bx	lr

0800ccf8 <fiprintf>:
 800ccf8:	b40e      	push	{r1, r2, r3}
 800ccfa:	b503      	push	{r0, r1, lr}
 800ccfc:	4601      	mov	r1, r0
 800ccfe:	ab03      	add	r3, sp, #12
 800cd00:	4805      	ldr	r0, [pc, #20]	@ (800cd18 <fiprintf+0x20>)
 800cd02:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd06:	6800      	ldr	r0, [r0, #0]
 800cd08:	9301      	str	r3, [sp, #4]
 800cd0a:	f000 f837 	bl	800cd7c <_vfiprintf_r>
 800cd0e:	b002      	add	sp, #8
 800cd10:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd14:	b003      	add	sp, #12
 800cd16:	4770      	bx	lr
 800cd18:	20000020 	.word	0x20000020

0800cd1c <abort>:
 800cd1c:	b508      	push	{r3, lr}
 800cd1e:	2006      	movs	r0, #6
 800cd20:	f000 fa00 	bl	800d124 <raise>
 800cd24:	2001      	movs	r0, #1
 800cd26:	f7f6 f8a5 	bl	8002e74 <_exit>

0800cd2a <__sfputc_r>:
 800cd2a:	6893      	ldr	r3, [r2, #8]
 800cd2c:	3b01      	subs	r3, #1
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	b410      	push	{r4}
 800cd32:	6093      	str	r3, [r2, #8]
 800cd34:	da08      	bge.n	800cd48 <__sfputc_r+0x1e>
 800cd36:	6994      	ldr	r4, [r2, #24]
 800cd38:	42a3      	cmp	r3, r4
 800cd3a:	db01      	blt.n	800cd40 <__sfputc_r+0x16>
 800cd3c:	290a      	cmp	r1, #10
 800cd3e:	d103      	bne.n	800cd48 <__sfputc_r+0x1e>
 800cd40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd44:	f000 b932 	b.w	800cfac <__swbuf_r>
 800cd48:	6813      	ldr	r3, [r2, #0]
 800cd4a:	1c58      	adds	r0, r3, #1
 800cd4c:	6010      	str	r0, [r2, #0]
 800cd4e:	7019      	strb	r1, [r3, #0]
 800cd50:	4608      	mov	r0, r1
 800cd52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cd56:	4770      	bx	lr

0800cd58 <__sfputs_r>:
 800cd58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd5a:	4606      	mov	r6, r0
 800cd5c:	460f      	mov	r7, r1
 800cd5e:	4614      	mov	r4, r2
 800cd60:	18d5      	adds	r5, r2, r3
 800cd62:	42ac      	cmp	r4, r5
 800cd64:	d101      	bne.n	800cd6a <__sfputs_r+0x12>
 800cd66:	2000      	movs	r0, #0
 800cd68:	e007      	b.n	800cd7a <__sfputs_r+0x22>
 800cd6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd6e:	463a      	mov	r2, r7
 800cd70:	4630      	mov	r0, r6
 800cd72:	f7ff ffda 	bl	800cd2a <__sfputc_r>
 800cd76:	1c43      	adds	r3, r0, #1
 800cd78:	d1f3      	bne.n	800cd62 <__sfputs_r+0xa>
 800cd7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cd7c <_vfiprintf_r>:
 800cd7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd80:	460d      	mov	r5, r1
 800cd82:	b09d      	sub	sp, #116	@ 0x74
 800cd84:	4614      	mov	r4, r2
 800cd86:	4698      	mov	r8, r3
 800cd88:	4606      	mov	r6, r0
 800cd8a:	b118      	cbz	r0, 800cd94 <_vfiprintf_r+0x18>
 800cd8c:	6a03      	ldr	r3, [r0, #32]
 800cd8e:	b90b      	cbnz	r3, 800cd94 <_vfiprintf_r+0x18>
 800cd90:	f7fc fe34 	bl	80099fc <__sinit>
 800cd94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cd96:	07d9      	lsls	r1, r3, #31
 800cd98:	d405      	bmi.n	800cda6 <_vfiprintf_r+0x2a>
 800cd9a:	89ab      	ldrh	r3, [r5, #12]
 800cd9c:	059a      	lsls	r2, r3, #22
 800cd9e:	d402      	bmi.n	800cda6 <_vfiprintf_r+0x2a>
 800cda0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cda2:	f7fc ffe0 	bl	8009d66 <__retarget_lock_acquire_recursive>
 800cda6:	89ab      	ldrh	r3, [r5, #12]
 800cda8:	071b      	lsls	r3, r3, #28
 800cdaa:	d501      	bpl.n	800cdb0 <_vfiprintf_r+0x34>
 800cdac:	692b      	ldr	r3, [r5, #16]
 800cdae:	b99b      	cbnz	r3, 800cdd8 <_vfiprintf_r+0x5c>
 800cdb0:	4629      	mov	r1, r5
 800cdb2:	4630      	mov	r0, r6
 800cdb4:	f000 f938 	bl	800d028 <__swsetup_r>
 800cdb8:	b170      	cbz	r0, 800cdd8 <_vfiprintf_r+0x5c>
 800cdba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdbc:	07dc      	lsls	r4, r3, #31
 800cdbe:	d504      	bpl.n	800cdca <_vfiprintf_r+0x4e>
 800cdc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc4:	b01d      	add	sp, #116	@ 0x74
 800cdc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cdca:	89ab      	ldrh	r3, [r5, #12]
 800cdcc:	0598      	lsls	r0, r3, #22
 800cdce:	d4f7      	bmi.n	800cdc0 <_vfiprintf_r+0x44>
 800cdd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdd2:	f7fc ffc9 	bl	8009d68 <__retarget_lock_release_recursive>
 800cdd6:	e7f3      	b.n	800cdc0 <_vfiprintf_r+0x44>
 800cdd8:	2300      	movs	r3, #0
 800cdda:	9309      	str	r3, [sp, #36]	@ 0x24
 800cddc:	2320      	movs	r3, #32
 800cdde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cde2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cde6:	2330      	movs	r3, #48	@ 0x30
 800cde8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cf98 <_vfiprintf_r+0x21c>
 800cdec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cdf0:	f04f 0901 	mov.w	r9, #1
 800cdf4:	4623      	mov	r3, r4
 800cdf6:	469a      	mov	sl, r3
 800cdf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdfc:	b10a      	cbz	r2, 800ce02 <_vfiprintf_r+0x86>
 800cdfe:	2a25      	cmp	r2, #37	@ 0x25
 800ce00:	d1f9      	bne.n	800cdf6 <_vfiprintf_r+0x7a>
 800ce02:	ebba 0b04 	subs.w	fp, sl, r4
 800ce06:	d00b      	beq.n	800ce20 <_vfiprintf_r+0xa4>
 800ce08:	465b      	mov	r3, fp
 800ce0a:	4622      	mov	r2, r4
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	4630      	mov	r0, r6
 800ce10:	f7ff ffa2 	bl	800cd58 <__sfputs_r>
 800ce14:	3001      	adds	r0, #1
 800ce16:	f000 80a7 	beq.w	800cf68 <_vfiprintf_r+0x1ec>
 800ce1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce1c:	445a      	add	r2, fp
 800ce1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce20:	f89a 3000 	ldrb.w	r3, [sl]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	f000 809f 	beq.w	800cf68 <_vfiprintf_r+0x1ec>
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce34:	f10a 0a01 	add.w	sl, sl, #1
 800ce38:	9304      	str	r3, [sp, #16]
 800ce3a:	9307      	str	r3, [sp, #28]
 800ce3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce40:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce42:	4654      	mov	r4, sl
 800ce44:	2205      	movs	r2, #5
 800ce46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce4a:	4853      	ldr	r0, [pc, #332]	@ (800cf98 <_vfiprintf_r+0x21c>)
 800ce4c:	f7f3 f9c8 	bl	80001e0 <memchr>
 800ce50:	9a04      	ldr	r2, [sp, #16]
 800ce52:	b9d8      	cbnz	r0, 800ce8c <_vfiprintf_r+0x110>
 800ce54:	06d1      	lsls	r1, r2, #27
 800ce56:	bf44      	itt	mi
 800ce58:	2320      	movmi	r3, #32
 800ce5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce5e:	0713      	lsls	r3, r2, #28
 800ce60:	bf44      	itt	mi
 800ce62:	232b      	movmi	r3, #43	@ 0x2b
 800ce64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce68:	f89a 3000 	ldrb.w	r3, [sl]
 800ce6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800ce6e:	d015      	beq.n	800ce9c <_vfiprintf_r+0x120>
 800ce70:	9a07      	ldr	r2, [sp, #28]
 800ce72:	4654      	mov	r4, sl
 800ce74:	2000      	movs	r0, #0
 800ce76:	f04f 0c0a 	mov.w	ip, #10
 800ce7a:	4621      	mov	r1, r4
 800ce7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce80:	3b30      	subs	r3, #48	@ 0x30
 800ce82:	2b09      	cmp	r3, #9
 800ce84:	d94b      	bls.n	800cf1e <_vfiprintf_r+0x1a2>
 800ce86:	b1b0      	cbz	r0, 800ceb6 <_vfiprintf_r+0x13a>
 800ce88:	9207      	str	r2, [sp, #28]
 800ce8a:	e014      	b.n	800ceb6 <_vfiprintf_r+0x13a>
 800ce8c:	eba0 0308 	sub.w	r3, r0, r8
 800ce90:	fa09 f303 	lsl.w	r3, r9, r3
 800ce94:	4313      	orrs	r3, r2
 800ce96:	9304      	str	r3, [sp, #16]
 800ce98:	46a2      	mov	sl, r4
 800ce9a:	e7d2      	b.n	800ce42 <_vfiprintf_r+0xc6>
 800ce9c:	9b03      	ldr	r3, [sp, #12]
 800ce9e:	1d19      	adds	r1, r3, #4
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	9103      	str	r1, [sp, #12]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	bfbb      	ittet	lt
 800cea8:	425b      	neglt	r3, r3
 800ceaa:	f042 0202 	orrlt.w	r2, r2, #2
 800ceae:	9307      	strge	r3, [sp, #28]
 800ceb0:	9307      	strlt	r3, [sp, #28]
 800ceb2:	bfb8      	it	lt
 800ceb4:	9204      	strlt	r2, [sp, #16]
 800ceb6:	7823      	ldrb	r3, [r4, #0]
 800ceb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800ceba:	d10a      	bne.n	800ced2 <_vfiprintf_r+0x156>
 800cebc:	7863      	ldrb	r3, [r4, #1]
 800cebe:	2b2a      	cmp	r3, #42	@ 0x2a
 800cec0:	d132      	bne.n	800cf28 <_vfiprintf_r+0x1ac>
 800cec2:	9b03      	ldr	r3, [sp, #12]
 800cec4:	1d1a      	adds	r2, r3, #4
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	9203      	str	r2, [sp, #12]
 800ceca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cece:	3402      	adds	r4, #2
 800ced0:	9305      	str	r3, [sp, #20]
 800ced2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cfa8 <_vfiprintf_r+0x22c>
 800ced6:	7821      	ldrb	r1, [r4, #0]
 800ced8:	2203      	movs	r2, #3
 800ceda:	4650      	mov	r0, sl
 800cedc:	f7f3 f980 	bl	80001e0 <memchr>
 800cee0:	b138      	cbz	r0, 800cef2 <_vfiprintf_r+0x176>
 800cee2:	9b04      	ldr	r3, [sp, #16]
 800cee4:	eba0 000a 	sub.w	r0, r0, sl
 800cee8:	2240      	movs	r2, #64	@ 0x40
 800ceea:	4082      	lsls	r2, r0
 800ceec:	4313      	orrs	r3, r2
 800ceee:	3401      	adds	r4, #1
 800cef0:	9304      	str	r3, [sp, #16]
 800cef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cef6:	4829      	ldr	r0, [pc, #164]	@ (800cf9c <_vfiprintf_r+0x220>)
 800cef8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cefc:	2206      	movs	r2, #6
 800cefe:	f7f3 f96f 	bl	80001e0 <memchr>
 800cf02:	2800      	cmp	r0, #0
 800cf04:	d03f      	beq.n	800cf86 <_vfiprintf_r+0x20a>
 800cf06:	4b26      	ldr	r3, [pc, #152]	@ (800cfa0 <_vfiprintf_r+0x224>)
 800cf08:	bb1b      	cbnz	r3, 800cf52 <_vfiprintf_r+0x1d6>
 800cf0a:	9b03      	ldr	r3, [sp, #12]
 800cf0c:	3307      	adds	r3, #7
 800cf0e:	f023 0307 	bic.w	r3, r3, #7
 800cf12:	3308      	adds	r3, #8
 800cf14:	9303      	str	r3, [sp, #12]
 800cf16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf18:	443b      	add	r3, r7
 800cf1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf1c:	e76a      	b.n	800cdf4 <_vfiprintf_r+0x78>
 800cf1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf22:	460c      	mov	r4, r1
 800cf24:	2001      	movs	r0, #1
 800cf26:	e7a8      	b.n	800ce7a <_vfiprintf_r+0xfe>
 800cf28:	2300      	movs	r3, #0
 800cf2a:	3401      	adds	r4, #1
 800cf2c:	9305      	str	r3, [sp, #20]
 800cf2e:	4619      	mov	r1, r3
 800cf30:	f04f 0c0a 	mov.w	ip, #10
 800cf34:	4620      	mov	r0, r4
 800cf36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf3a:	3a30      	subs	r2, #48	@ 0x30
 800cf3c:	2a09      	cmp	r2, #9
 800cf3e:	d903      	bls.n	800cf48 <_vfiprintf_r+0x1cc>
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d0c6      	beq.n	800ced2 <_vfiprintf_r+0x156>
 800cf44:	9105      	str	r1, [sp, #20]
 800cf46:	e7c4      	b.n	800ced2 <_vfiprintf_r+0x156>
 800cf48:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf4c:	4604      	mov	r4, r0
 800cf4e:	2301      	movs	r3, #1
 800cf50:	e7f0      	b.n	800cf34 <_vfiprintf_r+0x1b8>
 800cf52:	ab03      	add	r3, sp, #12
 800cf54:	9300      	str	r3, [sp, #0]
 800cf56:	462a      	mov	r2, r5
 800cf58:	4b12      	ldr	r3, [pc, #72]	@ (800cfa4 <_vfiprintf_r+0x228>)
 800cf5a:	a904      	add	r1, sp, #16
 800cf5c:	4630      	mov	r0, r6
 800cf5e:	f3af 8000 	nop.w
 800cf62:	4607      	mov	r7, r0
 800cf64:	1c78      	adds	r0, r7, #1
 800cf66:	d1d6      	bne.n	800cf16 <_vfiprintf_r+0x19a>
 800cf68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cf6a:	07d9      	lsls	r1, r3, #31
 800cf6c:	d405      	bmi.n	800cf7a <_vfiprintf_r+0x1fe>
 800cf6e:	89ab      	ldrh	r3, [r5, #12]
 800cf70:	059a      	lsls	r2, r3, #22
 800cf72:	d402      	bmi.n	800cf7a <_vfiprintf_r+0x1fe>
 800cf74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cf76:	f7fc fef7 	bl	8009d68 <__retarget_lock_release_recursive>
 800cf7a:	89ab      	ldrh	r3, [r5, #12]
 800cf7c:	065b      	lsls	r3, r3, #25
 800cf7e:	f53f af1f 	bmi.w	800cdc0 <_vfiprintf_r+0x44>
 800cf82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cf84:	e71e      	b.n	800cdc4 <_vfiprintf_r+0x48>
 800cf86:	ab03      	add	r3, sp, #12
 800cf88:	9300      	str	r3, [sp, #0]
 800cf8a:	462a      	mov	r2, r5
 800cf8c:	4b05      	ldr	r3, [pc, #20]	@ (800cfa4 <_vfiprintf_r+0x228>)
 800cf8e:	a904      	add	r1, sp, #16
 800cf90:	4630      	mov	r0, r6
 800cf92:	f7fe fa0d 	bl	800b3b0 <_printf_i>
 800cf96:	e7e4      	b.n	800cf62 <_vfiprintf_r+0x1e6>
 800cf98:	0800ddb1 	.word	0x0800ddb1
 800cf9c:	0800ddbb 	.word	0x0800ddbb
 800cfa0:	00000000 	.word	0x00000000
 800cfa4:	0800cd59 	.word	0x0800cd59
 800cfa8:	0800ddb7 	.word	0x0800ddb7

0800cfac <__swbuf_r>:
 800cfac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfae:	460e      	mov	r6, r1
 800cfb0:	4614      	mov	r4, r2
 800cfb2:	4605      	mov	r5, r0
 800cfb4:	b118      	cbz	r0, 800cfbe <__swbuf_r+0x12>
 800cfb6:	6a03      	ldr	r3, [r0, #32]
 800cfb8:	b90b      	cbnz	r3, 800cfbe <__swbuf_r+0x12>
 800cfba:	f7fc fd1f 	bl	80099fc <__sinit>
 800cfbe:	69a3      	ldr	r3, [r4, #24]
 800cfc0:	60a3      	str	r3, [r4, #8]
 800cfc2:	89a3      	ldrh	r3, [r4, #12]
 800cfc4:	071a      	lsls	r2, r3, #28
 800cfc6:	d501      	bpl.n	800cfcc <__swbuf_r+0x20>
 800cfc8:	6923      	ldr	r3, [r4, #16]
 800cfca:	b943      	cbnz	r3, 800cfde <__swbuf_r+0x32>
 800cfcc:	4621      	mov	r1, r4
 800cfce:	4628      	mov	r0, r5
 800cfd0:	f000 f82a 	bl	800d028 <__swsetup_r>
 800cfd4:	b118      	cbz	r0, 800cfde <__swbuf_r+0x32>
 800cfd6:	f04f 37ff 	mov.w	r7, #4294967295
 800cfda:	4638      	mov	r0, r7
 800cfdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cfde:	6823      	ldr	r3, [r4, #0]
 800cfe0:	6922      	ldr	r2, [r4, #16]
 800cfe2:	1a98      	subs	r0, r3, r2
 800cfe4:	6963      	ldr	r3, [r4, #20]
 800cfe6:	b2f6      	uxtb	r6, r6
 800cfe8:	4283      	cmp	r3, r0
 800cfea:	4637      	mov	r7, r6
 800cfec:	dc05      	bgt.n	800cffa <__swbuf_r+0x4e>
 800cfee:	4621      	mov	r1, r4
 800cff0:	4628      	mov	r0, r5
 800cff2:	f7fe fccf 	bl	800b994 <_fflush_r>
 800cff6:	2800      	cmp	r0, #0
 800cff8:	d1ed      	bne.n	800cfd6 <__swbuf_r+0x2a>
 800cffa:	68a3      	ldr	r3, [r4, #8]
 800cffc:	3b01      	subs	r3, #1
 800cffe:	60a3      	str	r3, [r4, #8]
 800d000:	6823      	ldr	r3, [r4, #0]
 800d002:	1c5a      	adds	r2, r3, #1
 800d004:	6022      	str	r2, [r4, #0]
 800d006:	701e      	strb	r6, [r3, #0]
 800d008:	6962      	ldr	r2, [r4, #20]
 800d00a:	1c43      	adds	r3, r0, #1
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d004      	beq.n	800d01a <__swbuf_r+0x6e>
 800d010:	89a3      	ldrh	r3, [r4, #12]
 800d012:	07db      	lsls	r3, r3, #31
 800d014:	d5e1      	bpl.n	800cfda <__swbuf_r+0x2e>
 800d016:	2e0a      	cmp	r6, #10
 800d018:	d1df      	bne.n	800cfda <__swbuf_r+0x2e>
 800d01a:	4621      	mov	r1, r4
 800d01c:	4628      	mov	r0, r5
 800d01e:	f7fe fcb9 	bl	800b994 <_fflush_r>
 800d022:	2800      	cmp	r0, #0
 800d024:	d0d9      	beq.n	800cfda <__swbuf_r+0x2e>
 800d026:	e7d6      	b.n	800cfd6 <__swbuf_r+0x2a>

0800d028 <__swsetup_r>:
 800d028:	b538      	push	{r3, r4, r5, lr}
 800d02a:	4b29      	ldr	r3, [pc, #164]	@ (800d0d0 <__swsetup_r+0xa8>)
 800d02c:	4605      	mov	r5, r0
 800d02e:	6818      	ldr	r0, [r3, #0]
 800d030:	460c      	mov	r4, r1
 800d032:	b118      	cbz	r0, 800d03c <__swsetup_r+0x14>
 800d034:	6a03      	ldr	r3, [r0, #32]
 800d036:	b90b      	cbnz	r3, 800d03c <__swsetup_r+0x14>
 800d038:	f7fc fce0 	bl	80099fc <__sinit>
 800d03c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d040:	0719      	lsls	r1, r3, #28
 800d042:	d422      	bmi.n	800d08a <__swsetup_r+0x62>
 800d044:	06da      	lsls	r2, r3, #27
 800d046:	d407      	bmi.n	800d058 <__swsetup_r+0x30>
 800d048:	2209      	movs	r2, #9
 800d04a:	602a      	str	r2, [r5, #0]
 800d04c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d050:	81a3      	strh	r3, [r4, #12]
 800d052:	f04f 30ff 	mov.w	r0, #4294967295
 800d056:	e033      	b.n	800d0c0 <__swsetup_r+0x98>
 800d058:	0758      	lsls	r0, r3, #29
 800d05a:	d512      	bpl.n	800d082 <__swsetup_r+0x5a>
 800d05c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d05e:	b141      	cbz	r1, 800d072 <__swsetup_r+0x4a>
 800d060:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d064:	4299      	cmp	r1, r3
 800d066:	d002      	beq.n	800d06e <__swsetup_r+0x46>
 800d068:	4628      	mov	r0, r5
 800d06a:	f7fc fe93 	bl	8009d94 <_free_r>
 800d06e:	2300      	movs	r3, #0
 800d070:	6363      	str	r3, [r4, #52]	@ 0x34
 800d072:	89a3      	ldrh	r3, [r4, #12]
 800d074:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d078:	81a3      	strh	r3, [r4, #12]
 800d07a:	2300      	movs	r3, #0
 800d07c:	6063      	str	r3, [r4, #4]
 800d07e:	6923      	ldr	r3, [r4, #16]
 800d080:	6023      	str	r3, [r4, #0]
 800d082:	89a3      	ldrh	r3, [r4, #12]
 800d084:	f043 0308 	orr.w	r3, r3, #8
 800d088:	81a3      	strh	r3, [r4, #12]
 800d08a:	6923      	ldr	r3, [r4, #16]
 800d08c:	b94b      	cbnz	r3, 800d0a2 <__swsetup_r+0x7a>
 800d08e:	89a3      	ldrh	r3, [r4, #12]
 800d090:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d094:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d098:	d003      	beq.n	800d0a2 <__swsetup_r+0x7a>
 800d09a:	4621      	mov	r1, r4
 800d09c:	4628      	mov	r0, r5
 800d09e:	f000 f883 	bl	800d1a8 <__smakebuf_r>
 800d0a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0a6:	f013 0201 	ands.w	r2, r3, #1
 800d0aa:	d00a      	beq.n	800d0c2 <__swsetup_r+0x9a>
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	60a2      	str	r2, [r4, #8]
 800d0b0:	6962      	ldr	r2, [r4, #20]
 800d0b2:	4252      	negs	r2, r2
 800d0b4:	61a2      	str	r2, [r4, #24]
 800d0b6:	6922      	ldr	r2, [r4, #16]
 800d0b8:	b942      	cbnz	r2, 800d0cc <__swsetup_r+0xa4>
 800d0ba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d0be:	d1c5      	bne.n	800d04c <__swsetup_r+0x24>
 800d0c0:	bd38      	pop	{r3, r4, r5, pc}
 800d0c2:	0799      	lsls	r1, r3, #30
 800d0c4:	bf58      	it	pl
 800d0c6:	6962      	ldrpl	r2, [r4, #20]
 800d0c8:	60a2      	str	r2, [r4, #8]
 800d0ca:	e7f4      	b.n	800d0b6 <__swsetup_r+0x8e>
 800d0cc:	2000      	movs	r0, #0
 800d0ce:	e7f7      	b.n	800d0c0 <__swsetup_r+0x98>
 800d0d0:	20000020 	.word	0x20000020

0800d0d4 <_raise_r>:
 800d0d4:	291f      	cmp	r1, #31
 800d0d6:	b538      	push	{r3, r4, r5, lr}
 800d0d8:	4605      	mov	r5, r0
 800d0da:	460c      	mov	r4, r1
 800d0dc:	d904      	bls.n	800d0e8 <_raise_r+0x14>
 800d0de:	2316      	movs	r3, #22
 800d0e0:	6003      	str	r3, [r0, #0]
 800d0e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e6:	bd38      	pop	{r3, r4, r5, pc}
 800d0e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d0ea:	b112      	cbz	r2, 800d0f2 <_raise_r+0x1e>
 800d0ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0f0:	b94b      	cbnz	r3, 800d106 <_raise_r+0x32>
 800d0f2:	4628      	mov	r0, r5
 800d0f4:	f000 f830 	bl	800d158 <_getpid_r>
 800d0f8:	4622      	mov	r2, r4
 800d0fa:	4601      	mov	r1, r0
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d102:	f000 b817 	b.w	800d134 <_kill_r>
 800d106:	2b01      	cmp	r3, #1
 800d108:	d00a      	beq.n	800d120 <_raise_r+0x4c>
 800d10a:	1c59      	adds	r1, r3, #1
 800d10c:	d103      	bne.n	800d116 <_raise_r+0x42>
 800d10e:	2316      	movs	r3, #22
 800d110:	6003      	str	r3, [r0, #0]
 800d112:	2001      	movs	r0, #1
 800d114:	e7e7      	b.n	800d0e6 <_raise_r+0x12>
 800d116:	2100      	movs	r1, #0
 800d118:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d11c:	4620      	mov	r0, r4
 800d11e:	4798      	blx	r3
 800d120:	2000      	movs	r0, #0
 800d122:	e7e0      	b.n	800d0e6 <_raise_r+0x12>

0800d124 <raise>:
 800d124:	4b02      	ldr	r3, [pc, #8]	@ (800d130 <raise+0xc>)
 800d126:	4601      	mov	r1, r0
 800d128:	6818      	ldr	r0, [r3, #0]
 800d12a:	f7ff bfd3 	b.w	800d0d4 <_raise_r>
 800d12e:	bf00      	nop
 800d130:	20000020 	.word	0x20000020

0800d134 <_kill_r>:
 800d134:	b538      	push	{r3, r4, r5, lr}
 800d136:	4d07      	ldr	r5, [pc, #28]	@ (800d154 <_kill_r+0x20>)
 800d138:	2300      	movs	r3, #0
 800d13a:	4604      	mov	r4, r0
 800d13c:	4608      	mov	r0, r1
 800d13e:	4611      	mov	r1, r2
 800d140:	602b      	str	r3, [r5, #0]
 800d142:	f7f5 fe87 	bl	8002e54 <_kill>
 800d146:	1c43      	adds	r3, r0, #1
 800d148:	d102      	bne.n	800d150 <_kill_r+0x1c>
 800d14a:	682b      	ldr	r3, [r5, #0]
 800d14c:	b103      	cbz	r3, 800d150 <_kill_r+0x1c>
 800d14e:	6023      	str	r3, [r4, #0]
 800d150:	bd38      	pop	{r3, r4, r5, pc}
 800d152:	bf00      	nop
 800d154:	20013788 	.word	0x20013788

0800d158 <_getpid_r>:
 800d158:	f7f5 be74 	b.w	8002e44 <_getpid>

0800d15c <__swhatbuf_r>:
 800d15c:	b570      	push	{r4, r5, r6, lr}
 800d15e:	460c      	mov	r4, r1
 800d160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d164:	2900      	cmp	r1, #0
 800d166:	b096      	sub	sp, #88	@ 0x58
 800d168:	4615      	mov	r5, r2
 800d16a:	461e      	mov	r6, r3
 800d16c:	da0d      	bge.n	800d18a <__swhatbuf_r+0x2e>
 800d16e:	89a3      	ldrh	r3, [r4, #12]
 800d170:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d174:	f04f 0100 	mov.w	r1, #0
 800d178:	bf14      	ite	ne
 800d17a:	2340      	movne	r3, #64	@ 0x40
 800d17c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d180:	2000      	movs	r0, #0
 800d182:	6031      	str	r1, [r6, #0]
 800d184:	602b      	str	r3, [r5, #0]
 800d186:	b016      	add	sp, #88	@ 0x58
 800d188:	bd70      	pop	{r4, r5, r6, pc}
 800d18a:	466a      	mov	r2, sp
 800d18c:	f000 f848 	bl	800d220 <_fstat_r>
 800d190:	2800      	cmp	r0, #0
 800d192:	dbec      	blt.n	800d16e <__swhatbuf_r+0x12>
 800d194:	9901      	ldr	r1, [sp, #4]
 800d196:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d19a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d19e:	4259      	negs	r1, r3
 800d1a0:	4159      	adcs	r1, r3
 800d1a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1a6:	e7eb      	b.n	800d180 <__swhatbuf_r+0x24>

0800d1a8 <__smakebuf_r>:
 800d1a8:	898b      	ldrh	r3, [r1, #12]
 800d1aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1ac:	079d      	lsls	r5, r3, #30
 800d1ae:	4606      	mov	r6, r0
 800d1b0:	460c      	mov	r4, r1
 800d1b2:	d507      	bpl.n	800d1c4 <__smakebuf_r+0x1c>
 800d1b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d1b8:	6023      	str	r3, [r4, #0]
 800d1ba:	6123      	str	r3, [r4, #16]
 800d1bc:	2301      	movs	r3, #1
 800d1be:	6163      	str	r3, [r4, #20]
 800d1c0:	b003      	add	sp, #12
 800d1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1c4:	ab01      	add	r3, sp, #4
 800d1c6:	466a      	mov	r2, sp
 800d1c8:	f7ff ffc8 	bl	800d15c <__swhatbuf_r>
 800d1cc:	9f00      	ldr	r7, [sp, #0]
 800d1ce:	4605      	mov	r5, r0
 800d1d0:	4639      	mov	r1, r7
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	f7fc fe4a 	bl	8009e6c <_malloc_r>
 800d1d8:	b948      	cbnz	r0, 800d1ee <__smakebuf_r+0x46>
 800d1da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1de:	059a      	lsls	r2, r3, #22
 800d1e0:	d4ee      	bmi.n	800d1c0 <__smakebuf_r+0x18>
 800d1e2:	f023 0303 	bic.w	r3, r3, #3
 800d1e6:	f043 0302 	orr.w	r3, r3, #2
 800d1ea:	81a3      	strh	r3, [r4, #12]
 800d1ec:	e7e2      	b.n	800d1b4 <__smakebuf_r+0xc>
 800d1ee:	89a3      	ldrh	r3, [r4, #12]
 800d1f0:	6020      	str	r0, [r4, #0]
 800d1f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1f6:	81a3      	strh	r3, [r4, #12]
 800d1f8:	9b01      	ldr	r3, [sp, #4]
 800d1fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d1fe:	b15b      	cbz	r3, 800d218 <__smakebuf_r+0x70>
 800d200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d204:	4630      	mov	r0, r6
 800d206:	f000 f81d 	bl	800d244 <_isatty_r>
 800d20a:	b128      	cbz	r0, 800d218 <__smakebuf_r+0x70>
 800d20c:	89a3      	ldrh	r3, [r4, #12]
 800d20e:	f023 0303 	bic.w	r3, r3, #3
 800d212:	f043 0301 	orr.w	r3, r3, #1
 800d216:	81a3      	strh	r3, [r4, #12]
 800d218:	89a3      	ldrh	r3, [r4, #12]
 800d21a:	431d      	orrs	r5, r3
 800d21c:	81a5      	strh	r5, [r4, #12]
 800d21e:	e7cf      	b.n	800d1c0 <__smakebuf_r+0x18>

0800d220 <_fstat_r>:
 800d220:	b538      	push	{r3, r4, r5, lr}
 800d222:	4d07      	ldr	r5, [pc, #28]	@ (800d240 <_fstat_r+0x20>)
 800d224:	2300      	movs	r3, #0
 800d226:	4604      	mov	r4, r0
 800d228:	4608      	mov	r0, r1
 800d22a:	4611      	mov	r1, r2
 800d22c:	602b      	str	r3, [r5, #0]
 800d22e:	f7f5 fe71 	bl	8002f14 <_fstat>
 800d232:	1c43      	adds	r3, r0, #1
 800d234:	d102      	bne.n	800d23c <_fstat_r+0x1c>
 800d236:	682b      	ldr	r3, [r5, #0]
 800d238:	b103      	cbz	r3, 800d23c <_fstat_r+0x1c>
 800d23a:	6023      	str	r3, [r4, #0]
 800d23c:	bd38      	pop	{r3, r4, r5, pc}
 800d23e:	bf00      	nop
 800d240:	20013788 	.word	0x20013788

0800d244 <_isatty_r>:
 800d244:	b538      	push	{r3, r4, r5, lr}
 800d246:	4d06      	ldr	r5, [pc, #24]	@ (800d260 <_isatty_r+0x1c>)
 800d248:	2300      	movs	r3, #0
 800d24a:	4604      	mov	r4, r0
 800d24c:	4608      	mov	r0, r1
 800d24e:	602b      	str	r3, [r5, #0]
 800d250:	f7f5 fe70 	bl	8002f34 <_isatty>
 800d254:	1c43      	adds	r3, r0, #1
 800d256:	d102      	bne.n	800d25e <_isatty_r+0x1a>
 800d258:	682b      	ldr	r3, [r5, #0]
 800d25a:	b103      	cbz	r3, 800d25e <_isatty_r+0x1a>
 800d25c:	6023      	str	r3, [r4, #0]
 800d25e:	bd38      	pop	{r3, r4, r5, pc}
 800d260:	20013788 	.word	0x20013788

0800d264 <_init>:
 800d264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d266:	bf00      	nop
 800d268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d26a:	bc08      	pop	{r3}
 800d26c:	469e      	mov	lr, r3
 800d26e:	4770      	bx	lr

0800d270 <_fini>:
 800d270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d272:	bf00      	nop
 800d274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d276:	bc08      	pop	{r3}
 800d278:	469e      	mov	lr, r3
 800d27a:	4770      	bx	lr
